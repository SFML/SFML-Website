<?php
    $version = '2.1'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'String.hpp Source File'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.php"><span>Modules</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_83ae1a5e8455fc62607b4936b42116e9.php">sfml</a></li><li class="navelem"><a class="el" href="dir_79a044fa5ec8bbf4af7d440d8995a178.php">sfml</a></li><li class="navelem"><a class="el" href="dir_f3190241575fd2bd132a392ae6942f4a.php">include</a></li><li class="navelem"><a class="el" href="dir_692f376662c82a26cfe4cfa3aceebe24.php">SFML</a></li><li class="navelem"><a class="el" href="dir_60c5c649f8df3b69a45a020d59f81335.php">System</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">String.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SFML - Simple and Fast Multimedia Library</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (C) 2007-2013 Laurent Gomila (laurent.gom@gmail.com)</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// Permission is granted to anyone to use this software for any purpose,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// subject to the following restrictions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// 1. The origin of this software must not be misrepresented;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    you must not claim that you wrote the original software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//    If you use this software in a product, an acknowledgment</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//    in the product documentation would be appreciated but is not required.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">// 2. Altered source versions must be plainly marked as such,</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//    and must not be misrepresented as being the original software.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef SFML_STRING_HPP</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SFML_STRING_HPP</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// Headers</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"></span><span class="preprocessor">#include &lt;SFML/System/Export.hpp&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;locale&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span>sf</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="code" href="classsf_1_1String.php">   43</a></span>&#160;<span class="keyword">class </span>SFML_SYSTEM_API <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">public</span> :</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// Types</span></div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="code" href="classsf_1_1String.php#ac90f2b7b28f703020f8d027e98806235">   50</a></span>&#160;<span class="comment"></span>    <span class="keyword">typedef</span> std::basic_string&lt;Uint32&gt;::iterator       <a class="code" href="classsf_1_1String.php#ac90f2b7b28f703020f8d027e98806235" title="Iterator type.">Iterator</a>;      </div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="code" href="classsf_1_1String.php#a8e18efc2e8464f6eb82818902d527efa">   51</a></span>&#160;    <span class="keyword">typedef</span> std::basic_string&lt;Uint32&gt;::const_iterator <a class="code" href="classsf_1_1String.php#a8e18efc2e8464f6eb82818902d527efa" title="Constant iterator type.">ConstIterator</a>; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// Static member data</span></div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="code" href="classsf_1_1String.php#abaadecaf12a6b41c54d725c75fd28527">   56</a></span>&#160;<span class="comment"></span>    <span class="keyword">static</span> <span class="keyword">const</span> std::size_t <a class="code" href="classsf_1_1String.php#abaadecaf12a6b41c54d725c75fd28527" title="Represents an invalid position in the string.">InvalidPos</a>; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(<span class="keywordtype">char</span> ansiChar, <span class="keyword">const</span> std::locale&amp; locale = std::locale());</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(<span class="keywordtype">wchar_t</span> wideChar);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(Uint32 utf32Char);</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* ansiString, <span class="keyword">const</span> std::locale&amp; locale = std::locale());</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(<span class="keyword">const</span> std::string&amp; ansiString, <span class="keyword">const</span> std::locale&amp; locale = std::locale());</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* wideString);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(<span class="keyword">const</span> std::wstring&amp; wideString);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(<span class="keyword">const</span> Uint32* utf32String);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(<span class="keyword">const</span> std::basic_string&lt;Uint32&gt;&amp; utf32String);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; copy);</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">operator</span> std::string() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">operator</span> std::wstring() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    std::string toAnsiString(<span class="keyword">const</span> std::locale&amp; locale = std::locale()) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    std::wstring toWideString() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; operator =(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; operator +=(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    Uint32 operator [](std::size_t index) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    Uint32&amp; operator [](std::size_t index);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordtype">void</span> clear();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    std::size_t getSize() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordtype">bool</span> isEmpty() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keywordtype">void</span> erase(std::size_t position, std::size_t count = 1);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordtype">void</span> insert(std::size_t position, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; str);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    std::size_t find(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; str, std::size_t start = 0) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">const</span> Uint32* getData() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <a class="code" href="classsf_1_1String.php#ac90f2b7b28f703020f8d027e98806235" title="Iterator type.">Iterator</a> begin();</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <a class="code" href="classsf_1_1String.php#a8e18efc2e8464f6eb82818902d527efa" title="Constant iterator type.">ConstIterator</a> begin() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <a class="code" href="classsf_1_1String.php#ac90f2b7b28f703020f8d027e98806235" title="Iterator type.">Iterator</a> end();</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <a class="code" href="classsf_1_1String.php#a8e18efc2e8464f6eb82818902d527efa" title="Constant iterator type.">ConstIterator</a> end() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="keyword">private</span> :</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">friend</span> SFML_SYSTEM_API <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    <span class="keyword">friend</span> SFML_SYSTEM_API <span class="keywordtype">bool</span> operator &lt;(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="comment">// Member data</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment"></span>    std::basic_string&lt;Uint32&gt; m_string; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;};</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;SFML_SYSTEM_API <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;SFML_SYSTEM_API <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;SFML_SYSTEM_API <span class="keywordtype">bool</span> operator &lt;(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;SFML_SYSTEM_API <span class="keywordtype">bool</span> operator &gt;(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;SFML_SYSTEM_API <span class="keywordtype">bool</span> operator &lt;=(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;SFML_SYSTEM_API <span class="keywordtype">bool</span> operator &gt;=(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;SFML_SYSTEM_API <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a> operator +(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; right);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;} <span class="comment">// namespace sf</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="preprocessor">#endif // SFML_STRING_HPP</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div>
</div><!-- fragment --></div><!-- contents -->
<?php
    require("../footer.php");
?>
