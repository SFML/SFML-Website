<?php
    $version = '2.4.1'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'System module'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.10 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.php"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.php"><span>Modules</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">System module</div>  </div>
</div><!--header-->
<div class="contents">

<p>Base module of SFML, defining various utilities.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Clock.php">sf::Clock</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility class that measures the elapsed time.  <a href="classsf_1_1Clock.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1FileInputStream.php">sf::FileInputStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of input stream based on a file.  <a href="classsf_1_1FileInputStream.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1InputStream.php">sf::InputStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract class for custom file input streams.  <a href="classsf_1_1InputStream.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Lock.php">sf::Lock</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Automatic wrapper for locking and unlocking mutexes.  <a href="classsf_1_1Lock.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1MemoryInputStream.php">sf::MemoryInputStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implementation of input stream based on a memory chunk.  <a href="classsf_1_1MemoryInputStream.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Mutex.php">sf::Mutex</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks concurrent access to shared resources from multiple threads.  <a href="classsf_1_1Mutex.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1NonCopyable.php">sf::NonCopyable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility class that makes any derived class non-copyable.  <a href="classsf_1_1NonCopyable.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.php">sf::String</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility string class that automatically handles conversions between types and encodings.  <a href="classsf_1_1String.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.php">sf::Thread</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility class to manipulate threads.  <a href="classsf_1_1Thread.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocal.php">sf::ThreadLocal</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Defines variables with thread-local storage.  <a href="classsf_1_1ThreadLocal.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocalPtr.php">sf::ThreadLocalPtr&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to a thread-local variable.  <a href="classsf_1_1ThreadLocalPtr.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.php">sf::Time</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a time value.  <a href="classsf_1_1Time.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Utf.php">sf::Utf&lt; N &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility class providing generic functions for UTF conversions.  <a href="classsf_1_1Utf.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.php">sf::Vector2&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility template class for manipulating 2-dimensional vectors.  <a href="classsf_1_1Vector2.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector3.php">sf::Vector3&lt; T &gt;</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility template class for manipulating 3-dimensional vectors.  <a href="classsf_1_1Vector3.php#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga666414341ce8396227f5a125ee5b7053"><td class="memItemLeft" align="right" valign="top">ANativeActivity *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system.php#ga666414341ce8396227f5a125ee5b7053">sf::getNativeActivity</a> ()</td></tr>
<tr class="memdesc:ga666414341ce8396227f5a125ee5b7053"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pointer to the Android native activity.  <a href="group__system.php#ga666414341ce8396227f5a125ee5b7053">More...</a><br /></td></tr>
<tr class="separator:ga666414341ce8396227f5a125ee5b7053"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab8c0d1f966b4e5110fd370b662d8c11b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system.php#gab8c0d1f966b4e5110fd370b662d8c11b">sf::sleep</a> (Time duration)</td></tr>
<tr class="memdesc:gab8c0d1f966b4e5110fd370b662d8c11b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make the current thread sleep for a given duration.  <a href="group__system.php#gab8c0d1f966b4e5110fd370b662d8c11b">More...</a><br /></td></tr>
<tr class="separator:gab8c0d1f966b4e5110fd370b662d8c11b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7fe7f475639e26334606b5142c29551f"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system.php#ga7fe7f475639e26334606b5142c29551f">sf::err</a> ()</td></tr>
<tr class="memdesc:ga7fe7f475639e26334606b5142c29551f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard stream used by SFML to output warnings and errors.  <a href="group__system.php#ga7fe7f475639e26334606b5142c29551f">More...</a><br /></td></tr>
<tr class="separator:ga7fe7f475639e26334606b5142c29551f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>Base module of SFML, defining various utilities. </p>
<p>It provides vector classes, Unicode strings and conversion functions, threads and mutexes, timing classes. </p>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="ga7fe7f475639e26334606b5142c29551f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::err </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Standard stream used by SFML to output warnings and errors. </p>
<p>By default, <a class="el" href="group__system.php#ga7fe7f475639e26334606b5142c29551f" title="Standard stream used by SFML to output warnings and errors. ">sf::err()</a> outputs to the same location as std::cerr, (-&gt; the stderr descriptor) which is the console if there's one available.</p>
<p>It is a standard std::ostream instance, so it supports all the insertion operations defined by the STL (operator &lt;&lt;, manipulators, etc.).</p>
<p><a class="el" href="group__system.php#ga7fe7f475639e26334606b5142c29551f" title="Standard stream used by SFML to output warnings and errors. ">sf::err()</a> can be redirected to write to another output, independently of std::cerr, by using the rdbuf() function provided by the std::ostream class.</p>
<p>Example: </p><div class="fragment"><div class="line"><span class="comment">// Redirect to a file</span></div>
<div class="line">std::ofstream file(<span class="stringliteral">&quot;sfml-log.txt&quot;</span>);</div>
<div class="line">std::streambuf* previous = <a class="code" href="group__system.php#ga7fe7f475639e26334606b5142c29551f">sf::err</a>().rdbuf(file.rdbuf());</div>
<div class="line"></div>
<div class="line"><span class="comment">// Redirect to nothing</span></div>
<div class="line"><a class="code" href="group__system.php#ga7fe7f475639e26334606b5142c29551f">sf::err</a>().rdbuf(NULL);</div>
<div class="line"></div>
<div class="line"><span class="comment">// Restore the original output</span></div>
<div class="line"><a class="code" href="group__system.php#ga7fe7f475639e26334606b5142c29551f">sf::err</a>().rdbuf(previous);</div>
</div><!-- fragment --><dl class="section return"><dt>Returns</dt><dd>Reference to std::ostream representing the SFML error stream </dd></dl>

</div>
</div>
<a class="anchor" id="ga666414341ce8396227f5a125ee5b7053"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ANativeActivity * sf::getNativeActivity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return a pointer to the Android native activity. </p>
<p>You shouldn't have to use this function, unless you want to implement very specific details, that SFML doesn't support, or to use a workaround for a known issue.</p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to Android native activity structure</dd></dl>
<p>{Android,SFML/System/NativeActivity.hpp} </p>

</div>
</div>
<a class="anchor" id="gab8c0d1f966b4e5110fd370b662d8c11b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::sleep </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.php">Time</a>&#160;</td>
          <td class="paramname"><em>duration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Make the current thread sleep for a given duration. </p>
<p>sf::sleep is the best way to block a program or one of its threads, as it doesn't consume any CPU power.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">duration</td><td><a class="el" href="classsf_1_1Time.php" title="Represents a time value. ">Time</a> to sleep </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
<?php
    require("../footer.php");
?>
