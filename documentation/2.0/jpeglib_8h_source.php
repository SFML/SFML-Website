<?php
    $version = '2.0'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.php"><span>Modules</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_a0fcb5a19f655e235834e6382998c7e0.php">sfml</a></li><li class="navelem"><a class="el" href="dir_29bf4fae8a8e962aff98775afacdab0f.php">sfml</a></li><li class="navelem"><a class="el" href="dir_793f6ba77cf4e8a5d963fd5c095c876f.php">extlibs</a></li><li class="navelem"><a class="el" href="dir_68d8c18478ca54c694885cb8cbc52e5a.php">headers</a></li><li class="navelem"><a class="el" href="dir_5b6a7874b801642b9fbb81237cbdcc3a.php">jpeg</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">jpeglib.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * jpeglib.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * Copyright (C) 1991-1998, Thomas G. Lane.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * Modified 2002-2010 by Guido Vollbeding.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * This file is part of the Independent JPEG Group&#39;s software.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * For conditions of distribution and use, see the accompanying README file.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This file defines the application interface for the JPEG library.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * Most applications using the library need only include this file,</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * and perhaps jerror.h if they want to know the exact error codes.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#ifndef JPEGLIB_H</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEGLIB_H</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * First we include the configuration files that record how this</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * installation of the JPEG library is set up.  jconfig.h can be</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * generated automatically for many systems.  jmorecfg.h contains</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * manual configuration options that most people need not worry about.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef JCONFIG_INCLUDED    </span><span class="comment">/* in case jinclude.h already did */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;jconfig.h&quot;</span>        <span class="comment">/* widely used configuration options */</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;jmorecfg.h&quot;</span>       <span class="comment">/* seldom changed options */</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifndef DONT_USE_EXTERN_C</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/* Version IDs for the JPEG library.</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * Might be useful for tests like &quot;#if JPEG_LIB_VERSION &gt;= 80&quot;.</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#define JPEG_LIB_VERSION        80  </span><span class="comment">/* Compatibility version 8.0 */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_LIB_VERSION_MAJOR  8</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_LIB_VERSION_MINOR  3</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/* Various constants determining the sizes of things.</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * All of these are specified by the JPEG standard, so don&#39;t change them</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * if you want to be compatible.</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#define DCTSIZE         8   </span><span class="comment">/* The basic DCT block is 8x8 samples */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define DCTSIZE2        64  </span><span class="comment">/* DCTSIZE squared; # of elements in a block */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define NUM_QUANT_TBLS      4   </span><span class="comment">/* Quantization tables are numbered 0..3 */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define NUM_HUFF_TBLS       4   </span><span class="comment">/* Huffman tables are numbered 0..3 */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define NUM_ARITH_TBLS      16  </span><span class="comment">/* Arith-coding tables are numbered 0..15 */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define MAX_COMPS_IN_SCAN   4   </span><span class="comment">/* JPEG limit on # of components in one scan */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define MAX_SAMP_FACTOR     4   </span><span class="comment">/* JPEG limit on sampling factors */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor"></span><span class="comment">/* Unfortunately, some bozo at Adobe saw no reason to be bound by the standard;</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> * the PostScript DCT filter can emit files with many more than 10 blocks/MCU.</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> * If you happen to run across such a file, you can up D_MAX_BLOCKS_IN_MCU</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * to handle it.  We even let you do this from the jconfig.h file.  However,</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> * we strongly discourage changing C_MAX_BLOCKS_IN_MCU; just because Adobe</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> * sometimes emits noncompliant files doesn&#39;t mean you should too.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#define C_MAX_BLOCKS_IN_MCU   10 </span><span class="comment">/* compressor&#39;s limit on blocks per MCU */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifndef D_MAX_BLOCKS_IN_MCU</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define D_MAX_BLOCKS_IN_MCU   10 </span><span class="comment">/* decompressor&#39;s limit on blocks per MCU */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">/* Data structures for images (arrays of samples and of DCT coefficients).</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * On 80x86 machines, the image arrays are too big for near pointers,</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> * but the pointer arrays can fit in near memory.</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">typedef</span> JSAMPLE FAR *JSAMPROW;  <span class="comment">/* ptr to one image row of pixel samples. */</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">typedef</span> JSAMPROW *JSAMPARRAY;   <span class="comment">/* ptr to some rows (a 2-D sample array) */</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">typedef</span> JSAMPARRAY *JSAMPIMAGE; <span class="comment">/* a 3-D sample array: top index is color */</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">typedef</span> JCOEF JBLOCK[DCTSIZE2]; <span class="comment">/* one block of coefficients */</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">typedef</span> JBLOCK FAR *JBLOCKROW;  <span class="comment">/* pointer to one row of coefficient blocks */</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">typedef</span> JBLOCKROW *JBLOCKARRAY;     <span class="comment">/* a 2-D array of coefficient blocks */</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">typedef</span> JBLOCKARRAY *JBLOCKIMAGE;   <span class="comment">/* a 3-D array of coefficient blocks */</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">typedef</span> JCOEF FAR *JCOEFPTR;    <span class="comment">/* useful in a couple of places */</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">/* Types for JPEG compression parameters and working tables. */</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">/* DCT coefficient quantization tables. */</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="code" href="structJQUANT__TBL.php">   92</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="comment">/* This array gives the coefficient quantizers in natural array order</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">   * (not the zigzag order in which they are stored in a JPEG DQT marker).</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">   * CAUTION: IJG versions prior to v6a kept this array in zigzag order.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  UINT16 quantval[DCTSIZE2];    <span class="comment">/* quantization step for each coefficient */</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="comment">/* This field is used only during compression.  It&#39;s initialized FALSE when</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">   * the table is created, and set TRUE when it&#39;s been output to the file.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">   * You could suppress output of a table by setting this to TRUE.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">   * (See jpeg_suppress_tables for an example.)</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordtype">boolean</span> sent_table;       <span class="comment">/* TRUE when table has been output */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;} <a class="code" href="structJQUANT__TBL.php">JQUANT_TBL</a>;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">/* Huffman coding tables. */</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="code" href="structJHUFF__TBL.php">  109</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="comment">/* These two fields directly represent the contents of a JPEG DHT marker */</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  UINT8 bits[17];       <span class="comment">/* bits[k] = # of symbols with codes of */</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="comment">/* length k bits; bits[0] is unused */</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  UINT8 huffval[256];       <span class="comment">/* The symbols, in order of incr code length */</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="comment">/* This field is used only during compression.  It&#39;s initialized FALSE when</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">   * the table is created, and set TRUE when it&#39;s been output to the file.</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">   * You could suppress output of a table by setting this to TRUE.</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">   * (See jpeg_suppress_tables for an example.)</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordtype">boolean</span> sent_table;       <span class="comment">/* TRUE when table has been output */</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;} <a class="code" href="structJHUFF__TBL.php">JHUFF_TBL</a>;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">/* Basic info about one component (color channel). */</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="code" href="structjpeg__component__info.php">  125</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="comment">/* These values are fixed over the whole image. */</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="comment">/* For compression, they must be supplied by parameter setup; */</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="comment">/* for decompression, they are read from the SOF marker. */</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordtype">int</span> component_id;     <span class="comment">/* identifier for this component (0..255) */</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordtype">int</span> component_index;      <span class="comment">/* its index in SOF or cinfo-&gt;comp_info[] */</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordtype">int</span> h_samp_factor;        <span class="comment">/* horizontal sampling factor (1..4) */</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordtype">int</span> v_samp_factor;        <span class="comment">/* vertical sampling factor (1..4) */</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordtype">int</span> quant_tbl_no;     <span class="comment">/* quantization table selector (0..3) */</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="comment">/* These values may vary between scans. */</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="comment">/* For compression, they must be supplied by parameter setup; */</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="comment">/* for decompression, they are read from the SOS marker. */</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="comment">/* The decompressor output side may not use these variables. */</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keywordtype">int</span> dc_tbl_no;        <span class="comment">/* DC entropy table selector (0..3) */</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keywordtype">int</span> ac_tbl_no;        <span class="comment">/* AC entropy table selector (0..3) */</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="comment">/* Remaining fields should be treated as private by applications. */</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="comment">/* These values are computed during compression or decompression startup: */</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="comment">/* Component&#39;s size in DCT blocks.</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">   * Any dummy blocks added to complete an MCU are not counted; therefore</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">   * these values do not depend on whether a scan is interleaved or not.</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  JDIMENSION width_in_blocks;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  JDIMENSION height_in_blocks;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="comment">/* Size of a DCT block in samples,</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">   * reflecting any scaling we choose to apply during the DCT step.</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">   * Values from 1 to 16 are supported.</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">   * Note that different components may receive different DCT scalings.</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordtype">int</span> DCT_h_scaled_size;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordtype">int</span> DCT_v_scaled_size;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="comment">/* The downsampled dimensions are the component&#39;s actual, unpadded number</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">   * of samples at the main buffer (preprocessing/compression interface);</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">   * DCT scaling is included, so</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">   * downsampled_width = ceil(image_width * Hi/Hmax * DCT_h_scaled_size/DCTSIZE)</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment">   * and similarly for height.</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  JDIMENSION downsampled_width;  <span class="comment">/* actual width in samples */</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  JDIMENSION downsampled_height; <span class="comment">/* actual height in samples */</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="comment">/* This flag is used only for decompression.  In cases where some of the</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">   * components will be ignored (eg grayscale output from YCbCr image),</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">   * we can skip most computations for the unused components.</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keywordtype">boolean</span> component_needed; <span class="comment">/* do we need the value of this component? */</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <span class="comment">/* These values are computed before starting a scan of the component. */</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="comment">/* The decompressor output side may not use these variables. */</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="keywordtype">int</span> MCU_width;        <span class="comment">/* number of blocks per MCU, horizontally */</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordtype">int</span> MCU_height;       <span class="comment">/* number of blocks per MCU, vertically */</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keywordtype">int</span> MCU_blocks;       <span class="comment">/* MCU_width * MCU_height */</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keywordtype">int</span> MCU_sample_width; <span class="comment">/* MCU width in samples: MCU_width * DCT_h_scaled_size */</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keywordtype">int</span> last_col_width;       <span class="comment">/* # of non-dummy blocks across in last MCU */</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keywordtype">int</span> last_row_height;      <span class="comment">/* # of non-dummy blocks down in last MCU */</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="comment">/* Saved quantization table for component; NULL if none yet saved.</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">   * See jdinput.c comments about the need for this information.</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">   * This field is currently used only for decompression.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <a class="code" href="structJQUANT__TBL.php">JQUANT_TBL</a> * quant_table;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="comment">/* Private per-component storage for DCT or IDCT subsystem. */</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordtype">void</span> * dct_table;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;} <a class="code" href="structjpeg__component__info.php">jpeg_component_info</a>;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">/* The script for encoding a multiple-scan file is an array of these: */</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="code" href="structjpeg__scan__info.php">  193</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keywordtype">int</span> comps_in_scan;        <span class="comment">/* number of components encoded in this scan */</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keywordtype">int</span> component_index[MAX_COMPS_IN_SCAN]; <span class="comment">/* their SOF/comp_info[] indexes */</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordtype">int</span> Ss, Se;           <span class="comment">/* progressive JPEG spectral selection parms */</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keywordtype">int</span> Ah, Al;           <span class="comment">/* progressive JPEG successive approx. parms */</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;} <a class="code" href="structjpeg__scan__info.php">jpeg_scan_info</a>;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">/* The decompressor can save APPn and COM markers in a list of these: */</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structjpeg__marker__struct.php">jpeg_marker_struct</a> FAR * jpeg_saved_marker_ptr;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="structjpeg__marker__struct.php">  204</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structjpeg__marker__struct.php">jpeg_marker_struct</a> {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  jpeg_saved_marker_ptr next;   <span class="comment">/* next in list, or NULL */</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  UINT8 marker;         <span class="comment">/* marker code: JPEG_COM, or JPEG_APP0+n */</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> original_length; <span class="comment">/* # bytes of data in the file */</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> data_length; <span class="comment">/* # bytes of data saved at data[] */</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  JOCTET FAR * data;        <span class="comment">/* the data contained in the marker */</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="comment">/* the marker length word is not counted in data_length or original_length */</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;};</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">/* Known color spaces. */</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    JCS_UNKNOWN,        <span class="comment">/* error/unspecified */</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    JCS_GRAYSCALE,      <span class="comment">/* monochrome */</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    JCS_RGB,        <span class="comment">/* red/green/blue */</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    JCS_YCbCr,      <span class="comment">/* Y/Cb/Cr (also known as YUV) */</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    JCS_CMYK,       <span class="comment">/* C/M/Y/K */</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    JCS_YCCK        <span class="comment">/* Y/Cb/Cr/K */</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;} J_COLOR_SPACE;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">/* DCT/IDCT algorithm options. */</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    JDCT_ISLOW,     <span class="comment">/* slow but accurate integer algorithm */</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    JDCT_IFAST,     <span class="comment">/* faster, less accurate integer method */</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    JDCT_FLOAT      <span class="comment">/* floating-point: accurate, fast on fast HW */</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;} J_DCT_METHOD;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="preprocessor">#ifndef JDCT_DEFAULT        </span><span class="comment">/* may be overridden in jconfig.h */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JDCT_DEFAULT  JDCT_ISLOW</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifndef JDCT_FASTEST        </span><span class="comment">/* may be overridden in jconfig.h */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JDCT_FASTEST  JDCT_IFAST</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">/* Dithering options for decompression. */</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    JDITHER_NONE,       <span class="comment">/* no dithering */</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    JDITHER_ORDERED,    <span class="comment">/* simple ordered dither */</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    JDITHER_FS      <span class="comment">/* Floyd-Steinberg error diffusion dither */</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;} J_DITHER_MODE;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">/* Common fields between JPEG compression and decompression master structs. */</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">#define jpeg_common_fields \</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">  struct jpeg_error_mgr * err;  </span><span class="comment">/* Error handler module */</span><span class="preprocessor">\</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">  struct jpeg_memory_mgr * mem; </span><span class="comment">/* Memory manager module */</span><span class="preprocessor">\</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">  struct jpeg_progress_mgr * progress; </span><span class="comment">/* Progress monitor, or NULL if none */</span><span class="preprocessor">\</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="preprocessor">  void * client_data;       </span><span class="comment">/* Available for use by application */</span><span class="preprocessor">\</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="preprocessor">  boolean is_decompressor;  </span><span class="comment">/* So common code can tell which is which */</span><span class="preprocessor">\</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">  int global_state      </span><span class="comment">/* For checking call sequence validity */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">/* Routines that are to be used by both halves of the library are declared</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="comment"> * to receive a pointer to this structure.  There are no actual instances of</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="comment"> * jpeg_common_struct, only of jpeg_compress_struct and jpeg_decompress_struct.</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00262"></a><span class="lineno"><a class="code" href="structjpeg__common__struct.php">  262</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structjpeg__common__struct.php">jpeg_common_struct</a> {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  jpeg_common_fields;       <span class="comment">/* Fields common to both master struct types */</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="comment">/* Additional fields follow in an actual jpeg_compress_struct or</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">   * jpeg_decompress_struct.  All three structs must agree on these</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">   * initial fields!  (This would be a lot cleaner in C++.)</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;};</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structjpeg__common__struct.php">jpeg_common_struct</a> * <a class="code" href="structjpeg__common__struct.php">j_common_ptr</a>;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structjpeg__compress__struct.php">jpeg_compress_struct</a> * <a class="code" href="structjpeg__compress__struct.php">j_compress_ptr</a>;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="structjpeg__decompress__struct.php">jpeg_decompress_struct</a> * <a class="code" href="structjpeg__decompress__struct.php">j_decompress_ptr</a>;</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment">/* Master record for a compression instance */</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno"><a class="code" href="structjpeg__compress__struct.php">  277</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structjpeg__compress__struct.php">jpeg_compress_struct</a> {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  jpeg_common_fields;       <span class="comment">/* Fields shared with jpeg_decompress_struct */</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  <span class="comment">/* Destination for compressed data */</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="keyword">struct </span><a class="code" href="structjpeg__destination__mgr.php">jpeg_destination_mgr</a> * dest;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="comment">/* Description of source image --- these fields must be filled in by</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">   * outer application before starting compression.  in_color_space must</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">   * be correct before you can even call jpeg_set_defaults().</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  JDIMENSION image_width;   <span class="comment">/* input image width */</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  JDIMENSION image_height;  <span class="comment">/* input image height */</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="keywordtype">int</span> input_components;     <span class="comment">/* # of color components in input image */</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  J_COLOR_SPACE in_color_space; <span class="comment">/* colorspace of input image */</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keywordtype">double</span> input_gamma;       <span class="comment">/* image gamma of input image */</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="comment">/* Compression parameters --- these fields must be set before calling</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">   * jpeg_start_compress().  We recommend calling jpeg_set_defaults() to</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">   * initialize everything to reasonable defaults, then changing anything</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">   * the application specifically wants to change.  That way you won&#39;t get</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">   * burnt when new parameters are added.  Also note that there are several</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">   * helper routines to simplify changing parameters.</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> scale_num, scale_denom; <span class="comment">/* fraction by which to scale image */</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  JDIMENSION jpeg_width;    <span class="comment">/* scaled JPEG image width */</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  JDIMENSION jpeg_height;   <span class="comment">/* scaled JPEG image height */</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="comment">/* Dimensions of actual JPEG image that will be written to file,</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">   * derived from input dimensions by scaling factors above.</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">   * These fields are computed by jpeg_start_compress().</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">   * You can also use jpeg_calc_jpeg_dimensions() to determine these values</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">   * in advance of calling jpeg_start_compress().</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  <span class="keywordtype">int</span> data_precision;       <span class="comment">/* bits of precision in image data */</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <span class="keywordtype">int</span> num_components;       <span class="comment">/* # of color components in JPEG image */</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  J_COLOR_SPACE jpeg_color_space; <span class="comment">/* colorspace of JPEG image */</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <a class="code" href="structjpeg__component__info.php">jpeg_component_info</a> * comp_info;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="comment">/* comp_info[i] describes component that appears i&#39;th in SOF */</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  <a class="code" href="structJQUANT__TBL.php">JQUANT_TBL</a> * quant_tbl_ptrs[NUM_QUANT_TBLS];</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordtype">int</span> q_scale_factor[NUM_QUANT_TBLS];</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="comment">/* ptrs to coefficient quantization tables, or NULL if not defined,</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">   * and corresponding scale factors (percentage, initialized 100).</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  <a class="code" href="structJHUFF__TBL.php">JHUFF_TBL</a> * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <a class="code" href="structJHUFF__TBL.php">JHUFF_TBL</a> * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <span class="comment">/* ptrs to Huffman coding tables, or NULL if not defined */</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  UINT8 arith_dc_L[NUM_ARITH_TBLS]; <span class="comment">/* L values for DC arith-coding tables */</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  UINT8 arith_dc_U[NUM_ARITH_TBLS]; <span class="comment">/* U values for DC arith-coding tables */</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  UINT8 arith_ac_K[NUM_ARITH_TBLS]; <span class="comment">/* Kx values for AC arith-coding tables */</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keywordtype">int</span> num_scans;        <span class="comment">/* # of entries in scan_info array */</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keyword">const</span> <a class="code" href="structjpeg__scan__info.php">jpeg_scan_info</a> * scan_info; <span class="comment">/* script for multi-scan file, or NULL */</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <span class="comment">/* The default value of scan_info is NULL, which causes a single-scan</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">   * sequential JPEG file to be emitted.  To create a multi-scan file,</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">   * set num_scans and scan_info to point to an array of scan definitions.</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <span class="keywordtype">boolean</span> raw_data_in;      <span class="comment">/* TRUE=caller supplies downsampled data */</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <span class="keywordtype">boolean</span> arith_code;       <span class="comment">/* TRUE=arithmetic coding, FALSE=Huffman */</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <span class="keywordtype">boolean</span> optimize_coding;  <span class="comment">/* TRUE=optimize entropy encoding parms */</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="keywordtype">boolean</span> CCIR601_sampling; <span class="comment">/* TRUE=first samples are cosited */</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  <span class="keywordtype">boolean</span> do_fancy_downsampling; <span class="comment">/* TRUE=apply fancy downsampling */</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="keywordtype">int</span> smoothing_factor;     <span class="comment">/* 1..100, or 0 for no input smoothing */</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  J_DCT_METHOD dct_method;  <span class="comment">/* DCT algorithm selector */</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="comment">/* The restart interval can be specified in absolute MCUs by setting</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment">   * restart_interval, or in MCU rows by setting restart_in_rows</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">   * (in which case the correct restart_interval will be figured</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="comment">   * for each scan).</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> restart_interval; <span class="comment">/* MCUs per restart, or 0 for no restart */</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  <span class="keywordtype">int</span> restart_in_rows;      <span class="comment">/* if &gt; 0, MCU rows per restart interval */</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <span class="comment">/* Parameters controlling emission of special markers. */</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  <span class="keywordtype">boolean</span> write_JFIF_header;    <span class="comment">/* should a JFIF marker be written? */</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  UINT8 JFIF_major_version; <span class="comment">/* What to write for the JFIF version number */</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  UINT8 JFIF_minor_version;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  <span class="comment">/* These three values are not used by the JPEG code, merely copied */</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <span class="comment">/* into the JFIF APP0 marker.  density_unit can be 0 for unknown, */</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <span class="comment">/* 1 for dots/inch, or 2 for dots/cm.  Note that the pixel aspect */</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <span class="comment">/* ratio is defined by X_density/Y_density even when density_unit=0. */</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  UINT8 density_unit;       <span class="comment">/* JFIF code for pixel size units */</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  UINT16 X_density;     <span class="comment">/* Horizontal pixel density */</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  UINT16 Y_density;     <span class="comment">/* Vertical pixel density */</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  <span class="keywordtype">boolean</span> write_Adobe_marker;   <span class="comment">/* should an Adobe marker be written? */</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <span class="comment">/* State variable: index of next scanline to be written to</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">   * jpeg_write_scanlines().  Application may use this to control its</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">   * processing loop, e.g., &quot;while (next_scanline &lt; image_height)&quot;.</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  JDIMENSION next_scanline; <span class="comment">/* 0 .. image_height-1  */</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  <span class="comment">/* Remaining fields are known throughout compressor, but generally</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="comment">   * should not be touched by a surrounding application.</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  <span class="comment">/*</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">   * These fields are computed during compression startup</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <span class="keywordtype">boolean</span> progressive_mode; <span class="comment">/* TRUE if scan script uses progressive mode */</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <span class="keywordtype">int</span> max_h_samp_factor;    <span class="comment">/* largest h_samp_factor */</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  <span class="keywordtype">int</span> max_v_samp_factor;    <span class="comment">/* largest v_samp_factor */</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  <span class="keywordtype">int</span> min_DCT_h_scaled_size;    <span class="comment">/* smallest DCT_h_scaled_size of any component */</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <span class="keywordtype">int</span> min_DCT_v_scaled_size;    <span class="comment">/* smallest DCT_v_scaled_size of any component */</span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  JDIMENSION total_iMCU_rows;   <span class="comment">/* # of iMCU rows to be input to coef ctlr */</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="comment">/* The coefficient controller receives data in units of MCU rows as defined</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="comment">   * for fully interleaved scans (whether the JPEG file is interleaved or not).</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment">   * There are v_samp_factor * DCTSIZE sample rows of each component in an</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment">   * &quot;iMCU&quot; (interleaved MCU) row.</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  <span class="comment">/*</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment">   * These fields are valid during any one scan.</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment">   * They describe the components and MCUs actually appearing in the scan.</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  <span class="keywordtype">int</span> comps_in_scan;        <span class="comment">/* # of JPEG components in this scan */</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <a class="code" href="structjpeg__component__info.php">jpeg_component_info</a> * cur_comp_info[MAX_COMPS_IN_SCAN];</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  <span class="comment">/* *cur_comp_info[i] describes component that appears i&#39;th in SOS */</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  JDIMENSION MCUs_per_row;  <span class="comment">/* # of MCUs across the image */</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  JDIMENSION MCU_rows_in_scan;  <span class="comment">/* # of MCU rows in the image */</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <span class="keywordtype">int</span> blocks_in_MCU;        <span class="comment">/* # of DCT blocks per MCU */</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <span class="keywordtype">int</span> MCU_membership[C_MAX_BLOCKS_IN_MCU];</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  <span class="comment">/* MCU_membership[i] is index in cur_comp_info of component owning */</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  <span class="comment">/* i&#39;th block in an MCU */</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;  <span class="keywordtype">int</span> Ss, Se, Ah, Al;       <span class="comment">/* progressive JPEG parameters for scan */</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;  <span class="keywordtype">int</span> block_size;       <span class="comment">/* the basic DCT block size: 1..16 */</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">int</span> * natural_order;    <span class="comment">/* natural-order position array */</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  <span class="keywordtype">int</span> lim_Se;           <span class="comment">/* min( Se, DCTSIZE2-1 ) */</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  <span class="comment">/*</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="comment">   * Links to compression subobjects (methods and private variables of modules)</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;  <span class="keyword">struct </span>jpeg_comp_master * master;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  <span class="keyword">struct </span>jpeg_c_main_controller * main;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  <span class="keyword">struct </span>jpeg_c_prep_controller * prep;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  <span class="keyword">struct </span>jpeg_c_coef_controller * coef;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  <span class="keyword">struct </span>jpeg_marker_writer * marker;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  <span class="keyword">struct </span>jpeg_color_converter * cconvert;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  <span class="keyword">struct </span>jpeg_downsampler * downsample;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  <span class="keyword">struct </span>jpeg_forward_dct * fdct;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  <span class="keyword">struct </span>jpeg_entropy_encoder * entropy;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;  <a class="code" href="structjpeg__scan__info.php">jpeg_scan_info</a> * script_space; <span class="comment">/* workspace for jpeg_simple_progression */</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keywordtype">int</span> script_space_size;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;};</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">/* Master record for a decompression instance */</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div>
<div class="line"><a name="l00442"></a><span class="lineno"><a class="code" href="structjpeg__decompress__struct.php">  442</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structjpeg__decompress__struct.php">jpeg_decompress_struct</a> {</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  jpeg_common_fields;       <span class="comment">/* Fields shared with jpeg_compress_struct */</span></div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;  <span class="comment">/* Source of compressed data */</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  <span class="keyword">struct </span><a class="code" href="structjpeg__source__mgr.php">jpeg_source_mgr</a> * src;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  <span class="comment">/* Basic description of image --- filled in by jpeg_read_header(). */</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  <span class="comment">/* Application may inspect these values to decide how to process image. */</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  JDIMENSION image_width;   <span class="comment">/* nominal image width (from SOF marker) */</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  JDIMENSION image_height;  <span class="comment">/* nominal image height */</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  <span class="keywordtype">int</span> num_components;       <span class="comment">/* # of color components in JPEG image */</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;  J_COLOR_SPACE jpeg_color_space; <span class="comment">/* colorspace of JPEG image */</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  <span class="comment">/* Decompression processing parameters --- these fields must be set before</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="comment">   * calling jpeg_start_decompress().  Note that jpeg_read_header() initializes</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="comment">   * them to default values.</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  J_COLOR_SPACE out_color_space; <span class="comment">/* colorspace for output */</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> scale_num, scale_denom; <span class="comment">/* fraction by which to scale image */</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  <span class="keywordtype">double</span> output_gamma;      <span class="comment">/* image gamma wanted in output */</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  <span class="keywordtype">boolean</span> buffered_image;   <span class="comment">/* TRUE=multiple output passes */</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <span class="keywordtype">boolean</span> raw_data_out;     <span class="comment">/* TRUE=downsampled data wanted */</span></div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  J_DCT_METHOD dct_method;  <span class="comment">/* IDCT algorithm selector */</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;  <span class="keywordtype">boolean</span> do_fancy_upsampling;  <span class="comment">/* TRUE=apply fancy upsampling */</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  <span class="keywordtype">boolean</span> do_block_smoothing;   <span class="comment">/* TRUE=apply interblock smoothing */</span></div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  <span class="keywordtype">boolean</span> quantize_colors;  <span class="comment">/* TRUE=colormapped output wanted */</span></div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  <span class="comment">/* the following are ignored if not quantize_colors: */</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;  J_DITHER_MODE dither_mode;    <span class="comment">/* type of color dithering to use */</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  <span class="keywordtype">boolean</span> two_pass_quantize;    <span class="comment">/* TRUE=use two-pass color quantization */</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;  <span class="keywordtype">int</span> desired_number_of_colors; <span class="comment">/* max # colors to use in created colormap */</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  <span class="comment">/* these are significant only in buffered-image mode: */</span></div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  <span class="keywordtype">boolean</span> enable_1pass_quant;   <span class="comment">/* enable future use of 1-pass quantizer */</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;  <span class="keywordtype">boolean</span> enable_external_quant;<span class="comment">/* enable future use of external colormap */</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  <span class="keywordtype">boolean</span> enable_2pass_quant;   <span class="comment">/* enable future use of 2-pass quantizer */</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;  <span class="comment">/* Description of actual output image that will be returned to application.</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="comment">   * These fields are computed by jpeg_start_decompress().</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;<span class="comment">   * You can also use jpeg_calc_output_dimensions() to determine these values</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;<span class="comment">   * in advance of calling jpeg_start_decompress().</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;  JDIMENSION output_width;  <span class="comment">/* scaled image width */</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;  JDIMENSION output_height; <span class="comment">/* scaled image height */</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;  <span class="keywordtype">int</span> out_color_components; <span class="comment">/* # of color components in out_color_space */</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  <span class="keywordtype">int</span> output_components;    <span class="comment">/* # of color components returned */</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;  <span class="comment">/* output_components is 1 (a colormap index) when quantizing colors;</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;<span class="comment">   * otherwise it equals out_color_components.</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;  <span class="keywordtype">int</span> rec_outbuf_height;    <span class="comment">/* min recommended height of scanline buffer */</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  <span class="comment">/* If the buffer passed to jpeg_read_scanlines() is less than this many rows</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="comment">   * high, space and time will be wasted due to unnecessary data copying.</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="comment">   * Usually rec_outbuf_height will be 1 or 2, at most 4.</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;  <span class="comment">/* When quantizing colors, the output colormap is described by these fields.</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="comment">   * The application can supply a colormap by setting colormap non-NULL before</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="comment">   * calling jpeg_start_decompress; otherwise a colormap is created during</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="comment">   * jpeg_start_decompress or jpeg_start_output.</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="comment">   * The map has out_color_components rows and actual_number_of_colors columns.</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;  <span class="keywordtype">int</span> actual_number_of_colors;  <span class="comment">/* number of entries in use */</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;  JSAMPARRAY colormap;      <span class="comment">/* The color map as a 2-D pixel array */</span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;  <span class="comment">/* State variables: these variables indicate the progress of decompression.</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;<span class="comment">   * The application may examine these but must not modify them.</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  <span class="comment">/* Row index of next scanline to be read from jpeg_read_scanlines().</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="comment">   * Application may use this to control its processing loop, e.g.,</span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="comment">   * &quot;while (output_scanline &lt; output_height)&quot;.</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;  JDIMENSION output_scanline;   <span class="comment">/* 0 .. output_height-1  */</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;  <span class="comment">/* Current input scan number and number of iMCU rows completed in scan.</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment">   * These indicate the progress of the decompressor input side.</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  <span class="keywordtype">int</span> input_scan_number;    <span class="comment">/* Number of SOS markers seen so far */</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;  JDIMENSION input_iMCU_row;    <span class="comment">/* Number of iMCU rows completed */</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;  <span class="comment">/* The &quot;output scan number&quot; is the notional scan being displayed by the</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">   * output side.  The decompressor will not allow output scan/row number</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment">   * to get ahead of input scan/row, but it can fall arbitrarily far behind.</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;  <span class="keywordtype">int</span> output_scan_number;   <span class="comment">/* Nominal scan number being displayed */</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;  JDIMENSION output_iMCU_row;   <span class="comment">/* Number of iMCU rows read */</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;  <span class="comment">/* Current progression status.  coef_bits[c][i] indicates the precision</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="comment">   * with which component c&#39;s DCT coefficient i (in zigzag order) is known.</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="comment">   * It is -1 when no data has yet been received, otherwise it is the point</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="comment">   * transform (shift) value for the most recent scan of the coefficient</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="comment">   * (thus, 0 at completion of the progression).</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="comment">   * This pointer is NULL when reading a non-progressive file.</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  int (*coef_bits)[DCTSIZE2];   <span class="comment">/* -1 or current Al value for each coef */</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;  <span class="comment">/* Internal JPEG parameters --- the application usually need not look at</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="comment">   * these fields.  Note that the decompressor output side may not use</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="comment">   * any parameters that can change between scans.</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;  <span class="comment">/* Quantization and Huffman tables are carried forward across input</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="comment">   * datastreams when processing abbreviated JPEG datastreams.</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;  <a class="code" href="structJQUANT__TBL.php">JQUANT_TBL</a> * quant_tbl_ptrs[NUM_QUANT_TBLS];</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;  <span class="comment">/* ptrs to coefficient quantization tables, or NULL if not defined */</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;  <a class="code" href="structJHUFF__TBL.php">JHUFF_TBL</a> * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  <a class="code" href="structJHUFF__TBL.php">JHUFF_TBL</a> * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;  <span class="comment">/* ptrs to Huffman coding tables, or NULL if not defined */</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;  <span class="comment">/* These parameters are never carried across datastreams, since they</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="comment">   * are given in SOF/SOS markers or defined to be reset by SOI.</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  <span class="keywordtype">int</span> data_precision;       <span class="comment">/* bits of precision in image data */</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;  <a class="code" href="structjpeg__component__info.php">jpeg_component_info</a> * comp_info;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  <span class="comment">/* comp_info[i] describes component that appears i&#39;th in SOF */</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  <span class="keywordtype">boolean</span> is_baseline;      <span class="comment">/* TRUE if Baseline SOF0 encountered */</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;  <span class="keywordtype">boolean</span> progressive_mode; <span class="comment">/* TRUE if SOFn specifies progressive mode */</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;  <span class="keywordtype">boolean</span> arith_code;       <span class="comment">/* TRUE=arithmetic coding, FALSE=Huffman */</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;  UINT8 arith_dc_L[NUM_ARITH_TBLS]; <span class="comment">/* L values for DC arith-coding tables */</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  UINT8 arith_dc_U[NUM_ARITH_TBLS]; <span class="comment">/* U values for DC arith-coding tables */</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;  UINT8 arith_ac_K[NUM_ARITH_TBLS]; <span class="comment">/* Kx values for AC arith-coding tables */</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> restart_interval; <span class="comment">/* MCUs per restart interval, or 0 for no restart */</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;  <span class="comment">/* These fields record data obtained from optional markers recognized by</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="comment">   * the JPEG library.</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;  <span class="keywordtype">boolean</span> saw_JFIF_marker;  <span class="comment">/* TRUE iff a JFIF APP0 marker was found */</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;  <span class="comment">/* Data copied from JFIF marker; only valid if saw_JFIF_marker is TRUE: */</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;  UINT8 JFIF_major_version; <span class="comment">/* JFIF version number */</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;  UINT8 JFIF_minor_version;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  UINT8 density_unit;       <span class="comment">/* JFIF code for pixel size units */</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;  UINT16 X_density;     <span class="comment">/* Horizontal pixel density */</span></div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;  UINT16 Y_density;     <span class="comment">/* Vertical pixel density */</span></div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  <span class="keywordtype">boolean</span> saw_Adobe_marker; <span class="comment">/* TRUE iff an Adobe APP14 marker was found */</span></div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;  UINT8 Adobe_transform;    <span class="comment">/* Color transform code from Adobe marker */</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;  <span class="keywordtype">boolean</span> CCIR601_sampling; <span class="comment">/* TRUE=first samples are cosited */</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;  <span class="comment">/* Aside from the specific data retained from APPn markers known to the</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="comment">   * library, the uninterpreted contents of any or all APPn and COM markers</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="comment">   * can be saved in a list for examination by the application.</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;  jpeg_saved_marker_ptr marker_list; <span class="comment">/* Head of list of saved markers */</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;  <span class="comment">/* Remaining fields are known throughout decompressor, but generally</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;<span class="comment">   * should not be touched by a surrounding application.</span></div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;  <span class="comment">/*</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="comment">   * These fields are computed during decompression startup</span></div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;  <span class="keywordtype">int</span> max_h_samp_factor;    <span class="comment">/* largest h_samp_factor */</span></div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;  <span class="keywordtype">int</span> max_v_samp_factor;    <span class="comment">/* largest v_samp_factor */</span></div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;  <span class="keywordtype">int</span> min_DCT_h_scaled_size;    <span class="comment">/* smallest DCT_h_scaled_size of any component */</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;  <span class="keywordtype">int</span> min_DCT_v_scaled_size;    <span class="comment">/* smallest DCT_v_scaled_size of any component */</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;  JDIMENSION total_iMCU_rows;   <span class="comment">/* # of iMCU rows in image */</span></div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;  <span class="comment">/* The coefficient controller&#39;s input and output progress is measured in</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="comment">   * units of &quot;iMCU&quot; (interleaved MCU) rows.  These are the same as MCU rows</span></div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="comment">   * in fully interleaved JPEG scans, but are used whether the scan is</span></div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="comment">   * interleaved or not.  We define an iMCU row as v_samp_factor DCT block</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="comment">   * rows of each component.  Therefore, the IDCT output contains</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;<span class="comment">   * v_samp_factor*DCT_v_scaled_size sample rows of a component per iMCU row.</span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;  JSAMPLE * sample_range_limit; <span class="comment">/* table for fast range-limiting */</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;  <span class="comment">/*</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="comment">   * These fields are valid during any one scan.</span></div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;<span class="comment">   * They describe the components and MCUs actually appearing in the scan.</span></div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="comment">   * Note that the decompressor output side must not use these fields.</span></div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;  <span class="keywordtype">int</span> comps_in_scan;        <span class="comment">/* # of JPEG components in this scan */</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;  <a class="code" href="structjpeg__component__info.php">jpeg_component_info</a> * cur_comp_info[MAX_COMPS_IN_SCAN];</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;  <span class="comment">/* *cur_comp_info[i] describes component that appears i&#39;th in SOS */</span></div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  JDIMENSION MCUs_per_row;  <span class="comment">/* # of MCUs across the image */</span></div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;  JDIMENSION MCU_rows_in_scan;  <span class="comment">/* # of MCU rows in the image */</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  <span class="keywordtype">int</span> blocks_in_MCU;        <span class="comment">/* # of DCT blocks per MCU */</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  <span class="keywordtype">int</span> MCU_membership[D_MAX_BLOCKS_IN_MCU];</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;  <span class="comment">/* MCU_membership[i] is index in cur_comp_info of component owning */</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;  <span class="comment">/* i&#39;th block in an MCU */</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;  <span class="keywordtype">int</span> Ss, Se, Ah, Al;       <span class="comment">/* progressive JPEG parameters for scan */</span></div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  <span class="comment">/* These fields are derived from Se of first SOS marker.</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;  <span class="keywordtype">int</span> block_size;       <span class="comment">/* the basic DCT block size: 1..16 */</span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">int</span> * natural_order; <span class="comment">/* natural-order position array for entropy decode */</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  <span class="keywordtype">int</span> lim_Se;           <span class="comment">/* min( Se, DCTSIZE2-1 ) for entropy decode */</span></div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  <span class="comment">/* This field is shared between entropy decoder and marker parser.</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="comment">   * It is either zero or the code of a JPEG marker that has been</span></div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;<span class="comment">   * read from the data source, but has not yet been processed.</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;  <span class="keywordtype">int</span> unread_marker;</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;  <span class="comment">/*</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="comment">   * Links to decompression subobjects (methods, private variables of modules)</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;  <span class="keyword">struct </span>jpeg_decomp_master * master;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;  <span class="keyword">struct </span>jpeg_d_main_controller * main;</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;  <span class="keyword">struct </span>jpeg_d_coef_controller * coef;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;  <span class="keyword">struct </span>jpeg_d_post_controller * post;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;  <span class="keyword">struct </span>jpeg_input_controller * inputctl;</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;  <span class="keyword">struct </span>jpeg_marker_reader * marker;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  <span class="keyword">struct </span>jpeg_entropy_decoder * entropy;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;  <span class="keyword">struct </span>jpeg_inverse_dct * idct;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;  <span class="keyword">struct </span>jpeg_upsampler * upsample;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;  <span class="keyword">struct </span>jpeg_color_deconverter * cconvert;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;  <span class="keyword">struct </span>jpeg_color_quantizer * cquantize;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;};</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;<span class="comment">/* &quot;Object&quot; declarations for JPEG modules that may be supplied or called</span></div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;<span class="comment"> * directly by the surrounding application.</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="comment"> * As with all objects in the JPEG library, these structs only define the</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="comment"> * publicly visible methods and state variables of a module.  Additional</span></div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;<span class="comment"> * private fields may exist after the public ones.</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;<span class="comment">/* Error handler object */</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div>
<div class="line"><a name="l00682"></a><span class="lineno"><a class="code" href="structjpeg__error__mgr.php">  682</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structjpeg__error__mgr.php">jpeg_error_mgr</a> {</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;  <span class="comment">/* Error exit handler: does not return to caller */</span></div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, error_exit, (j_common_ptr cinfo));</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;  <span class="comment">/* Conditionally emit a trace or warning message */</span></div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, emit_message, (j_common_ptr cinfo, <span class="keywordtype">int</span> msg_level));</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;  <span class="comment">/* Routine that actually outputs a trace or error message */</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, output_message, (j_common_ptr cinfo));</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  <span class="comment">/* Format a message string for the most recent JPEG error or message */</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, format_message, (j_common_ptr cinfo, <span class="keywordtype">char</span> * buffer));</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="preprocessor">#define JMSG_LENGTH_MAX  200    </span><span class="comment">/* recommended size of format_message buffer */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="preprocessor"></span>  <span class="comment">/* Reset error state variables at start of a new image */</span></div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, reset_error_mgr, (j_common_ptr cinfo));</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;  </div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;  <span class="comment">/* The message ID code and any parameters are saved here.</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="comment">   * A message can have one string parameter or up to 8 int parameters.</span></div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;  <span class="keywordtype">int</span> msg_code;</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="preprocessor">#define JMSG_STR_PARM_MAX  80</span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;<span class="preprocessor"></span>  <span class="keyword">union </span>{</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keywordtype">int</span> i[8];</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keywordtype">char</span> s[JMSG_STR_PARM_MAX];</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;  } msg_parm;</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;  </div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;  <span class="comment">/* Standard state variables for error facility */</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;  </div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;  <span class="keywordtype">int</span> trace_level;      <span class="comment">/* max msg_level that will be displayed */</span></div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;  </div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;  <span class="comment">/* For recoverable corrupt-data errors, we emit a warning message,</span></div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="comment">   * but keep going unless emit_message chooses to abort.  emit_message</span></div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="comment">   * should count warnings in num_warnings.  The surrounding application</span></div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;<span class="comment">   * can check for bad data by seeing if num_warnings is nonzero at the</span></div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;<span class="comment">   * end of processing.</span></div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;  <span class="keywordtype">long</span> num_warnings;        <span class="comment">/* number of corrupt-data warnings */</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;  <span class="comment">/* These fields point to the table(s) of error message strings.</span></div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;<span class="comment">   * An application can change the table pointer to switch to a different</span></div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="comment">   * message list (typically, to change the language in which errors are</span></div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="comment">   * reported).  Some applications may wish to add additional error codes</span></div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;<span class="comment">   * that will be handled by the JPEG library error mechanism; the second</span></div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;<span class="comment">   * table pointer is used for this purpose.</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="comment">   *</span></div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;<span class="comment">   * First table includes all errors generated by JPEG library itself.</span></div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="comment">   * Error code 0 is reserved for a &quot;no such error string&quot; message.</span></div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> * jpeg_message_table; <span class="comment">/* Library errors */</span></div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;  <span class="keywordtype">int</span> last_jpeg_message;    <span class="comment">/* Table contains strings 0..last_jpeg_message */</span></div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;  <span class="comment">/* Second table can be added by application (see cjpeg/djpeg for example).</span></div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;<span class="comment">   * It contains strings numbered first_addon_message..last_addon_message.</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> * addon_message_table; <span class="comment">/* Non-library errors */</span></div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;  <span class="keywordtype">int</span> first_addon_message;  <span class="comment">/* code for first string in addon table */</span></div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;  <span class="keywordtype">int</span> last_addon_message;   <span class="comment">/* code for last string in addon table */</span></div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;};</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;<span class="comment">/* Progress monitor object */</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;</div>
<div class="line"><a name="l00740"></a><span class="lineno"><a class="code" href="structjpeg__progress__mgr.php">  740</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structjpeg__progress__mgr.php">jpeg_progress_mgr</a> {</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, progress_monitor, (j_common_ptr cinfo));</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;  <span class="keywordtype">long</span> pass_counter;        <span class="comment">/* work units completed in this pass */</span></div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;  <span class="keywordtype">long</span> pass_limit;      <span class="comment">/* total number of work units in this pass */</span></div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;  <span class="keywordtype">int</span> completed_passes;     <span class="comment">/* passes completed so far */</span></div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;  <span class="keywordtype">int</span> total_passes;     <span class="comment">/* total number of passes expected */</span></div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;};</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;<span class="comment">/* Data destination object for compression */</span></div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;</div>
<div class="line"><a name="l00752"></a><span class="lineno"><a class="code" href="structjpeg__destination__mgr.php">  752</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structjpeg__destination__mgr.php">jpeg_destination_mgr</a> {</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;  JOCTET * next_output_byte;    <span class="comment">/* =&gt; next byte to write in buffer */</span></div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;  <span class="keywordtype">size_t</span> free_in_buffer;    <span class="comment">/* # of byte spaces remaining in buffer */</span></div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, init_destination, (j_compress_ptr cinfo));</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;  JMETHOD(<span class="keywordtype">boolean</span>, empty_output_buffer, (j_compress_ptr cinfo));</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, term_destination, (j_compress_ptr cinfo));</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;};</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="comment">/* Data source object for decompression */</span></div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;</div>
<div class="line"><a name="l00764"></a><span class="lineno"><a class="code" href="structjpeg__source__mgr.php">  764</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structjpeg__source__mgr.php">jpeg_source_mgr</a> {</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;  <span class="keyword">const</span> JOCTET * next_input_byte; <span class="comment">/* =&gt; next byte to read from buffer */</span></div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;  <span class="keywordtype">size_t</span> bytes_in_buffer;   <span class="comment">/* # of bytes remaining in buffer */</span></div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, init_source, (j_decompress_ptr cinfo));</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;  JMETHOD(<span class="keywordtype">boolean</span>, fill_input_buffer, (j_decompress_ptr cinfo));</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, skip_input_data, (j_decompress_ptr cinfo, <span class="keywordtype">long</span> num_bytes));</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;  JMETHOD(<span class="keywordtype">boolean</span>, resync_to_restart, (j_decompress_ptr cinfo, <span class="keywordtype">int</span> desired));</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, term_source, (j_decompress_ptr cinfo));</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;};</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="comment">/* Memory manager object.</span></div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="comment"> * Allocates &quot;small&quot; objects (a few K total), &quot;large&quot; objects (tens of K),</span></div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="comment"> * and &quot;really big&quot; objects (virtual arrays with backing store if needed).</span></div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment"> * The memory manager does not allow individual objects to be freed; rather,</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="comment"> * each created object is assigned to a pool, and whole pools can be freed</span></div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="comment"> * at once.  This is faster and more convenient than remembering exactly what</span></div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="comment"> * to free, especially where malloc()/free() are not too speedy.</span></div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="comment"> * NB: alloc routines never return NULL.  They exit to error_exit if not</span></div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="comment"> * successful.</span></div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="preprocessor">#define JPOOL_PERMANENT 0   </span><span class="comment">/* lasts until master record is destroyed */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPOOL_IMAGE 1   </span><span class="comment">/* lasts until done with image/datastream */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPOOL_NUMPOOLS  2</span></div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>jvirt_sarray_control * jvirt_sarray_ptr;</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>jvirt_barray_control * jvirt_barray_ptr;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div>
<div class="line"><a name="l00795"></a><span class="lineno"><a class="code" href="structjpeg__memory__mgr.php">  795</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structjpeg__memory__mgr.php">jpeg_memory_mgr</a> {</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;  <span class="comment">/* Method pointers */</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;  JMETHOD(<span class="keywordtype">void</span> *, alloc_small, (j_common_ptr cinfo, <span class="keywordtype">int</span> pool_id,</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;                <span class="keywordtype">size_t</span> sizeofobject));</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;  JMETHOD(<span class="keywordtype">void</span> FAR *, alloc_large, (j_common_ptr cinfo, <span class="keywordtype">int</span> pool_id,</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;                     <span class="keywordtype">size_t</span> sizeofobject));</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;  JMETHOD(JSAMPARRAY, alloc_sarray, (j_common_ptr cinfo, <span class="keywordtype">int</span> pool_id,</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                     JDIMENSION samplesperrow,</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                     JDIMENSION numrows));</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;  JMETHOD(JBLOCKARRAY, alloc_barray, (j_common_ptr cinfo, <span class="keywordtype">int</span> pool_id,</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;                      JDIMENSION blocksperrow,</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;                      JDIMENSION numrows));</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;  JMETHOD(jvirt_sarray_ptr, request_virt_sarray, (j_common_ptr cinfo,</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;                          <span class="keywordtype">int</span> pool_id,</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                          <span class="keywordtype">boolean</span> pre_zero,</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                          JDIMENSION samplesperrow,</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                          JDIMENSION numrows,</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                          JDIMENSION maxaccess));</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;  JMETHOD(jvirt_barray_ptr, request_virt_barray, (j_common_ptr cinfo,</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;                          <span class="keywordtype">int</span> pool_id,</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;                          <span class="keywordtype">boolean</span> pre_zero,</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;                          JDIMENSION blocksperrow,</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                          JDIMENSION numrows,</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;                          JDIMENSION maxaccess));</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, realize_virt_arrays, (j_common_ptr cinfo));</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;  JMETHOD(JSAMPARRAY, access_virt_sarray, (j_common_ptr cinfo,</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;                       jvirt_sarray_ptr ptr,</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;                       JDIMENSION start_row,</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;                       JDIMENSION num_rows,</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;                       <span class="keywordtype">boolean</span> writable));</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;  JMETHOD(JBLOCKARRAY, access_virt_barray, (j_common_ptr cinfo,</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;                        jvirt_barray_ptr ptr,</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;                        JDIMENSION start_row,</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;                        JDIMENSION num_rows,</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                        <span class="keywordtype">boolean</span> writable));</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, free_pool, (j_common_ptr cinfo, <span class="keywordtype">int</span> pool_id));</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;  JMETHOD(<span class="keywordtype">void</span>, self_destruct, (j_common_ptr cinfo));</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;  <span class="comment">/* Limit on memory allocation for this JPEG object.  (Note that this is</span></div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;<span class="comment">   * merely advisory, not a guaranteed maximum; it only affects the space</span></div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;<span class="comment">   * used for virtual-array buffers.)  May be changed by outer application</span></div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;<span class="comment">   * after creating the JPEG object.</span></div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;  <span class="keywordtype">long</span> max_memory_to_use;</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;  <span class="comment">/* Maximum allocation request accepted by alloc_large. */</span></div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;  <span class="keywordtype">long</span> max_alloc_chunk;</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;};</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;<span class="comment">/* Routine signature for application-supplied marker processing methods.</span></div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment"> * Need not pass marker code since it is stored in cinfo-&gt;unread_marker.</span></div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="keyword">typedef</span> JMETHOD(<span class="keywordtype">boolean</span>, jpeg_marker_parser_method, (j_decompress_ptr cinfo));</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment">/* Declarations for routines called by application.</span></div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="comment"> * The JPP macro hides prototype parameters from compilers that can&#39;t cope.</span></div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;<span class="comment"> * Note JPP requires double parentheses.</span></div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="preprocessor">#ifdef HAVE_PROTOTYPES</span></div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPP(arglist)    arglist</span></div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPP(arglist)    ()</span></div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="comment">/* Short forms of external names for systems with brain-damaged linkers.</span></div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;<span class="comment"> * We shorten external names to be unique in the first six letters, which</span></div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;<span class="comment"> * is good enough for all known systems.</span></div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;<span class="comment"> * (If your compiler itself needs names to be unique in less than 15 </span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment"> * characters, you are out of luck.  Get a better compiler.)</span></div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;<span class="preprocessor">#ifdef NEED_SHORT_EXTERNAL_NAMES</span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_std_error      jStdError</span></div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_CreateCompress jCreaCompress</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_CreateDecompress   jCreaDecompress</span></div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_destroy_compress   jDestCompress</span></div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_destroy_decompress jDestDecompress</span></div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_stdio_dest     jStdDest</span></div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_stdio_src      jStdSrc</span></div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_mem_dest       jMemDest</span></div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_mem_src        jMemSrc</span></div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_set_defaults   jSetDefaults</span></div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_set_colorspace jSetColorspace</span></div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_default_colorspace jDefColorspace</span></div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_set_quality    jSetQuality</span></div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_set_linear_quality jSetLQuality</span></div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_default_qtables    jDefQTables</span></div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_add_quant_table    jAddQuantTable</span></div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_quality_scaling    jQualityScaling</span></div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_simple_progression jSimProgress</span></div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_suppress_tables    jSuppressTables</span></div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_alloc_quant_table  jAlcQTable</span></div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_alloc_huff_table   jAlcHTable</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_start_compress jStrtCompress</span></div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_write_scanlines    jWrtScanlines</span></div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_finish_compress    jFinCompress</span></div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_calc_jpeg_dimensions   jCjpegDimensions</span></div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_write_raw_data jWrtRawData</span></div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_write_marker   jWrtMarker</span></div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_write_m_header jWrtMHeader</span></div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_write_m_byte   jWrtMByte</span></div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_write_tables   jWrtTables</span></div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_read_header    jReadHeader</span></div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_start_decompress   jStrtDecompress</span></div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_read_scanlines jReadScanlines</span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_finish_decompress  jFinDecompress</span></div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_read_raw_data  jReadRawData</span></div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_has_multiple_scans jHasMultScn</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_start_output   jStrtOutput</span></div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_finish_output  jFinOutput</span></div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_input_complete jInComplete</span></div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_new_colormap   jNewCMap</span></div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_consume_input  jConsumeInput</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_core_output_dimensions jCoreDimensions</span></div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_calc_output_dimensions jCalcDimensions</span></div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_save_markers   jSaveMarkers</span></div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_set_marker_processor   jSetMarker</span></div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_read_coefficients  jReadCoefs</span></div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_write_coefficients jWrtCoefs</span></div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_copy_critical_parameters   jCopyCrit</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_abort_compress jAbrtCompress</span></div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_abort_decompress   jAbrtDecompress</span></div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_abort      jAbort</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_destroy        jDestroy</span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_resync_to_restart  jResyncRestart</span></div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* NEED_SHORT_EXTERNAL_NAMES */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment">/* Default error-management setup */</span></div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;EXTERN(<span class="keyword">struct</span> <a class="code" href="structjpeg__error__mgr.php">jpeg_error_mgr</a> *) jpeg_std_error</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    JPP((struct <a class="code" href="structjpeg__error__mgr.php">jpeg_error_mgr</a> * <a class="code" href="group__system.php#ga7fe7f475639e26334606b5142c29551f" title="Standard stream used by SFML to output warnings and errors.">err</a>));</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">/* Initialization of JPEG compression objects.</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="comment"> * jpeg_create_compress() and jpeg_create_decompress() are the exported</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="comment"> * names that applications should call.  These expand to calls on</span></div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="comment"> * jpeg_CreateCompress and jpeg_CreateDecompress with additional information</span></div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="comment"> * passed for version mismatch checking.</span></div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="comment"> * NB: you must set up the error-manager BEFORE calling jpeg_create_xxx.</span></div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="preprocessor">#define jpeg_create_compress(cinfo) \</span></div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="preprocessor">    jpeg_CreateCompress((cinfo), JPEG_LIB_VERSION, \</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="preprocessor">            (size_t) sizeof(struct jpeg_compress_struct))</span></div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define jpeg_create_decompress(cinfo) \</span></div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="preprocessor">    jpeg_CreateDecompress((cinfo), JPEG_LIB_VERSION, \</span></div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="preprocessor">              (size_t) sizeof(struct jpeg_decompress_struct))</span></div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="preprocessor"></span>EXTERN(<span class="keywordtype">void</span>) jpeg_CreateCompress JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;                      <span class="keywordtype">int</span> version, <span class="keywordtype">size_t</span> structsize));</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_CreateDecompress JPP((j_decompress_ptr cinfo,</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                    <span class="keywordtype">int</span> version, <span class="keywordtype">size_t</span> structsize));</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="comment">/* Destruction of JPEG compression objects */</span></div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_destroy_compress JPP((j_compress_ptr cinfo));</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_destroy_decompress JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="comment">/* Standard data source and destination managers: stdio streams. */</span></div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="comment">/* Caller is responsible for opening the file before and closing after. */</span></div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_stdio_dest JPP((j_compress_ptr cinfo, FILE * outfile));</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_stdio_src JPP((j_decompress_ptr cinfo, FILE * infile));</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="comment">/* Data source and destination managers: memory buffers. */</span></div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_mem_dest JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;                   <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> ** outbuffer,</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> * outsize));</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_mem_src JPP((j_decompress_ptr cinfo,</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                  <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> * inbuffer,</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                  <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> insize));</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;<span class="comment">/* Default parameter setup for compression */</span></div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_set_defaults JPP((j_compress_ptr cinfo));</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;<span class="comment">/* Compression parameter setup aids */</span></div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_set_colorspace JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                      J_COLOR_SPACE colorspace));</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_default_colorspace JPP((j_compress_ptr cinfo));</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_set_quality JPP((j_compress_ptr cinfo, <span class="keywordtype">int</span> quality,</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                   <span class="keywordtype">boolean</span> force_baseline));</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_set_linear_quality JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                      <span class="keywordtype">int</span> scale_factor,</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;                      <span class="keywordtype">boolean</span> force_baseline));</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_default_qtables JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;                       <span class="keywordtype">boolean</span> force_baseline));</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_add_quant_table JPP((j_compress_ptr cinfo, <span class="keywordtype">int</span> which_tbl,</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                       const <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *basic_table,</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                       <span class="keywordtype">int</span> scale_factor,</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                       <span class="keywordtype">boolean</span> force_baseline));</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;EXTERN(<span class="keywordtype">int</span>) jpeg_quality_scaling JPP((<span class="keywordtype">int</span> quality));</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_simple_progression JPP((j_compress_ptr cinfo));</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_suppress_tables JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                       <span class="keywordtype">boolean</span> suppress));</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;EXTERN(<a class="code" href="structJQUANT__TBL.php">JQUANT_TBL</a> *) jpeg_alloc_quant_table JPP((j_common_ptr cinfo));</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;EXTERN(<a class="code" href="structJHUFF__TBL.php">JHUFF_TBL</a> *) jpeg_alloc_huff_table JPP((j_common_ptr cinfo));</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="comment">/* Main entry points for compression */</span></div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_start_compress JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                      <span class="keywordtype">boolean</span> write_all_tables));</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;EXTERN(JDIMENSION) jpeg_write_scanlines JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                         JSAMPARRAY scanlines,</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                         JDIMENSION num_lines));</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_finish_compress JPP((j_compress_ptr cinfo));</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="comment">/* Precalculate JPEG dimensions for current compression parameters. */</span></div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_calc_jpeg_dimensions JPP((j_compress_ptr cinfo));</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;<span class="comment">/* Replaces jpeg_write_scanlines when writing raw downsampled data. */</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;EXTERN(JDIMENSION) jpeg_write_raw_data JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                        JSAMPIMAGE data,</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;                        JDIMENSION num_lines));</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;<span class="comment">/* Write a special marker.  See libjpeg.txt concerning safe usage. */</span></div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_write_marker</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    JPP((j_compress_ptr cinfo, <span class="keywordtype">int</span> marker,</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;         const JOCTET * dataptr, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> datalen));</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;<span class="comment">/* Same, but piecemeal. */</span></div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_write_m_header</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    JPP((j_compress_ptr cinfo, <span class="keywordtype">int</span> marker, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> datalen));</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_write_m_byte</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;    JPP((j_compress_ptr cinfo, <span class="keywordtype">int</span> val));</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;<span class="comment">/* Alternate compression function: just write an abbreviated table file */</span></div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_write_tables JPP((j_compress_ptr cinfo));</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;<span class="comment">/* Decompression startup: read start of JPEG datastream to see what&#39;s there */</span></div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;EXTERN(<span class="keywordtype">int</span>) jpeg_read_header JPP((j_decompress_ptr cinfo,</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                  <span class="keywordtype">boolean</span> require_image));</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="comment">/* Return value is one of: */</span></div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;<span class="preprocessor">#define JPEG_SUSPENDED      0 </span><span class="comment">/* Suspended due to lack of input data */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_HEADER_OK      1 </span><span class="comment">/* Found valid image datastream */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_HEADER_TABLES_ONLY 2 </span><span class="comment">/* Found valid table-specs-only datastream */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;<span class="preprocessor"></span><span class="comment">/* If you pass require_image = TRUE (normal case), you need not check for</span></div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;<span class="comment"> * a TABLES_ONLY return code; an abbreviated file will cause an error exit.</span></div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;<span class="comment"> * JPEG_SUSPENDED is only possible if you use a data source module that can</span></div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;<span class="comment"> * give a suspension return (the stdio source module doesn&#39;t).</span></div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="comment">/* Main entry points for decompression */</span></div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;EXTERN(<span class="keywordtype">boolean</span>) jpeg_start_decompress JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;EXTERN(JDIMENSION) jpeg_read_scanlines JPP((j_decompress_ptr cinfo,</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;                        JSAMPARRAY scanlines,</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                        JDIMENSION max_lines));</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;EXTERN(<span class="keywordtype">boolean</span>) jpeg_finish_decompress JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="comment">/* Replaces jpeg_read_scanlines when reading raw downsampled data. */</span></div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;EXTERN(JDIMENSION) jpeg_read_raw_data JPP((j_decompress_ptr cinfo,</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;                       JSAMPIMAGE data,</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;                       JDIMENSION max_lines));</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;<span class="comment">/* Additional entry points for buffered-image mode. */</span></div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;EXTERN(<span class="keywordtype">boolean</span>) jpeg_has_multiple_scans JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;EXTERN(<span class="keywordtype">boolean</span>) jpeg_start_output JPP((j_decompress_ptr cinfo,</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                       <span class="keywordtype">int</span> scan_number));</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;EXTERN(<span class="keywordtype">boolean</span>) jpeg_finish_output JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;EXTERN(<span class="keywordtype">boolean</span>) jpeg_input_complete JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_new_colormap JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;EXTERN(<span class="keywordtype">int</span>) jpeg_consume_input JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;<span class="comment">/* Return value is one of: */</span></div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;<span class="comment">/* #define JPEG_SUSPENDED   0    Suspended due to lack of input data */</span></div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="preprocessor">#define JPEG_REACHED_SOS    1 </span><span class="comment">/* Reached start of new scan */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_REACHED_EOI    2 </span><span class="comment">/* Reached end of image */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_ROW_COMPLETED  3 </span><span class="comment">/* Completed one iMCU row */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_SCAN_COMPLETED 4 </span><span class="comment">/* Completed last iMCU row of a scan */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;<span class="comment">/* Precalculate output dimensions for current decompression parameters. */</span></div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_core_output_dimensions JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_calc_output_dimensions JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="comment">/* Control saving of COM and APPn markers into marker_list. */</span></div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_save_markers</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    JPP((j_decompress_ptr cinfo, <span class="keywordtype">int</span> marker_code,</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> length_limit));</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;<span class="comment">/* Install a special processing method for COM or APPn markers. */</span></div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_set_marker_processor</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    JPP((j_decompress_ptr cinfo, <span class="keywordtype">int</span> marker_code,</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;         jpeg_marker_parser_method routine));</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="comment">/* Read or write raw DCT coefficients --- useful for lossless transcoding. */</span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;EXTERN(jvirt_barray_ptr *) jpeg_read_coefficients JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_write_coefficients JPP((j_compress_ptr cinfo,</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                      jvirt_barray_ptr * coef_arrays));</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_copy_critical_parameters JPP((j_decompress_ptr srcinfo,</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                        j_compress_ptr dstinfo));</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="comment">/* If you choose to abort compression or decompression before completing</span></div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="comment"> * jpeg_finish_(de)compress, then you need to clean up to release memory,</span></div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="comment"> * temporary files, etc.  You can just call jpeg_destroy_(de)compress</span></div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="comment"> * if you&#39;re done with the JPEG object, but if you want to clean it up and</span></div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="comment"> * reuse it, call this:</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_abort_compress JPP((j_compress_ptr cinfo));</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_abort_decompress JPP((j_decompress_ptr cinfo));</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="comment">/* Generic versions of jpeg_abort and jpeg_destroy that work on either</span></div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="comment"> * flavor of JPEG object.  These may be more convenient in some places.</span></div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_abort JPP((j_common_ptr cinfo));</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;EXTERN(<span class="keywordtype">void</span>) jpeg_destroy JPP((j_common_ptr cinfo));</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;<span class="comment">/* Default restart-marker-resync procedure for use by data source modules */</span></div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;EXTERN(<span class="keywordtype">boolean</span>) jpeg_resync_to_restart JPP((j_decompress_ptr cinfo,</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                        <span class="keywordtype">int</span> desired));</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;<span class="comment">/* These marker codes are exported since applications and data source modules</span></div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;<span class="comment"> * are likely to want to use them.</span></div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;<span class="preprocessor">#define JPEG_RST0   0xD0    </span><span class="comment">/* RST0 marker code */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_EOI    0xD9    </span><span class="comment">/* EOI marker code */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_APP0   0xE0    </span><span class="comment">/* APP0 marker code */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define JPEG_COM    0xFE    </span><span class="comment">/* COM marker code */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="comment">/* If we have a brain-damaged compiler that emits warnings (or worse, errors)</span></div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="comment"> * for structure definitions that are never filled in, keep it quiet by</span></div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;<span class="comment"> * supplying dummy definitions for the various substructures.</span></div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;<span class="preprocessor">#ifdef INCOMPLETE_TYPES_BROKEN</span></div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifndef JPEG_INTERNALS      </span><span class="comment">/* will be defined in jpegint.h */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="preprocessor"></span><span class="keyword">struct </span>jvirt_sarray_control { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="keyword">struct </span>jvirt_barray_control { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="keyword">struct </span>jpeg_comp_master { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;<span class="keyword">struct </span>jpeg_c_main_controller { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;<span class="keyword">struct </span>jpeg_c_prep_controller { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;<span class="keyword">struct </span>jpeg_c_coef_controller { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;<span class="keyword">struct </span>jpeg_marker_writer { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;<span class="keyword">struct </span>jpeg_color_converter { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;<span class="keyword">struct </span>jpeg_downsampler { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;<span class="keyword">struct </span>jpeg_forward_dct { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;<span class="keyword">struct </span>jpeg_entropy_encoder { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;<span class="keyword">struct </span>jpeg_decomp_master { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;<span class="keyword">struct </span>jpeg_d_main_controller { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;<span class="keyword">struct </span>jpeg_d_coef_controller { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;<span class="keyword">struct </span>jpeg_d_post_controller { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;<span class="keyword">struct </span>jpeg_input_controller { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;<span class="keyword">struct </span>jpeg_marker_reader { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;<span class="keyword">struct </span>jpeg_entropy_decoder { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;<span class="keyword">struct </span>jpeg_inverse_dct { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;<span class="keyword">struct </span>jpeg_upsampler { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;<span class="keyword">struct </span>jpeg_color_deconverter { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;<span class="keyword">struct </span>jpeg_color_quantizer { <span class="keywordtype">long</span> dummy; };</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* JPEG_INTERNALS */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif </span><span class="comment">/* INCOMPLETE_TYPES_BROKEN */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;<span class="comment"> * The JPEG library modules define JPEG_INTERNALS before including this file.</span></div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="comment"> * The internal structure declarations are read only when that is true.</span></div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;<span class="comment"> * Applications using the library should not include jpegint.h, but may wish</span></div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<span class="comment"> * to include jerror.h.</span></div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="preprocessor">#ifdef JPEG_INTERNALS</span></div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;jpegint.h&quot;</span>        <span class="comment">/* fetch private declarations */</span></div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="preprocessor">#include &quot;jerror.h&quot;</span>     <span class="comment">/* fetch error codes too */</span></div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;<span class="preprocessor">#ifdef __cplusplus</span></div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifndef DONT_USE_EXTERN_C</span></div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* JPEGLIB_H */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
<?php
    require("../footer.php");
?>
