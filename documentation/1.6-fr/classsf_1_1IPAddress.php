<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::IPAddress Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header-fr.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1IPAddress.php">IPAddress</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="classsf_1_1IPAddress-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::IPAddress Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classsf_1_1IPAddress.php" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> provides easy manipulation of IP v4 addresses.  
 <a href="classsf_1_1IPAddress.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="IPAddress_8hpp_source.php">IPAddress.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad0d6a00a3fd597aab4b86f2bc5a85831"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#ad0d6a00a3fd597aab4b86f2bc5a85831">IPAddress</a> ()</td></tr>
<tr class="memdesc:ad0d6a00a3fd597aab4b86f2bc5a85831"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor &ndash; constructs an invalid address.  <a href="#ad0d6a00a3fd597aab4b86f2bc5a85831"></a><br/></td></tr>
<tr class="separator:ad0d6a00a3fd597aab4b86f2bc5a85831"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf8d2e87ea8076b627c3e7254b5e4039"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#adf8d2e87ea8076b627c3e7254b5e4039">IPAddress</a> (const std::string &amp;Address)</td></tr>
<tr class="memdesc:adf8d2e87ea8076b627c3e7254b5e4039"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the address from a string.  <a href="#adf8d2e87ea8076b627c3e7254b5e4039"></a><br/></td></tr>
<tr class="separator:adf8d2e87ea8076b627c3e7254b5e4039"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00c1b422265e1261509d5030534bfb0f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a00c1b422265e1261509d5030534bfb0f">IPAddress</a> (const char *Address)</td></tr>
<tr class="memdesc:a00c1b422265e1261509d5030534bfb0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the address from a C-style string ; Needed for implicit conversions from literal strings to <a class="el" href="classsf_1_1IPAddress.php" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> to work.  <a href="#a00c1b422265e1261509d5030534bfb0f"></a><br/></td></tr>
<tr class="separator:a00c1b422265e1261509d5030534bfb0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16fa44fa881e32a03b67006d90db0c39"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a16fa44fa881e32a03b67006d90db0c39">IPAddress</a> (Uint8 Byte0, Uint8 Byte1, Uint8 Byte2, Uint8 Byte3)</td></tr>
<tr class="memdesc:a16fa44fa881e32a03b67006d90db0c39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the address from 4 bytes.  <a href="#a16fa44fa881e32a03b67006d90db0c39"></a><br/></td></tr>
<tr class="separator:a16fa44fa881e32a03b67006d90db0c39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad692d581e4b96ae3377e95947abb7565"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#ad692d581e4b96ae3377e95947abb7565">IPAddress</a> (Uint32 Address)</td></tr>
<tr class="memdesc:ad692d581e4b96ae3377e95947abb7565"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the address from a 32-bits integer.  <a href="#ad692d581e4b96ae3377e95947abb7565"></a><br/></td></tr>
<tr class="separator:ad692d581e4b96ae3377e95947abb7565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a943e91f407afa5d9ae9b988492385697"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a943e91f407afa5d9ae9b988492385697">IsValid</a> () const </td></tr>
<tr class="memdesc:a943e91f407afa5d9ae9b988492385697"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell if the address is a valid one.  <a href="#a943e91f407afa5d9ae9b988492385697"></a><br/></td></tr>
<tr class="separator:a943e91f407afa5d9ae9b988492385697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76eadca85be545b5c1c68a4d0dc1c643"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a76eadca85be545b5c1c68a4d0dc1c643">ToString</a> () const </td></tr>
<tr class="memdesc:a76eadca85be545b5c1c68a4d0dc1c643"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a string representation of the address.  <a href="#a76eadca85be545b5c1c68a4d0dc1c643"></a><br/></td></tr>
<tr class="separator:a76eadca85be545b5c1c68a4d0dc1c643"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec6999cce584d3b275072cb6da839c3c"><td class="memItemLeft" align="right" valign="top">Uint32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#aec6999cce584d3b275072cb6da839c3c">ToInteger</a> () const </td></tr>
<tr class="memdesc:aec6999cce584d3b275072cb6da839c3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get an integer representation of the address.  <a href="#aec6999cce584d3b275072cb6da839c3c"></a><br/></td></tr>
<tr class="separator:aec6999cce584d3b275072cb6da839c3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a326dc00d3ab26ada6ed3168460545b48"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a326dc00d3ab26ada6ed3168460545b48">operator==</a> (const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Other) const </td></tr>
<tr class="memdesc:a326dc00d3ab26ada6ed3168460545b48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator ==.  <a href="#a326dc00d3ab26ada6ed3168460545b48"></a><br/></td></tr>
<tr class="separator:a326dc00d3ab26ada6ed3168460545b48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcab830aa4008d469c235582d90ae104"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#adcab830aa4008d469c235582d90ae104">operator!=</a> (const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Other) const </td></tr>
<tr class="memdesc:adcab830aa4008d469c235582d90ae104"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator !=.  <a href="#adcab830aa4008d469c235582d90ae104"></a><br/></td></tr>
<tr class="separator:adcab830aa4008d469c235582d90ae104"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90ca315772725588df2a5fe73565cb3e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a90ca315772725588df2a5fe73565cb3e">operator&lt;</a> (const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Other) const </td></tr>
<tr class="memdesc:a90ca315772725588df2a5fe73565cb3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator &lt;.  <a href="#a90ca315772725588df2a5fe73565cb3e"></a><br/></td></tr>
<tr class="separator:a90ca315772725588df2a5fe73565cb3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cd4ab449515009f0d1ab0cd41ddbab0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a6cd4ab449515009f0d1ab0cd41ddbab0">operator&gt;</a> (const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Other) const </td></tr>
<tr class="memdesc:a6cd4ab449515009f0d1ab0cd41ddbab0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator &gt;  <a href="#a6cd4ab449515009f0d1ab0cd41ddbab0"></a><br/></td></tr>
<tr class="separator:a6cd4ab449515009f0d1ab0cd41ddbab0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9159e1fbdfffb81b45ac2518143c2be"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#ad9159e1fbdfffb81b45ac2518143c2be">operator&lt;=</a> (const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Other) const </td></tr>
<tr class="memdesc:ad9159e1fbdfffb81b45ac2518143c2be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator &lt;=.  <a href="#ad9159e1fbdfffb81b45ac2518143c2be"></a><br/></td></tr>
<tr class="separator:ad9159e1fbdfffb81b45ac2518143c2be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b0f3e471d2286737023d80220a1313b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a7b0f3e471d2286737023d80220a1313b">operator&gt;=</a> (const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Other) const </td></tr>
<tr class="memdesc:a7b0f3e471d2286737023d80220a1313b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator &gt;=.  <a href="#a7b0f3e471d2286737023d80220a1313b"></a><br/></td></tr>
<tr class="separator:a7b0f3e471d2286737023d80220a1313b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a19de85dde974ff66e0b0255cce5eedac"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a19de85dde974ff66e0b0255cce5eedac">GetLocalAddress</a> ()</td></tr>
<tr class="memdesc:a19de85dde974ff66e0b0255cce5eedac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the computer's local IP address (from the LAN point of view)  <a href="#a19de85dde974ff66e0b0255cce5eedac"></a><br/></td></tr>
<tr class="separator:a19de85dde974ff66e0b0255cce5eedac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad0feeaf81c7a15166a003773faa1ba6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#aad0feeaf81c7a15166a003773faa1ba6">GetPublicAddress</a> (float Timeout=0.f)</td></tr>
<tr class="memdesc:aad0feeaf81c7a15166a003773faa1ba6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the computer's public IP address (from the web point of view).  <a href="#aad0feeaf81c7a15166a003773faa1ba6"></a><br/></td></tr>
<tr class="separator:aad0feeaf81c7a15166a003773faa1ba6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a3529ec93755712b038fe6b1456c4f7e0"><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1IPAddress.php#a3529ec93755712b038fe6b1456c4f7e0">LocalHost</a></td></tr>
<tr class="memdesc:a3529ec93755712b038fe6b1456c4f7e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Local host address (to connect to the same computer)  <a href="#a3529ec93755712b038fe6b1456c4f7e0"></a><br/></td></tr>
<tr class="separator:a3529ec93755712b038fe6b1456c4f7e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classsf_1_1IPAddress.php" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> provides easy manipulation of IP v4 addresses. </p>

<p>Definition at line <a class="el" href="IPAddress_8hpp_source.php#l00042">42</a> of file <a class="el" href="IPAddress_8hpp_source.php">IPAddress.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad0d6a00a3fd597aab4b86f2bc5a85831"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor &ndash; constructs an invalid address. </p>

</div>
</div>
<a class="anchor" id="adf8d2e87ea8076b627c3e7254b5e4039"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>Address</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the address from a string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Address</td><td>: IP address ("xxx.xxx.xxx.xxx") or network name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a00c1b422265e1261509d5030534bfb0f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>Address</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the address from a C-style string ; Needed for implicit conversions from literal strings to <a class="el" href="classsf_1_1IPAddress.php" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a> to work. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Address</td><td>: IP address ("xxx.xxx.xxx.xxx") or network name </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a16fa44fa881e32a03b67006d90db0c39"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress </td>
          <td>(</td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>Byte0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>Byte1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>Byte2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>Byte3</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the address from 4 bytes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Byte0</td><td>: First byte of the address </td></tr>
    <tr><td class="paramname">Byte1</td><td>: Second byte of the address </td></tr>
    <tr><td class="paramname">Byte2</td><td>: Third byte of the address </td></tr>
    <tr><td class="paramname">Byte3</td><td>: Fourth byte of the address </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad692d581e4b96ae3377e95947abb7565"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::IPAddress::IPAddress </td>
          <td>(</td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>Address</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the address from a 32-bits integer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Address</td><td>: 4 bytes of the address packed into a 32-bits integer </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a19de85dde974ff66e0b0255cce5eedac"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> sf::IPAddress::GetLocalAddress </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the computer's local IP address (from the LAN point of view) </p>
<dl class="section return"><dt>Returns</dt><dd>Local IP address </dd></dl>

</div>
</div>
<a class="anchor" id="aad0feeaf81c7a15166a003773faa1ba6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> sf::IPAddress::GetPublicAddress </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>Timeout</em> = <code>0.f</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the computer's public IP address (from the web point of view). </p>
<p>The only way to get a public address is to ask it to a distant website ; as a consequence, this function may be very slow &ndash; use it as few as possible !</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Timeout</td><td>: Maximum time to wait, in seconds (0 by default : no timeout)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Public IP address </dd></dl>

</div>
</div>
<a class="anchor" id="a943e91f407afa5d9ae9b988492385697"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::IsValid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell if the address is a valid one. </p>
<dl class="section return"><dt>Returns</dt><dd>True if address has a valid syntax </dd></dl>

</div>
</div>
<a class="anchor" id="adcab830aa4008d469c235582d90ae104"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison operator !=. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: Address to compare</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if *this != Other </dd></dl>

</div>
</div>
<a class="anchor" id="a90ca315772725588df2a5fe73565cb3e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison operator &lt;. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: Address to compare</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if *this &lt; Other </dd></dl>

</div>
</div>
<a class="anchor" id="ad9159e1fbdfffb81b45ac2518143c2be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison operator &lt;=. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: Address to compare</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if *this &lt;= Other </dd></dl>

</div>
</div>
<a class="anchor" id="a326dc00d3ab26ada6ed3168460545b48"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison operator ==. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: Address to compare</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if *this == Other </dd></dl>

</div>
</div>
<a class="anchor" id="a6cd4ab449515009f0d1ab0cd41ddbab0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison operator &gt; </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: Address to compare</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if *this &gt; Other </dd></dl>

</div>
</div>
<a class="anchor" id="a7b0f3e471d2286737023d80220a1313b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::IPAddress::operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison operator &gt;=. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: Address to compare</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if *this &gt;= Other </dd></dl>

</div>
</div>
<a class="anchor" id="aec6999cce584d3b275072cb6da839c3c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint32 sf::IPAddress::ToInteger </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get an integer representation of the address. </p>
<dl class="section return"><dt>Returns</dt><dd>32-bits integer containing the 4 bytes of the address, in system endianness </dd></dl>

</div>
</div>
<a class="anchor" id="a76eadca85be545b5c1c68a4d0dc1c643"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string sf::IPAddress::ToString </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a string representation of the address. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classsf_1_1String.php" title="String defines a graphical 2D text, that can be drawn on screen.">String</a> representation of the IP address ("xxx.xxx.xxx.xxx") </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a3529ec93755712b038fe6b1456c4f7e0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> sf::IPAddress::LocalHost</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Local host address (to connect to the same computer) </p>

<p>Definition at line <a class="el" href="IPAddress_8hpp_source.php#l00196">196</a> of file <a class="el" href="IPAddress_8hpp_source.php">IPAddress.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="IPAddress_8hpp_source.php">IPAddress.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer-fr.php");
?>
