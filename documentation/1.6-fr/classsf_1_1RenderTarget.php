<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::RenderTarget Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header-fr.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1RenderTarget.php">RenderTarget</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classsf_1_1RenderTarget-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::RenderTarget Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Base class for all render targets (window, image, ...)  
 <a href="classsf_1_1RenderTarget.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="RenderTarget_8hpp_source.php">RenderTarget.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::RenderTarget:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1RenderTarget.png" usemap="#sf::RenderTarget_map" alt=""/>
  <map id="sf::RenderTarget_map" name="sf::RenderTarget_map">
<area href="classsf_1_1RenderWindow.php" title="Simple wrapper for sf::Window that allows easy 2D rendering." alt="sf::RenderWindow" shape="rect" coords="0,56,113,80"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9abd1654a99fba46f6887b9c625b9b06"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a9abd1654a99fba46f6887b9c625b9b06">~RenderTarget</a> ()</td></tr>
<tr class="memdesc:a9abd1654a99fba46f6887b9c625b9b06"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a9abd1654a99fba46f6887b9c625b9b06"></a><br/></td></tr>
<tr class="separator:a9abd1654a99fba46f6887b9c625b9b06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a125645088d7b2df07599ea36fbb8b87e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a125645088d7b2df07599ea36fbb8b87e">Clear</a> (const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;FillColor=<a class="el" href="classsf_1_1Color.php">Color</a>(0, 0, 0))</td></tr>
<tr class="memdesc:a125645088d7b2df07599ea36fbb8b87e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the entire target with a single color.  <a href="#a125645088d7b2df07599ea36fbb8b87e"></a><br/></td></tr>
<tr class="separator:a125645088d7b2df07599ea36fbb8b87e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7c8b8d0ed6d9a0e2f0815283e5976d2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#ac7c8b8d0ed6d9a0e2f0815283e5976d2">Draw</a> (const <a class="el" href="classsf_1_1Drawable.php">Drawable</a> &amp;Object)</td></tr>
<tr class="memdesc:ac7c8b8d0ed6d9a0e2f0815283e5976d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Draw something into the target.  <a href="#ac7c8b8d0ed6d9a0e2f0815283e5976d2"></a><br/></td></tr>
<tr class="separator:ac7c8b8d0ed6d9a0e2f0815283e5976d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4df749ecfddb5355d8357afe719cf681"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a4df749ecfddb5355d8357afe719cf681">GetWidth</a> () const =0</td></tr>
<tr class="memdesc:a4df749ecfddb5355d8357afe719cf681"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the width of the rendering region of the target.  <a href="#a4df749ecfddb5355d8357afe719cf681"></a><br/></td></tr>
<tr class="separator:a4df749ecfddb5355d8357afe719cf681"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9495774c371e0dd9ad9835ad2f34a03a"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a9495774c371e0dd9ad9835ad2f34a03a">GetHeight</a> () const =0</td></tr>
<tr class="memdesc:a9495774c371e0dd9ad9835ad2f34a03a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the height of the rendering region of the target.  <a href="#a9495774c371e0dd9ad9835ad2f34a03a"></a><br/></td></tr>
<tr class="separator:a9495774c371e0dd9ad9835ad2f34a03a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7060ca19e685d8d5b7c6f5dd9b5906e1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a7060ca19e685d8d5b7c6f5dd9b5906e1">SetView</a> (const <a class="el" href="classsf_1_1View.php">View</a> &amp;NewView)</td></tr>
<tr class="memdesc:a7060ca19e685d8d5b7c6f5dd9b5906e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current active view.  <a href="#a7060ca19e685d8d5b7c6f5dd9b5906e1"></a><br/></td></tr>
<tr class="separator:a7060ca19e685d8d5b7c6f5dd9b5906e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb9e6bd4593db8a6f58924d26eb93544"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1View.php">View</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#afb9e6bd4593db8a6f58924d26eb93544">GetView</a> () const </td></tr>
<tr class="memdesc:afb9e6bd4593db8a6f58924d26eb93544"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current view.  <a href="#afb9e6bd4593db8a6f58924d26eb93544"></a><br/></td></tr>
<tr class="separator:afb9e6bd4593db8a6f58924d26eb93544"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66d7c2b04d33d3a22f585a3fc39e7fa0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1View.php">View</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a66d7c2b04d33d3a22f585a3fc39e7fa0">GetDefaultView</a> ()</td></tr>
<tr class="memdesc:a66d7c2b04d33d3a22f585a3fc39e7fa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the default view of the window for read / write.  <a href="#a66d7c2b04d33d3a22f585a3fc39e7fa0"></a><br/></td></tr>
<tr class="separator:a66d7c2b04d33d3a22f585a3fc39e7fa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab763d16f00166b516fead600d8824c71"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#ab763d16f00166b516fead600d8824c71">PreserveOpenGLStates</a> (bool Preserve)</td></tr>
<tr class="memdesc:ab763d16f00166b516fead600d8824c71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell SFML to preserve external OpenGL states, at the expense of more CPU charge.  <a href="#ab763d16f00166b516fead600d8824c71"></a><br/></td></tr>
<tr class="separator:ab763d16f00166b516fead600d8824c71"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a2997c96cbd93cb8ce0aba2ddae35b86f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a2997c96cbd93cb8ce0aba2ddae35b86f">RenderTarget</a> ()</td></tr>
<tr class="memdesc:a2997c96cbd93cb8ce0aba2ddae35b86f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a2997c96cbd93cb8ce0aba2ddae35b86f"></a><br/></td></tr>
<tr class="separator:a2997c96cbd93cb8ce0aba2ddae35b86f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d9265548b6903ab7f645d12177bba24"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a3d9265548b6903ab7f645d12177bba24">Initialize</a> ()</td></tr>
<tr class="memdesc:a3d9265548b6903ab7f645d12177bba24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called by the derived class when it's ready to be initialized.  <a href="#a3d9265548b6903ab7f645d12177bba24"></a><br/></td></tr>
<tr class="separator:a3d9265548b6903ab7f645d12177bba24"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Base class for all render targets (window, image, ...) </p>

<p>Definition at line <a class="el" href="RenderTarget_8hpp_source.php#l00043">43</a> of file <a class="el" href="RenderTarget_8hpp_source.php">RenderTarget.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a9abd1654a99fba46f6887b9c625b9b06"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual sf::RenderTarget::~RenderTarget </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<a class="anchor" id="a2997c96cbd93cb8ce0aba2ddae35b86f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderTarget::RenderTarget </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a125645088d7b2df07599ea36fbb8b87e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Clear </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>FillColor</em> = <code><a class="el" href="classsf_1_1Color.php">Color</a>(0,&#160;0,&#160;0)</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Clear the entire target with a single color. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">FillColor</td><td>: <a class="el" href="classsf_1_1Color.php" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> to use to clear the render target </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac7c8b8d0ed6d9a0e2f0815283e5976d2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sf::RenderTarget::Draw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Drawable.php">Drawable</a> &amp;&#160;</td>
          <td class="paramname"><em>Object</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Draw something into the target. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Object</td><td>: Object to draw </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a66d7c2b04d33d3a22f585a3fc39e7fa0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1View.php">View</a>&amp; sf::RenderTarget::GetDefaultView </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the default view of the window for read / write. </p>
<dl class="section return"><dt>Returns</dt><dd>Default view </dd></dl>

</div>
</div>
<a class="anchor" id="a9495774c371e0dd9ad9835ad2f34a03a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int sf::RenderTarget::GetHeight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the height of the rendering region of the target. </p>
<dl class="section return"><dt>Returns</dt><dd>Height in pixels </dd></dl>

<p>Implemented in <a class="el" href="classsf_1_1RenderWindow.php#ab5126fe9bf08c7429490ec75b4597fe8">sf::RenderWindow</a>.</p>

</div>
</div>
<a class="anchor" id="afb9e6bd4593db8a6f58924d26eb93544"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1View.php">View</a>&amp; sf::RenderTarget::GetView </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the current view. </p>
<dl class="section return"><dt>Returns</dt><dd>Current view active in the window </dd></dl>

</div>
</div>
<a class="anchor" id="a4df749ecfddb5355d8357afe719cf681"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int sf::RenderTarget::GetWidth </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the width of the rendering region of the target. </p>
<dl class="section return"><dt>Returns</dt><dd>Width in pixels </dd></dl>

<p>Implemented in <a class="el" href="classsf_1_1RenderWindow.php#a100e2de6fa56a6105418d835a5797651">sf::RenderWindow</a>.</p>

</div>
</div>
<a class="anchor" id="a3d9265548b6903ab7f645d12177bba24"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called by the derived class when it's ready to be initialized. </p>

</div>
</div>
<a class="anchor" id="ab763d16f00166b516fead600d8824c71"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::PreserveOpenGLStates </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Preserve</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tell SFML to preserve external OpenGL states, at the expense of more CPU charge. </p>
<p>Use this function if you don't want SFML to mess up your own OpenGL states (if any). Don't enable state preservation if not needed, as it will allow SFML to do internal optimizations and improve performances. This parameter is false by default</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Preserve</td><td>: True to preserve OpenGL states, false to let SFML optimize </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7060ca19e685d8d5b7c6f5dd9b5906e1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::SetView </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1View.php">View</a> &amp;&#160;</td>
          <td class="paramname"><em>NewView</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change the current active view. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">NewView</td><td>: New view to use (pass <a class="el" href="classsf_1_1RenderTarget.php#a66d7c2b04d33d3a22f585a3fc39e7fa0" title="Get the default view of the window for read / write.">GetDefaultView()</a> to set the default view) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="RenderTarget_8hpp_source.php">RenderTarget.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer-fr.php");
?>
