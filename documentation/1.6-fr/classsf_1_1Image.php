<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::Image Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header-fr.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1Image.php">Image</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classsf_1_1Image-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::Image Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> is the low-level class for loading and manipulating images.  
 <a href="classsf_1_1Image.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Image_8hpp_source.php">Image.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Image:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Image.png" usemap="#sf::Image_map" alt=""/>
  <map id="sf::Image_map" name="sf::Image_map">
<area href="classsf_1_1Resource.php" alt="sf::Resource&lt; Image &gt;" shape="rect" coords="0,0,139,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:abb4caf3cb167b613345ebe36fc883f12"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#abb4caf3cb167b613345ebe36fc883f12">Image</a> ()</td></tr>
<tr class="memdesc:abb4caf3cb167b613345ebe36fc883f12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#abb4caf3cb167b613345ebe36fc883f12"></a><br/></td></tr>
<tr class="separator:abb4caf3cb167b613345ebe36fc883f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa38cae7c1c704aa0175b9e73645cb210"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#aa38cae7c1c704aa0175b9e73645cb210">Image</a> (const <a class="el" href="classsf_1_1Image.php">Image</a> &amp;<a class="el" href="classsf_1_1Image.php#a408c40c8675363adfa96a8b9a9576bc2">Copy</a>)</td></tr>
<tr class="memdesc:aa38cae7c1c704aa0175b9e73645cb210"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#aa38cae7c1c704aa0175b9e73645cb210"></a><br/></td></tr>
<tr class="separator:aa38cae7c1c704aa0175b9e73645cb210"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a4c0ec448863784f83e9931d25dada2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a2a4c0ec448863784f83e9931d25dada2">Image</a> (unsigned int Width, unsigned int Height, const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;Col=<a class="el" href="classsf_1_1Color.php">Color</a>(0, 0, 0, 255))</td></tr>
<tr class="memdesc:a2a4c0ec448863784f83e9931d25dada2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an empty image.  <a href="#a2a4c0ec448863784f83e9931d25dada2"></a><br/></td></tr>
<tr class="separator:a2a4c0ec448863784f83e9931d25dada2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7092ba80cc19c053bf356e98a4743acb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a7092ba80cc19c053bf356e98a4743acb">Image</a> (unsigned int Width, unsigned int Height, const Uint8 *Data)</td></tr>
<tr class="memdesc:a7092ba80cc19c053bf356e98a4743acb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the image from pixels in memory.  <a href="#a7092ba80cc19c053bf356e98a4743acb"></a><br/></td></tr>
<tr class="separator:a7092ba80cc19c053bf356e98a4743acb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ba22a38e6c96e3b37dd88198046de83"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a0ba22a38e6c96e3b37dd88198046de83">~Image</a> ()</td></tr>
<tr class="memdesc:a0ba22a38e6c96e3b37dd88198046de83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a0ba22a38e6c96e3b37dd88198046de83"></a><br/></td></tr>
<tr class="separator:a0ba22a38e6c96e3b37dd88198046de83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cf6316aa5d022e0bdd95f1e79c9f50b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a7cf6316aa5d022e0bdd95f1e79c9f50b">LoadFromFile</a> (const std::string &amp;Filename)</td></tr>
<tr class="memdesc:a7cf6316aa5d022e0bdd95f1e79c9f50b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the image from a file.  <a href="#a7cf6316aa5d022e0bdd95f1e79c9f50b"></a><br/></td></tr>
<tr class="separator:a7cf6316aa5d022e0bdd95f1e79c9f50b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72565ffabe12dfb2602e209c2e6f0486"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a72565ffabe12dfb2602e209c2e6f0486">LoadFromMemory</a> (const char *Data, std::size_t SizeInBytes)</td></tr>
<tr class="memdesc:a72565ffabe12dfb2602e209c2e6f0486"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the image from a file in memory.  <a href="#a72565ffabe12dfb2602e209c2e6f0486"></a><br/></td></tr>
<tr class="separator:a72565ffabe12dfb2602e209c2e6f0486"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67d65c552c9bcba989a061e9c5b5d10c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a67d65c552c9bcba989a061e9c5b5d10c">LoadFromPixels</a> (unsigned int Width, unsigned int Height, const Uint8 *Data)</td></tr>
<tr class="memdesc:a67d65c552c9bcba989a061e9c5b5d10c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the image directly from an array of pixels.  <a href="#a67d65c552c9bcba989a061e9c5b5d10c"></a><br/></td></tr>
<tr class="separator:a67d65c552c9bcba989a061e9c5b5d10c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50eed54ef8e9f3aeef5bb7f19144aa08"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a50eed54ef8e9f3aeef5bb7f19144aa08">SaveToFile</a> (const std::string &amp;Filename) const </td></tr>
<tr class="memdesc:a50eed54ef8e9f3aeef5bb7f19144aa08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save the content of the image to a file.  <a href="#a50eed54ef8e9f3aeef5bb7f19144aa08"></a><br/></td></tr>
<tr class="separator:a50eed54ef8e9f3aeef5bb7f19144aa08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e2ce8821e8de36462604bbf99f39cde"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a4e2ce8821e8de36462604bbf99f39cde">Create</a> (unsigned int Width, unsigned int Height, <a class="el" href="classsf_1_1Color.php">Color</a> Col=<a class="el" href="classsf_1_1Color.php">Color</a>(0, 0, 0, 255))</td></tr>
<tr class="memdesc:a4e2ce8821e8de36462604bbf99f39cde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create an empty image.  <a href="#a4e2ce8821e8de36462604bbf99f39cde"></a><br/></td></tr>
<tr class="separator:a4e2ce8821e8de36462604bbf99f39cde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9a15fe9a4750295845b5ae081c2ec50"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#ae9a15fe9a4750295845b5ae081c2ec50">CreateMaskFromColor</a> (<a class="el" href="classsf_1_1Color.php">Color</a> ColorKey, Uint8 Alpha=0)</td></tr>
<tr class="memdesc:ae9a15fe9a4750295845b5ae081c2ec50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create transparency mask from a specified colorkey.  <a href="#ae9a15fe9a4750295845b5ae081c2ec50"></a><br/></td></tr>
<tr class="separator:ae9a15fe9a4750295845b5ae081c2ec50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a408c40c8675363adfa96a8b9a9576bc2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a408c40c8675363adfa96a8b9a9576bc2">Copy</a> (const <a class="el" href="classsf_1_1Image.php">Image</a> &amp;Source, unsigned int DestX, unsigned int DestY, const <a class="el" href="classsf_1_1Rect.php">IntRect</a> &amp;SourceRect=<a class="el" href="classsf_1_1Rect.php">IntRect</a>(0, 0, 0, 0), bool ApplyAlpha=false)</td></tr>
<tr class="memdesc:a408c40c8675363adfa96a8b9a9576bc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy pixels from another image onto this one.  <a href="#a408c40c8675363adfa96a8b9a9576bc2"></a><br/></td></tr>
<tr class="separator:a408c40c8675363adfa96a8b9a9576bc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96597746f70ce1925ec82d2df8ae6974"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a96597746f70ce1925ec82d2df8ae6974">CopyScreen</a> (<a class="el" href="classsf_1_1RenderWindow.php">RenderWindow</a> &amp;<a class="el" href="classsf_1_1Window.php">Window</a>, const <a class="el" href="classsf_1_1Rect.php">IntRect</a> &amp;SourceRect=<a class="el" href="classsf_1_1Rect.php">IntRect</a>(0, 0, 0, 0))</td></tr>
<tr class="memdesc:a96597746f70ce1925ec82d2df8ae6974"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the image from the current contents of the given window.  <a href="#a96597746f70ce1925ec82d2df8ae6974"></a><br/></td></tr>
<tr class="separator:a96597746f70ce1925ec82d2df8ae6974"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a623f2379b30307b4ee4eb08d517d9584"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a623f2379b30307b4ee4eb08d517d9584">SetPixel</a> (unsigned int X, unsigned int Y, const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;Col)</td></tr>
<tr class="memdesc:a623f2379b30307b4ee4eb08d517d9584"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the color of a pixel.  <a href="#a623f2379b30307b4ee4eb08d517d9584"></a><br/></td></tr>
<tr class="separator:a623f2379b30307b4ee4eb08d517d9584"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a531abcad64f50158ebe66975066ef5bd"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a531abcad64f50158ebe66975066ef5bd">GetPixel</a> (unsigned int X, unsigned int Y) const </td></tr>
<tr class="memdesc:a531abcad64f50158ebe66975066ef5bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a pixel from the image.  <a href="#a531abcad64f50158ebe66975066ef5bd"></a><br/></td></tr>
<tr class="separator:a531abcad64f50158ebe66975066ef5bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1594ab4251d6fc833a48dd242918631"><td class="memItemLeft" align="right" valign="top">const Uint8 *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#ad1594ab4251d6fc833a48dd242918631">GetPixelsPtr</a> () const </td></tr>
<tr class="memdesc:ad1594ab4251d6fc833a48dd242918631"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a read-only pointer to the array of pixels (RGBA 8 bits integers components) Array size is <a class="el" href="classsf_1_1Image.php#a896f09a4eb769b5b866b6dde9c1a25e7" title="Return the width of the image.">GetWidth()</a> x <a class="el" href="classsf_1_1Image.php#af2131512b6290fd96fd10c539723fe89" title="Return the height of the image.">GetHeight()</a> x 4 This pointer becomes invalid if you reload or resize the image.  <a href="#ad1594ab4251d6fc833a48dd242918631"></a><br/></td></tr>
<tr class="separator:ad1594ab4251d6fc833a48dd242918631"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74bda6dc927849ff25f8fce5143918e7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a74bda6dc927849ff25f8fce5143918e7">Bind</a> () const </td></tr>
<tr class="memdesc:a74bda6dc927849ff25f8fce5143918e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind the image for rendering.  <a href="#a74bda6dc927849ff25f8fce5143918e7"></a><br/></td></tr>
<tr class="separator:a74bda6dc927849ff25f8fce5143918e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad167422fd331cd069674391fb16e8452"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#ad167422fd331cd069674391fb16e8452">SetSmooth</a> (bool Smooth)</td></tr>
<tr class="memdesc:ad167422fd331cd069674391fb16e8452"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable or disable image smooth filter.  <a href="#ad167422fd331cd069674391fb16e8452"></a><br/></td></tr>
<tr class="separator:ad167422fd331cd069674391fb16e8452"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a896f09a4eb769b5b866b6dde9c1a25e7"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a896f09a4eb769b5b866b6dde9c1a25e7">GetWidth</a> () const </td></tr>
<tr class="memdesc:a896f09a4eb769b5b866b6dde9c1a25e7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the width of the image.  <a href="#a896f09a4eb769b5b866b6dde9c1a25e7"></a><br/></td></tr>
<tr class="separator:a896f09a4eb769b5b866b6dde9c1a25e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2131512b6290fd96fd10c539723fe89"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#af2131512b6290fd96fd10c539723fe89">GetHeight</a> () const </td></tr>
<tr class="memdesc:af2131512b6290fd96fd10c539723fe89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the height of the image.  <a href="#af2131512b6290fd96fd10c539723fe89"></a><br/></td></tr>
<tr class="separator:af2131512b6290fd96fd10c539723fe89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad175b4c9110549c5df324ba61c580ce3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#ad175b4c9110549c5df324ba61c580ce3">IsSmooth</a> () const </td></tr>
<tr class="memdesc:ad175b4c9110549c5df324ba61c580ce3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tells whether the smooth filtering is enabled or not.  <a href="#ad175b4c9110549c5df324ba61c580ce3"></a><br/></td></tr>
<tr class="separator:ad175b4c9110549c5df324ba61c580ce3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a066704507bcaabe27db17170bf02bd56"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Rect.php">FloatRect</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a066704507bcaabe27db17170bf02bd56">GetTexCoords</a> (const <a class="el" href="classsf_1_1Rect.php">IntRect</a> &amp;<a class="el" href="classsf_1_1Rect.php">Rect</a>) const </td></tr>
<tr class="memdesc:a066704507bcaabe27db17170bf02bd56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a subrect expressed in pixels, into float texture coordinates.  <a href="#a066704507bcaabe27db17170bf02bd56"></a><br/></td></tr>
<tr class="separator:a066704507bcaabe27db17170bf02bd56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b9380f1babc21df2787f543e1ae1ab6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Image.php">Image</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a0b9380f1babc21df2787f543e1ae1ab6">operator=</a> (const <a class="el" href="classsf_1_1Image.php">Image</a> &amp;Other)</td></tr>
<tr class="memdesc:a0b9380f1babc21df2787f543e1ae1ab6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator.  <a href="#a0b9380f1babc21df2787f543e1ae1ab6"></a><br/></td></tr>
<tr class="separator:a0b9380f1babc21df2787f543e1ae1ab6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a1d7f3465e212f9fe2527bd4c8fc43fc4"><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.php#a1d7f3465e212f9fe2527bd4c8fc43fc4">GetValidTextureSize</a> (unsigned int Size)</td></tr>
<tr class="memdesc:a1d7f3465e212f9fe2527bd4c8fc43fc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a valid texture size according to hardware support.  <a href="#a1d7f3465e212f9fe2527bd4c8fc43fc4"></a><br/></td></tr>
<tr class="separator:a1d7f3465e212f9fe2527bd4c8fc43fc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> is the low-level class for loading and manipulating images. </p>

<p>Definition at line <a class="el" href="Image_8hpp_source.php#l00046">46</a> of file <a class="el" href="Image_8hpp_source.php">Image.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="abb4caf3cb167b613345ebe36fc883f12"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::Image </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="aa38cae7c1c704aa0175b9e73645cb210"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::Image </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Image.php">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>Copy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Copy</td><td>: instance to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2a4c0ec448863784f83e9931d25dada2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::Image </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>Col</em> = <code><a class="el" href="classsf_1_1Color.php">Color</a>(0,&#160;0,&#160;0,&#160;255)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct an empty image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Width</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> width </td></tr>
    <tr><td class="paramname">Height</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> height </td></tr>
    <tr><td class="paramname">Col</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> color (black by default) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7092ba80cc19c053bf356e98a4743acb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::Image </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Uint8 *&#160;</td>
          <td class="paramname"><em>Data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the image from pixels in memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Width</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> width </td></tr>
    <tr><td class="paramname">Height</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> height </td></tr>
    <tr><td class="paramname">Data</td><td>: Pointer to the pixels in memory (assumed format is RGBA) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0ba22a38e6c96e3b37dd88198046de83"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Image::~Image </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a74bda6dc927849ff25f8fce5143918e7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::Bind </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bind the image for rendering. </p>

</div>
</div>
<a class="anchor" id="a408c40c8675363adfa96a8b9a9576bc2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::Copy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Image.php">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>Source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>DestX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>DestY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Rect.php">IntRect</a> &amp;&#160;</td>
          <td class="paramname"><em>SourceRect</em> = <code><a class="el" href="classsf_1_1Rect.php">IntRect</a>(0,&#160;0,&#160;0,&#160;0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ApplyAlpha</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy pixels from another image onto this one. </p>
<p>This function does a slow pixel copy and should only be used at initialization time</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Source</td><td>: Source image to copy </td></tr>
    <tr><td class="paramname">DestX</td><td>: X coordinate of the destination position </td></tr>
    <tr><td class="paramname">DestY</td><td>: Y coordinate of the destination position </td></tr>
    <tr><td class="paramname">SourceRect</td><td>: Sub-rectangle of the source image to copy (empty by default - entire image) </td></tr>
    <tr><td class="paramname">ApplyAlpha</td><td>: Should the copy take in account the source transparency? (false by default) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a96597746f70ce1925ec82d2df8ae6974"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::CopyScreen </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1RenderWindow.php">RenderWindow</a> &amp;&#160;</td>
          <td class="paramname"><em>Window</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Rect.php">IntRect</a> &amp;&#160;</td>
          <td class="paramname"><em>SourceRect</em> = <code><a class="el" href="classsf_1_1Rect.php">IntRect</a>(0,&#160;0,&#160;0,&#160;0)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create the image from the current contents of the given window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname"><a class="el" href="classsf_1_1Window.php" title="Window is a rendering window ; it can create a new window or connect to an existing one...">Window</a></td><td>: <a class="el" href="classsf_1_1Window.php" title="Window is a rendering window ; it can create a new window or connect to an existing one...">Window</a> to capture </td></tr>
    <tr><td class="paramname">SourceRect</td><td>: Sub-rectangle of the screen to copy (empty by default - entire image)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if copy was successful </dd></dl>

</div>
</div>
<a class="anchor" id="a4e2ce8821e8de36462604bbf99f39cde"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::Create </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Color.php">Color</a>&#160;</td>
          <td class="paramname"><em>Col</em> = <code><a class="el" href="classsf_1_1Color.php">Color</a>(0,&#160;0,&#160;0,&#160;255)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create an empty image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Width</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> width </td></tr>
    <tr><td class="paramname">Height</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> height </td></tr>
    <tr><td class="paramname">Col</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> color (black by default)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if creation was successful </dd></dl>

</div>
</div>
<a class="anchor" id="ae9a15fe9a4750295845b5ae081c2ec50"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::CreateMaskFromColor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Color.php">Color</a>&#160;</td>
          <td class="paramname"><em>ColorKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>Alpha</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create transparency mask from a specified colorkey. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ColorKey</td><td>: <a class="el" href="classsf_1_1Color.php" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> to become transparent </td></tr>
    <tr><td class="paramname">Alpha</td><td>: Alpha value to use for transparent pixels (0 by default) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af2131512b6290fd96fd10c539723fe89"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::Image::GetHeight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the height of the image. </p>
<dl class="section return"><dt>Returns</dt><dd>Height in pixels </dd></dl>

</div>
</div>
<a class="anchor" id="a531abcad64f50158ebe66975066ef5bd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.php">Color</a>&amp; sf::Image::GetPixel </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a pixel from the image. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>: X coordinate of pixel in the image </td></tr>
    <tr><td class="paramname">Y</td><td>: Y coordinate of pixel in the image</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classsf_1_1Color.php" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> of pixel (X, Y) </dd></dl>

</div>
</div>
<a class="anchor" id="ad1594ab4251d6fc833a48dd242918631"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const Uint8* sf::Image::GetPixelsPtr </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a read-only pointer to the array of pixels (RGBA 8 bits integers components) Array size is <a class="el" href="classsf_1_1Image.php#a896f09a4eb769b5b866b6dde9c1a25e7" title="Return the width of the image.">GetWidth()</a> x <a class="el" href="classsf_1_1Image.php#af2131512b6290fd96fd10c539723fe89" title="Return the height of the image.">GetHeight()</a> x 4 This pointer becomes invalid if you reload or resize the image. </p>
<dl class="section return"><dt>Returns</dt><dd>Const pointer to the array of pixels </dd></dl>

</div>
</div>
<a class="anchor" id="a066704507bcaabe27db17170bf02bd56"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Rect.php">FloatRect</a> sf::Image::GetTexCoords </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Rect.php">IntRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a subrect expressed in pixels, into float texture coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname"><a class="el" href="classsf_1_1Rect.php" title="Rect is an utility class for manipulating rectangles.">Rect</a></td><td>: Sub-rectangle of image to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Texture coordinates corresponding to the sub-rectangle </dd></dl>

</div>
</div>
<a class="anchor" id="a1d7f3465e212f9fe2527bd4c8fc43fc4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int sf::Image::GetValidTextureSize </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a valid texture size according to hardware support. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Size</td><td>: Size to convert</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Valid nearest size (greater than or equal to specified size) </dd></dl>

</div>
</div>
<a class="anchor" id="a896f09a4eb769b5b866b6dde9c1a25e7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::Image::GetWidth </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the width of the image. </p>
<dl class="section return"><dt>Returns</dt><dd>Width in pixels </dd></dl>

</div>
</div>
<a class="anchor" id="ad175b4c9110549c5df324ba61c580ce3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::IsSmooth </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tells whether the smooth filtering is enabled or not. </p>
<dl class="section return"><dt>Returns</dt><dd>True if image smoothing is enabled </dd></dl>

</div>
</div>
<a class="anchor" id="a7cf6316aa5d022e0bdd95f1e79c9f50b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::LoadFromFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>Filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load the image from a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Filename</td><td>: Path of the image file to load</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading was successful </dd></dl>

</div>
</div>
<a class="anchor" id="a72565ffabe12dfb2602e209c2e6f0486"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::LoadFromMemory </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>Data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>SizeInBytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load the image from a file in memory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Data</td><td>: Pointer to the file data in memory </td></tr>
    <tr><td class="paramname">SizeInBytes</td><td>: Size of the data to load, in bytes</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading was successful </dd></dl>

</div>
</div>
<a class="anchor" id="a67d65c552c9bcba989a061e9c5b5d10c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::LoadFromPixels </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Uint8 *&#160;</td>
          <td class="paramname"><em>Data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load the image directly from an array of pixels. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Width</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> width </td></tr>
    <tr><td class="paramname">Height</td><td>: <a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> height </td></tr>
    <tr><td class="paramname">Data</td><td>: Pointer to the pixels in memory (assumed format is RGBA)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading was successful </dd></dl>

</div>
</div>
<a class="anchor" id="a0b9380f1babc21df2787f543e1ae1ab6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Image.php">Image</a>&amp; sf::Image::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Image.php">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assignment operator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: instance to assign</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to the image </dd></dl>

</div>
</div>
<a class="anchor" id="a50eed54ef8e9f3aeef5bb7f19144aa08"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Image::SaveToFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>Filename</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Save the content of the image to a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Filename</td><td>: Path of the file to save (overwritten if already exist)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if saving was successful </dd></dl>

</div>
</div>
<a class="anchor" id="a623f2379b30307b4ee4eb08d517d9584"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::SetPixel </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>Col</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change the color of a pixel. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>: X coordinate of pixel in the image </td></tr>
    <tr><td class="paramname">Y</td><td>: Y coordinate of pixel in the image </td></tr>
    <tr><td class="paramname">Col</td><td>: New color for pixel (X, Y) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad167422fd331cd069674391fb16e8452"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Image::SetSmooth </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Smooth</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enable or disable image smooth filter. </p>
<p>This parameter is enabled by default</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Smooth</td><td>: True to enable smoothing filter, false to disable it </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Image_8hpp_source.php">Image.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer-fr.php");
?>
