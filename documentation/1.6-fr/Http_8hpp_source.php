<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'Http.hpp Source File'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header-fr.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li><a href="annotated.php"><span>Classes</span></a></li>
      <li class="current"><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.php"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_83ae1a5e8455fc62607b4936b42116e9.php">sfml</a></li><li class="navelem"><a class="el" href="dir_79a044fa5ec8bbf4af7d440d8995a178.php">sfml</a></li><li class="navelem"><a class="el" href="dir_f3190241575fd2bd132a392ae6942f4a.php">include</a></li><li class="navelem"><a class="el" href="dir_692f376662c82a26cfe4cfa3aceebe24.php">SFML</a></li><li class="navelem"><a class="el" href="dir_b9ac88db2949395b3130dd4ffb1be4e1.php">Network</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Http.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">// SFML - Simple and Fast Multimedia Library</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// Permission is granted to anyone to use this software for any purpose,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// subject to the following restrictions:</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">// 1. The origin of this software must not be misrepresented;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">//    you must not claim that you wrote the original software.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">//    If you use this software in a product, an acknowledgment</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">//    in the product documentation would be appreciated but is not required.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">// 2. Altered source versions must be plainly marked as such,</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">//    and must not be misrepresented as being the original software.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">//</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#ifndef SFML_HTTP_HPP</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define SFML_HTTP_HPP</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">// Headers</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"></span><span class="preprocessor">#include &lt;SFML/System/NonCopyable.hpp&gt;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;SFML/Network/IPAddress.hpp&gt;</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;SFML/Network/SocketTCP.hpp&gt;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>sf</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="code" href="classsf_1_1Http.php">   45</a></span>&#160;<span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1Http.php" title="This class provides methods for manipulating the HTTP protocol (described in RFC 1945).">Http</a> : <a class="code" href="structsf_1_1NonCopyable.php" title="Utility base class to easily declare non-copyable classes.">NonCopyable</a></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">public</span> :</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Request.php">   54</a></span>&#160;    <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1Http_1_1Request.php" title="This class wraps an HTTP request, which is basically :">Request</a></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">public</span> :</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Request.php#a620f8bff6f43e1378f321bf53fbf5598">   61</a></span>&#160;        <span class="keyword">enum</span> <a class="code" href="classsf_1_1Http_1_1Request.php#a620f8bff6f43e1378f321bf53fbf5598" title="Enumerate the available HTTP methods for a request.">Method</a></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        {</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Request.php#a620f8bff6f43e1378f321bf53fbf5598ab822baed393f3d0353621e5378b9fcb4">   63</a></span>&#160;            <a class="code" href="classsf_1_1Http_1_1Request.php#a620f8bff6f43e1378f321bf53fbf5598ab822baed393f3d0353621e5378b9fcb4" title="Request in get mode, standard method to retrieve a page.">Get</a>,  </div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Request.php#a620f8bff6f43e1378f321bf53fbf5598ae8ec4048b9550f8d0747d4199603141a">   64</a></span>&#160;            <a class="code" href="classsf_1_1Http_1_1Request.php#a620f8bff6f43e1378f321bf53fbf5598ae8ec4048b9550f8d0747d4199603141a" title="Request in post mode, usually to send data to a page.">Post</a>, </div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Request.php#a620f8bff6f43e1378f321bf53fbf5598a4df23138be7ed60f47aba6548ba65e7b">   65</a></span>&#160;            Head  </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        };</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <a class="code" href="classsf_1_1Http_1_1Request.php" title="This class wraps an HTTP request, which is basically :">Request</a>(Method RequestMethod = Get, <span class="keyword">const</span> std::string&amp; URI = <span class="stringliteral">&quot;/&quot;</span>, <span class="keyword">const</span> std::string&amp; Body = <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordtype">void</span> SetField(<span class="keyword">const</span> std::string&amp; Field, <span class="keyword">const</span> std::string&amp; Value);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="keywordtype">void</span> SetMethod(Method RequestMethod);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordtype">void</span> SetURI(<span class="keyword">const</span> std::string&amp; URI);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordtype">void</span> SetHttpVersion(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Major, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Minor);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordtype">void</span> SetBody(<span class="keyword">const</span> std::string&amp; Body);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">private</span> :</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1Http.php" title="This class provides methods for manipulating the HTTP protocol (described in RFC 1945).">Http</a>;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        std::string ToString() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordtype">bool</span> HasField(<span class="keyword">const</span> std::string&amp; Field) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="comment">// Types</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> std::map&lt;std::string, std::string&gt; FieldTable;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">// Member data</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"></span>        FieldTable   myFields;       </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        Method       myMethod;       </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        std::string  myURI;          </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> myMajorVersion; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> myMinorVersion; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        std::string  myBody;         </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    };</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php">  168</a></span>&#160;    <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1Http_1_1Response.php" title="This class wraps an HTTP response, which is basically :">Response</a></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    {</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keyword">public</span> :</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8">  176</a></span>&#160;        <span class="keyword">enum</span> <a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8" title="Enumerate all the valid status codes returned in a HTTP response.">Status</a></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        {</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="comment">// 2xx: success</span></div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a0158f932254d3f09647dd1f64bd43832">  179</a></span>&#160;            Ok        = 200, </div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a0a6e8bafa9365a0ed10b8a9cbfd0649b">  180</a></span>&#160;            Created   = 201, </div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8ad328945457bd2f0d65107ba6b5ccd443">  181</a></span>&#160;            Accepted  = 202, </div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8aefde9e4abf5682dcd314d63143be42e0">  182</a></span>&#160;            NoContent = 204, </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <span class="comment">// 3xx: redirection</span></div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8add95cbd8fa27516821f763488557f96b">  185</a></span>&#160;            MultipleChoices  = 300, </div>
<div class="line"><a name="l00186"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a2f91651db3a09628faf68cbcefa0810a">  186</a></span>&#160;            MovedPermanently = 301, </div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a05c50d7b17c844e0b909e5802d5f1587">  187</a></span>&#160;            MovedTemporarily = 302, </div>
<div class="line"><a name="l00188"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a060ebc3af266e6bfe045b89e298e2545">  188</a></span>&#160;            NotModified      = 304, </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="comment">// 4xx: client error</span></div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a3f88a714cf5483ee22f9051e5a3c080a">  191</a></span>&#160;            BadRequest   = 400, </div>
<div class="line"><a name="l00192"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8ab7a79b7bff50fb1902c19eecbb4e2a2d">  192</a></span>&#160;            Unauthorized = 401, </div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a64492842e823ebe12a85539b6b454986">  193</a></span>&#160;            Forbidden    = 403, </div>
<div class="line"><a name="l00194"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8affca8a8319a62d98bd3ef90ff5cfc030">  194</a></span>&#160;            NotFound     = 404, </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="comment">// 5xx: server error</span></div>
<div class="line"><a name="l00197"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8adae2b2a936414349d55b4ed8c583fed1">  197</a></span>&#160;            InternalServerError = 500, </div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a6920ba06d7e2bcf0b325da23ee95ef68">  198</a></span>&#160;            NotImplemented      = 501, </div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8aad0cbad4cdaf448beb763e86bc1f747c">  199</a></span>&#160;            BadGateway          = 502, </div>
<div class="line"><a name="l00200"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8ac4fffba9d5ad4c14171a1bbe4f6adf87">  200</a></span>&#160;            ServiceNotAvailable = 503, </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="comment">// 10xx: SFML custom codes</span></div>
<div class="line"><a name="l00203"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a0af0090420e60bf54da4860749345c95">  203</a></span>&#160;            InvalidResponse  = 1000, </div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="classsf_1_1Http_1_1Response.php#a663e071978e30fbbeb20ed045be874d8a7f307376f13bdc06b24fc274ecd2aa60">  204</a></span>&#160;            ConnectionFailed = 1001  </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        };</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <a class="code" href="classsf_1_1Http_1_1Response.php" title="This class wraps an HTTP response, which is basically :">Response</a>();</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keyword">const</span> std::string&amp; GetField(<span class="keyword">const</span> std::string&amp; Field) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        Status GetStatus() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetMajorHttpVersion() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetMinorHttpVersion() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keyword">const</span> std::string&amp; GetBody() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">private</span> :</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1Http.php" title="This class provides methods for manipulating the HTTP protocol (described in RFC 1945).">Http</a>;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordtype">void</span> FromString(<span class="keyword">const</span> std::string&amp; Data);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="comment">// Types</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> std::map&lt;std::string, std::string&gt; FieldTable;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="comment">// Member data</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"></span>        FieldTable   myFields;       </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        Status       myStatus;       </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> myMajorVersion; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> myMinorVersion; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        std::string  myBody;         </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    };</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <a class="code" href="classsf_1_1Http.php" title="This class provides methods for manipulating the HTTP protocol (described in RFC 1945).">Http</a>();</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <a class="code" href="classsf_1_1Http.php" title="This class provides methods for manipulating the HTTP protocol (described in RFC 1945).">Http</a>(<span class="keyword">const</span> std::string&amp; Host, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> Port = 0);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordtype">void</span> SetHost(<span class="keyword">const</span> std::string&amp; Host, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> Port = 0);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    Response SendRequest(<span class="keyword">const</span> Request&amp; Req, <span class="keywordtype">float</span> Timeout = 0.f);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="keyword">private</span> :</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="comment">// Member data</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment"></span>    <a class="code" href="classsf_1_1SocketTCP.php" title="SocketTCP wraps a socket using TCP protocol to send data safely (but a bit slower)">SocketTCP</a>      myConnection; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="classsf_1_1IPAddress.php" title="IPAddress provides easy manipulation of IP v4 addresses.">IPAddress</a>      myHost;       </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    std::string    myHostName;   </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> myPort;       </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;};</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;} <span class="comment">// namespace sf</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="preprocessor">#endif // SFML_HTTP_HPP</span></div>
</div><!-- fragment --></div><!-- contents -->
<?php
    require("../footer-fr.php");
?>
