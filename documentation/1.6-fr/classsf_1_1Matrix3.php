<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::Matrix3 Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header-fr.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1Matrix3.php">Matrix3</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="classsf_1_1Matrix3-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::Matrix3 Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Utility class to manipulate 3x3 matrices representing 2D transformations.  
 <a href="classsf_1_1Matrix3.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Matrix3_8hpp_source.php">Matrix3.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac91b75704a916deb3febe39e06962b4c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#ac91b75704a916deb3febe39e06962b4c">Matrix3</a> ()</td></tr>
<tr class="memdesc:ac91b75704a916deb3febe39e06962b4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor (builds an identity matrix)  <a href="#ac91b75704a916deb3febe39e06962b4c"></a><br/></td></tr>
<tr class="separator:ac91b75704a916deb3febe39e06962b4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0dc2db05f945d1e170f6d540193b309"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#ae0dc2db05f945d1e170f6d540193b309">Matrix3</a> (float a00, float a01, float a02, float a10, float a11, float a12, float a20, float a21, float a22)</td></tr>
<tr class="memdesc:ae0dc2db05f945d1e170f6d540193b309"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a matrix from its 9 elements.  <a href="#ae0dc2db05f945d1e170f6d540193b309"></a><br/></td></tr>
<tr class="separator:ae0dc2db05f945d1e170f6d540193b309"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeb18b51c51229e809725e4cd5741b2d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#abeb18b51c51229e809725e4cd5741b2d">SetFromTransformations</a> (const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;Center, const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;Translation, float Rotation, const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;Scale)</td></tr>
<tr class="memdesc:abeb18b51c51229e809725e4cd5741b2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Build a matrix from a set of transformations.  <a href="#abeb18b51c51229e809725e4cd5741b2d"></a><br/></td></tr>
<tr class="separator:abeb18b51c51229e809725e4cd5741b2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cb1106305307a8fbf8450f4aa6f4151"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.php">Vector2f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#a8cb1106305307a8fbf8450f4aa6f4151">Transform</a> (const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;Point) const </td></tr>
<tr class="memdesc:a8cb1106305307a8fbf8450f4aa6f4151"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transform a point by the matrix.  <a href="#a8cb1106305307a8fbf8450f4aa6f4151"></a><br/></td></tr>
<tr class="separator:a8cb1106305307a8fbf8450f4aa6f4151"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa7b544f401812b55ace055043385e8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Matrix3.php">Matrix3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#afa7b544f401812b55ace055043385e8e">GetInverse</a> () const </td></tr>
<tr class="memdesc:afa7b544f401812b55ace055043385e8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the inverse of the matrix.  <a href="#afa7b544f401812b55ace055043385e8e"></a><br/></td></tr>
<tr class="separator:afa7b544f401812b55ace055043385e8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff23cbd3d056d404a566a62dea4c98c1"><td class="memItemLeft" align="right" valign="top">const float *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#aff23cbd3d056d404a566a62dea4c98c1">Get4x4Elements</a> () const </td></tr>
<tr class="memdesc:aff23cbd3d056d404a566a62dea4c98c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the elements of the matrix as a 4x4, in an array of 16 floats.  <a href="#aff23cbd3d056d404a566a62dea4c98c1"></a><br/></td></tr>
<tr class="separator:aff23cbd3d056d404a566a62dea4c98c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afffc96664df9bfc7aff4b95a6b11aea8"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#afffc96664df9bfc7aff4b95a6b11aea8">operator()</a> (unsigned int Row, unsigned int Col) const </td></tr>
<tr class="memdesc:afffc96664df9bfc7aff4b95a6b11aea8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Operator () overloads to access the matrix elements.  <a href="#afffc96664df9bfc7aff4b95a6b11aea8"></a><br/></td></tr>
<tr class="separator:afffc96664df9bfc7aff4b95a6b11aea8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a124eb681c1ecb8f98c3e69b173c85545"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a124eb681c1ecb8f98c3e69b173c85545"></a>
float &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator()</b> (unsigned int Row, unsigned int Col)</td></tr>
<tr class="separator:a124eb681c1ecb8f98c3e69b173c85545"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a695f753f4aa2cd617c1cecdfa0212e28"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Matrix3.php">Matrix3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#a695f753f4aa2cd617c1cecdfa0212e28">operator*</a> (const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> &amp;Mat) const </td></tr>
<tr class="memdesc:a695f753f4aa2cd617c1cecdfa0212e28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Operator * overload to multiply two matrices.  <a href="#a695f753f4aa2cd617c1cecdfa0212e28"></a><br/></td></tr>
<tr class="separator:a695f753f4aa2cd617c1cecdfa0212e28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac08a84563176fb77613c43adf402966"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#aac08a84563176fb77613c43adf402966">operator*=</a> (const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> &amp;Mat)</td></tr>
<tr class="memdesc:aac08a84563176fb77613c43adf402966"><td class="mdescLeft">&#160;</td><td class="mdescRight">Operator *= overload to multiply-assign two matrices.  <a href="#aac08a84563176fb77613c43adf402966"></a><br/></td></tr>
<tr class="separator:aac08a84563176fb77613c43adf402966"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:afa5a43545e529d8b8628ca42289ef40a"><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Matrix3.php#afa5a43545e529d8b8628ca42289ef40a">Identity</a></td></tr>
<tr class="memdesc:afa5a43545e529d8b8628ca42289ef40a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identity matrix.  <a href="#afa5a43545e529d8b8628ca42289ef40a"></a><br/></td></tr>
<tr class="separator:afa5a43545e529d8b8628ca42289ef40a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Utility class to manipulate 3x3 matrices representing 2D transformations. </p>

<p>Definition at line <a class="el" href="Matrix3_8hpp_source.php#l00042">42</a> of file <a class="el" href="Matrix3_8hpp_source.php">Matrix3.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ac91b75704a916deb3febe39e06962b4c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Matrix3::Matrix3 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor (builds an identity matrix) </p>

</div>
</div>
<a class="anchor" id="ae0dc2db05f945d1e170f6d540193b309"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Matrix3::Matrix3 </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a00</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a01</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a02</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a10</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a11</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a12</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a20</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a21</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>a22</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct a matrix from its 9 elements. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="aff23cbd3d056d404a566a62dea4c98c1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const float* sf::Matrix3::Get4x4Elements </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the elements of the matrix as a 4x4, in an array of 16 floats. </p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the 4x4 matrix elements </dd></dl>

</div>
</div>
<a class="anchor" id="afa7b544f401812b55ace055043385e8e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> sf::Matrix3::GetInverse </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Return the inverse of the matrix. </p>
<dl class="section return"><dt>Returns</dt><dd>A new matrix which is the inverse of this </dd></dl>

</div>
</div>
<a class="anchor" id="afffc96664df9bfc7aff4b95a6b11aea8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Matrix3::operator() </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Col</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Operator () overloads to access the matrix elements. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Row</td><td>: Element row (0 based) </td></tr>
    <tr><td class="paramname">Col</td><td>: Element column (0 based)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Matrix element (Row, Col) </dd></dl>

</div>
</div>
<a class="anchor" id="a695f753f4aa2cd617c1cecdfa0212e28"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> sf::Matrix3::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> &amp;&#160;</td>
          <td class="paramname"><em>Mat</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Operator * overload to multiply two matrices. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Mat</td><td>: Matrix to multiply</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>this * Mat </dd></dl>

</div>
</div>
<a class="anchor" id="aac08a84563176fb77613c43adf402966"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Matrix3.php">Matrix3</a>&amp; sf::Matrix3::operator*= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> &amp;&#160;</td>
          <td class="paramname"><em>Mat</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Operator *= overload to multiply-assign two matrices. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Mat</td><td>: Matrix to multiply</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>this * Mat </dd></dl>

</div>
</div>
<a class="anchor" id="abeb18b51c51229e809725e4cd5741b2d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Matrix3::SetFromTransformations </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Center</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Translation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>Rotation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Scale</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Build a matrix from a set of transformations. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Center</td><td>: Origin for the transformations </td></tr>
    <tr><td class="paramname">Translation</td><td>: Translation offset </td></tr>
    <tr><td class="paramname">Rotation</td><td>: Rotation angle in degrees </td></tr>
    <tr><td class="paramname">Scale</td><td>: Scaling factors </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8cb1106305307a8fbf8450f4aa6f4151"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.php">Vector2f</a> sf::Matrix3::Transform </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transform a point by the matrix. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Point</td><td>: Point to transform</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Transformed point </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="afa5a43545e529d8b8628ca42289ef40a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> sf::Matrix3::Identity</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Identity matrix. </p>

<p>Definition at line <a class="el" href="Matrix3_8hpp_source.php#l00133">133</a> of file <a class="el" href="Matrix3_8hpp_source.php">Matrix3.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Matrix3_8hpp_source.php">Matrix3.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer-fr.php");
?>
