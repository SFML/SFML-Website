<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::Drawable Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header-fr.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1Drawable.php">Drawable</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classsf_1_1Drawable-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::Drawable Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>Abstract base class for every object that can be drawn into a render window.  
 <a href="classsf_1_1Drawable.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Drawable_8hpp_source.php">Drawable.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Drawable:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Drawable.png" usemap="#sf::Drawable_map" alt=""/>
  <map id="sf::Drawable_map" name="sf::Drawable_map">
<area href="classsf_1_1PostFX.php" title="PostFX is used to apply a post effect to a window." alt="sf::PostFX" shape="rect" coords="0,56,82,80"/>
<area href="classsf_1_1Shape.php" title="Shape defines a drawable convex shape ; it also defines helper functions to draw simple shapes like l..." alt="sf::Shape" shape="rect" coords="92,56,174,80"/>
<area href="classsf_1_1Sprite.php" title="Sprite defines a sprite : texture, transformations, color, and draw on screen." alt="sf::Sprite" shape="rect" coords="184,56,266,80"/>
<area href="classsf_1_1String.php" title="String defines a graphical 2D text, that can be drawn on screen." alt="sf::String" shape="rect" coords="276,56,358,80"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a712de01505e04a03b93cf33ae004cdbc"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a712de01505e04a03b93cf33ae004cdbc">Drawable</a> (const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;Position=<a class="el" href="classsf_1_1Vector2.php">Vector2f</a>(0, 0), const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;<a class="el" href="classsf_1_1Drawable.php#a2a132c9f2f3736b7d0f6ea80303caacd">Scale</a>=<a class="el" href="classsf_1_1Vector2.php">Vector2f</a>(1, 1), float Rotation=0.f, const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;Col=<a class="el" href="classsf_1_1Color.php">Color</a>(255, 255, 255, 255))</td></tr>
<tr class="memdesc:a712de01505e04a03b93cf33ae004cdbc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a712de01505e04a03b93cf33ae004cdbc"></a><br/></td></tr>
<tr class="separator:a712de01505e04a03b93cf33ae004cdbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a906002f2df7beb5edbddf5bbef96f120"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a906002f2df7beb5edbddf5bbef96f120">~Drawable</a> ()</td></tr>
<tr class="memdesc:a906002f2df7beb5edbddf5bbef96f120"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <a href="#a906002f2df7beb5edbddf5bbef96f120"></a><br/></td></tr>
<tr class="separator:a906002f2df7beb5edbddf5bbef96f120"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a419da954b1f2ad1ac2ae0b9ab6e72589"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a419da954b1f2ad1ac2ae0b9ab6e72589">SetPosition</a> (float X, float Y)</td></tr>
<tr class="memdesc:a419da954b1f2ad1ac2ae0b9ab6e72589"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the position of the object (take 2 values)  <a href="#a419da954b1f2ad1ac2ae0b9ab6e72589"></a><br/></td></tr>
<tr class="separator:a419da954b1f2ad1ac2ae0b9ab6e72589"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2a279f3b13abf57cc25b2b4bd3b81ae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#ad2a279f3b13abf57cc25b2b4bd3b81ae">SetPosition</a> (const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;Position)</td></tr>
<tr class="memdesc:ad2a279f3b13abf57cc25b2b4bd3b81ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the position of the object (take a 2D vector)  <a href="#ad2a279f3b13abf57cc25b2b4bd3b81ae"></a><br/></td></tr>
<tr class="separator:ad2a279f3b13abf57cc25b2b4bd3b81ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8de7bfe092736083dcf23b0dbd22b1e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#ac8de7bfe092736083dcf23b0dbd22b1e">SetX</a> (float X)</td></tr>
<tr class="memdesc:ac8de7bfe092736083dcf23b0dbd22b1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the X position of the object.  <a href="#ac8de7bfe092736083dcf23b0dbd22b1e"></a><br/></td></tr>
<tr class="separator:ac8de7bfe092736083dcf23b0dbd22b1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83fecebe749c1aca9070eafd63e1a0c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a83fecebe749c1aca9070eafd63e1a0c9">SetY</a> (float Y)</td></tr>
<tr class="memdesc:a83fecebe749c1aca9070eafd63e1a0c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the Y position of the object.  <a href="#a83fecebe749c1aca9070eafd63e1a0c9"></a><br/></td></tr>
<tr class="separator:a83fecebe749c1aca9070eafd63e1a0c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b486c56c2bd137bac629f72fea66769"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a0b486c56c2bd137bac629f72fea66769">SetScale</a> (float ScaleX, float ScaleY)</td></tr>
<tr class="memdesc:a0b486c56c2bd137bac629f72fea66769"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the scale of the object (take 2 values)  <a href="#a0b486c56c2bd137bac629f72fea66769"></a><br/></td></tr>
<tr class="separator:a0b486c56c2bd137bac629f72fea66769"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84876c5ef7fa628c85c3c9e000e50aa1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a84876c5ef7fa628c85c3c9e000e50aa1">SetScale</a> (const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;<a class="el" href="classsf_1_1Drawable.php#a2a132c9f2f3736b7d0f6ea80303caacd">Scale</a>)</td></tr>
<tr class="memdesc:a84876c5ef7fa628c85c3c9e000e50aa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the scale of the object (take a 2D vector)  <a href="#a84876c5ef7fa628c85c3c9e000e50aa1"></a><br/></td></tr>
<tr class="separator:a84876c5ef7fa628c85c3c9e000e50aa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cafae61a1d23bddb059d64df0e1502f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a0cafae61a1d23bddb059d64df0e1502f">SetScaleX</a> (float FactorX)</td></tr>
<tr class="memdesc:a0cafae61a1d23bddb059d64df0e1502f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the X scale factor of the object.  <a href="#a0cafae61a1d23bddb059d64df0e1502f"></a><br/></td></tr>
<tr class="separator:a0cafae61a1d23bddb059d64df0e1502f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89e7793c74c656e5850b71d0ab34b8bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a89e7793c74c656e5850b71d0ab34b8bf">SetScaleY</a> (float FactorY)</td></tr>
<tr class="memdesc:a89e7793c74c656e5850b71d0ab34b8bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the Y scale factor of the object.  <a href="#a89e7793c74c656e5850b71d0ab34b8bf"></a><br/></td></tr>
<tr class="separator:a89e7793c74c656e5850b71d0ab34b8bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11ba1d92bc863af6d95831d216802f61"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a11ba1d92bc863af6d95831d216802f61">SetCenter</a> (float CenterX, float CenterY)</td></tr>
<tr class="memdesc:a11ba1d92bc863af6d95831d216802f61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the center of the object, in coordinates relative to the top-left of the object (take 2 values).  <a href="#a11ba1d92bc863af6d95831d216802f61"></a><br/></td></tr>
<tr class="separator:a11ba1d92bc863af6d95831d216802f61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a235e438555d8161f4995615f24fa0b11"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a235e438555d8161f4995615f24fa0b11">SetCenter</a> (const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;Center)</td></tr>
<tr class="memdesc:a235e438555d8161f4995615f24fa0b11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the center of the object, in coordinates relative to the top-left of the object (take a 2D vector).  <a href="#a235e438555d8161f4995615f24fa0b11"></a><br/></td></tr>
<tr class="separator:a235e438555d8161f4995615f24fa0b11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d06383770eb01ffecf3d1cae6fec0ec"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a6d06383770eb01ffecf3d1cae6fec0ec">SetRotation</a> (float Rotation)</td></tr>
<tr class="memdesc:a6d06383770eb01ffecf3d1cae6fec0ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the orientation of the object.  <a href="#a6d06383770eb01ffecf3d1cae6fec0ec"></a><br/></td></tr>
<tr class="separator:a6d06383770eb01ffecf3d1cae6fec0ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cae9f22220985e368a1b38af7644ffb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a8cae9f22220985e368a1b38af7644ffb">SetColor</a> (const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;Col)</td></tr>
<tr class="memdesc:a8cae9f22220985e368a1b38af7644ffb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the color of the object.  <a href="#a8cae9f22220985e368a1b38af7644ffb"></a><br/></td></tr>
<tr class="separator:a8cae9f22220985e368a1b38af7644ffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa6558b1ae27e29cb825028473707da5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#aaa6558b1ae27e29cb825028473707da5">SetBlendMode</a> (<a class="el" href="namespacesf_1_1Blend.php#a1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a> Mode)</td></tr>
<tr class="memdesc:aaa6558b1ae27e29cb825028473707da5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the blending mode for the object.  <a href="#aaa6558b1ae27e29cb825028473707da5"></a><br/></td></tr>
<tr class="separator:aaa6558b1ae27e29cb825028473707da5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5961d78ed4b550092c90de500cc04fe0"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a5961d78ed4b550092c90de500cc04fe0">GetPosition</a> () const </td></tr>
<tr class="memdesc:a5961d78ed4b550092c90de500cc04fe0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the position of the object.  <a href="#a5961d78ed4b550092c90de500cc04fe0"></a><br/></td></tr>
<tr class="separator:a5961d78ed4b550092c90de500cc04fe0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ddb66a4509565b05bf30ec1609c2a55"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a6ddb66a4509565b05bf30ec1609c2a55">GetScale</a> () const </td></tr>
<tr class="memdesc:a6ddb66a4509565b05bf30ec1609c2a55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current scale of the object.  <a href="#a6ddb66a4509565b05bf30ec1609c2a55"></a><br/></td></tr>
<tr class="separator:a6ddb66a4509565b05bf30ec1609c2a55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5288b0a217fa39e80ed4a875bffcd30a"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a5288b0a217fa39e80ed4a875bffcd30a">GetCenter</a> () const </td></tr>
<tr class="memdesc:a5288b0a217fa39e80ed4a875bffcd30a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the center of the object.  <a href="#a5288b0a217fa39e80ed4a875bffcd30a"></a><br/></td></tr>
<tr class="separator:a5288b0a217fa39e80ed4a875bffcd30a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e82bec096673bccf7ceac5207617017"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a4e82bec096673bccf7ceac5207617017">GetRotation</a> () const </td></tr>
<tr class="memdesc:a4e82bec096673bccf7ceac5207617017"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the orientation of the object.  <a href="#a4e82bec096673bccf7ceac5207617017"></a><br/></td></tr>
<tr class="separator:a4e82bec096673bccf7ceac5207617017"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ebc2bd85e3e97a0ec18dcb18bb6128f"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a9ebc2bd85e3e97a0ec18dcb18bb6128f">GetColor</a> () const </td></tr>
<tr class="memdesc:a9ebc2bd85e3e97a0ec18dcb18bb6128f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the color of the object.  <a href="#a9ebc2bd85e3e97a0ec18dcb18bb6128f"></a><br/></td></tr>
<tr class="separator:a9ebc2bd85e3e97a0ec18dcb18bb6128f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6446c4717a2800cad85db55cb55409a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacesf_1_1Blend.php#a1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#ab6446c4717a2800cad85db55cb55409a">GetBlendMode</a> () const </td></tr>
<tr class="memdesc:ab6446c4717a2800cad85db55cb55409a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current blending mode.  <a href="#ab6446c4717a2800cad85db55cb55409a"></a><br/></td></tr>
<tr class="separator:ab6446c4717a2800cad85db55cb55409a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501df9af956362b3e3769d80381c051b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a501df9af956362b3e3769d80381c051b">Move</a> (float OffsetX, float OffsetY)</td></tr>
<tr class="memdesc:a501df9af956362b3e3769d80381c051b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move the object of a given offset (take 2 values)  <a href="#a501df9af956362b3e3769d80381c051b"></a><br/></td></tr>
<tr class="separator:a501df9af956362b3e3769d80381c051b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c0ac0851d6b0ebed80ae9641ff93161"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a3c0ac0851d6b0ebed80ae9641ff93161">Move</a> (const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;Offset)</td></tr>
<tr class="memdesc:a3c0ac0851d6b0ebed80ae9641ff93161"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move the object of a given offset (take a 2D vector)  <a href="#a3c0ac0851d6b0ebed80ae9641ff93161"></a><br/></td></tr>
<tr class="separator:a3c0ac0851d6b0ebed80ae9641ff93161"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a132c9f2f3736b7d0f6ea80303caacd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a2a132c9f2f3736b7d0f6ea80303caacd">Scale</a> (float FactorX, float FactorY)</td></tr>
<tr class="memdesc:a2a132c9f2f3736b7d0f6ea80303caacd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the object (take 2 values)  <a href="#a2a132c9f2f3736b7d0f6ea80303caacd"></a><br/></td></tr>
<tr class="separator:a2a132c9f2f3736b7d0f6ea80303caacd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac969d85eaf63f072de9e963bd973e91a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#ac969d85eaf63f072de9e963bd973e91a">Scale</a> (const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;Factor)</td></tr>
<tr class="memdesc:ac969d85eaf63f072de9e963bd973e91a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the object (take a 2D vector)  <a href="#ac969d85eaf63f072de9e963bd973e91a"></a><br/></td></tr>
<tr class="separator:ac969d85eaf63f072de9e963bd973e91a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e7d558d0ef488485a2d3f885ff2b419"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a3e7d558d0ef488485a2d3f885ff2b419">Rotate</a> (float Angle)</td></tr>
<tr class="memdesc:a3e7d558d0ef488485a2d3f885ff2b419"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate the object.  <a href="#a3e7d558d0ef488485a2d3f885ff2b419"></a><br/></td></tr>
<tr class="separator:a3e7d558d0ef488485a2d3f885ff2b419"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a809f25ae0b3a2015ec8a44fe9f5a0008"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a809f25ae0b3a2015ec8a44fe9f5a0008">TransformToLocal</a> (const <a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a> &amp;Point) const </td></tr>
<tr class="memdesc:a809f25ae0b3a2015ec8a44fe9f5a0008"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transform a point from global coordinates into local coordinates (ie it applies the inverse of object's center, translation, rotation and scale to the point)  <a href="#a809f25ae0b3a2015ec8a44fe9f5a0008"></a><br/></td></tr>
<tr class="separator:a809f25ae0b3a2015ec8a44fe9f5a0008"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3cb6e62921ce13806c27dc727f8945"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#afe3cb6e62921ce13806c27dc727f8945">TransformToGlobal</a> (const <a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a> &amp;Point) const </td></tr>
<tr class="memdesc:afe3cb6e62921ce13806c27dc727f8945"><td class="mdescLeft">&#160;</td><td class="mdescRight">Transform a point from local coordinates into global coordinates (ie it applies the object's center, translation, rotation and scale to the point)  <a href="#afe3cb6e62921ce13806c27dc727f8945"></a><br/></td></tr>
<tr class="separator:afe3cb6e62921ce13806c27dc727f8945"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ac9ada41547bee7761836f36619712d73"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#ac9ada41547bee7761836f36619712d73">GetMatrix</a> () const </td></tr>
<tr class="memdesc:ac9ada41547bee7761836f36619712d73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the transform matrix of the drawable.  <a href="#ac9ada41547bee7761836f36619712d73"></a><br/></td></tr>
<tr class="separator:ac9ada41547bee7761836f36619712d73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7de45b8b56658643d86cffdfdaf3366e"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Drawable.php#a7de45b8b56658643d86cffdfdaf3366e">GetInverseMatrix</a> () const </td></tr>
<tr class="memdesc:a7de45b8b56658643d86cffdfdaf3366e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the inverse transform matrix of the drawable.  <a href="#a7de45b8b56658643d86cffdfdaf3366e"></a><br/></td></tr>
<tr class="separator:a7de45b8b56658643d86cffdfdaf3366e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:aa5afc6f82b7b587ed5ada4d227ce32aa"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa5afc6f82b7b587ed5ada4d227ce32aa"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>RenderTarget</b></td></tr>
<tr class="separator:aa5afc6f82b7b587ed5ada4d227ce32aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Abstract base class for every object that can be drawn into a render window. </p>

<p>Definition at line <a class="el" href="Drawable_8hpp_source.php#l00058">58</a> of file <a class="el" href="Drawable_8hpp_source.php">Drawable.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a712de01505e04a03b93cf33ae004cdbc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Drawable::Drawable </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Position</em> = <code><a class="el" href="classsf_1_1Vector2.php">Vector2f</a>(0,&#160;0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Scale</em> = <code><a class="el" href="classsf_1_1Vector2.php">Vector2f</a>(1,&#160;1)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>Rotation</em> = <code>0.f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>Col</em> = <code><a class="el" href="classsf_1_1Color.php">Color</a>(255,&#160;255,&#160;255,&#160;255)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Position</td><td>: Position of the object (0, 0 by default) </td></tr>
    <tr><td class="paramname">Scale</td><td>: Scale factor (1, 1 by default) </td></tr>
    <tr><td class="paramname">Rotation</td><td>: Orientation, in degrees (0 by default) </td></tr>
    <tr><td class="paramname">Col</td><td>: <a class="el" href="classsf_1_1Color.php" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> of the object (white by default) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a906002f2df7beb5edbddf5bbef96f120"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual sf::Drawable::~Drawable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Virtual destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ab6446c4717a2800cad85db55cb55409a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacesf_1_1Blend.php#a1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a> sf::Drawable::GetBlendMode </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the current blending mode. </p>
<dl class="section return"><dt>Returns</dt><dd>Current blending mode </dd></dl>

</div>
</div>
<a class="anchor" id="a5288b0a217fa39e80ed4a875bffcd30a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a>&amp; sf::Drawable::GetCenter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the center of the object. </p>
<dl class="section return"><dt>Returns</dt><dd>Current position of the center </dd></dl>

</div>
</div>
<a class="anchor" id="a9ebc2bd85e3e97a0ec18dcb18bb6128f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.php">Color</a>&amp; sf::Drawable::GetColor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the color of the object. </p>
<dl class="section return"><dt>Returns</dt><dd>Current color </dd></dl>

</div>
</div>
<a class="anchor" id="a7de45b8b56658643d86cffdfdaf3366e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a>&amp; sf::Drawable::GetInverseMatrix </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the inverse transform matrix of the drawable. </p>
<dl class="section return"><dt>Returns</dt><dd>Inverse transform matrix </dd></dl>

</div>
</div>
<a class="anchor" id="ac9ada41547bee7761836f36619712d73"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Matrix3.php">Matrix3</a>&amp; sf::Drawable::GetMatrix </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the transform matrix of the drawable. </p>
<dl class="section return"><dt>Returns</dt><dd>Transform matrix </dd></dl>

</div>
</div>
<a class="anchor" id="a5961d78ed4b550092c90de500cc04fe0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a>&amp; sf::Drawable::GetPosition </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the position of the object. </p>
<dl class="section return"><dt>Returns</dt><dd>Current position </dd></dl>

</div>
</div>
<a class="anchor" id="a4e82bec096673bccf7ceac5207617017"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Drawable::GetRotation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the orientation of the object. </p>
<p>Rotation is always in the range [0, 360]</p>
<dl class="section return"><dt>Returns</dt><dd>Current rotation, in degrees </dd></dl>

</div>
</div>
<a class="anchor" id="a6ddb66a4509565b05bf30ec1609c2a55"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a>&amp; sf::Drawable::GetScale </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the current scale of the object. </p>
<dl class="section return"><dt>Returns</dt><dd>Current scale factor (always positive) </dd></dl>

</div>
</div>
<a class="anchor" id="a501df9af956362b3e3769d80381c051b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Move </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>OffsetX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>OffsetY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Move the object of a given offset (take 2 values) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">OffsetX</td><td>: X offset </td></tr>
    <tr><td class="paramname">OffsetY</td><td>: Y offset </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3c0ac0851d6b0ebed80ae9641ff93161"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Move </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Move the object of a given offset (take a 2D vector) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Offset</td><td>: Amount of units to move the object of </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3e7d558d0ef488485a2d3f885ff2b419"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Rotate </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>Angle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rotate the object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Angle</td><td>: Angle of rotation, in degrees </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2a132c9f2f3736b7d0f6ea80303caacd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Scale </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>FactorX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>FactorY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Scale the object (take 2 values) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">FactorX</td><td>: Scaling factor on X (must be strictly positive) </td></tr>
    <tr><td class="paramname">FactorY</td><td>: Scaling factor on Y (must be strictly positive) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac969d85eaf63f072de9e963bd973e91a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::Scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Scale the object (take a 2D vector) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Factor</td><td>: Scaling factors (both values must be strictly positive) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aaa6558b1ae27e29cb825028473707da5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetBlendMode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacesf_1_1Blend.php#a1a2fa89de4bb0d82b2eb30399fe575ca">Blend::Mode</a>&#160;</td>
          <td class="paramname"><em>Mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the blending mode for the object. </p>
<p>The default blend mode is <a class="el" href="namespacesf_1_1Blend.php#a1a2fa89de4bb0d82b2eb30399fe575caa23075ecfbf49e19b713cc18188a7661a" title="Pixel = Src * a + Dest * (1 - a)">Blend::Alpha</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Mode</td><td>: New blending mode </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a11ba1d92bc863af6d95831d216802f61"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetCenter </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>CenterX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>CenterY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the center of the object, in coordinates relative to the top-left of the object (take 2 values). </p>
<p>The default center is (0, 0)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">CenterX</td><td>: X coordinate of the center </td></tr>
    <tr><td class="paramname">CenterY</td><td>: Y coordinate of the center </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a235e438555d8161f4995615f24fa0b11"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetCenter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Center</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the center of the object, in coordinates relative to the top-left of the object (take a 2D vector). </p>
<p>The default center is (0, 0)</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Center</td><td>: New center </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8cae9f22220985e368a1b38af7644ffb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>Col</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the color of the object. </p>
<p>The default color is white</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Col</td><td>: New color </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a419da954b1f2ad1ac2ae0b9ab6e72589"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetPosition </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>Y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the position of the object (take 2 values) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>: New X coordinate </td></tr>
    <tr><td class="paramname">Y</td><td>: New Y coordinate </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad2a279f3b13abf57cc25b2b4bd3b81ae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetPosition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the position of the object (take a 2D vector) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Position</td><td>: New position </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6d06383770eb01ffecf3d1cae6fec0ec"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetRotation </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>Rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the orientation of the object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Rotation</td><td>: Angle of rotation, in degrees </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0b486c56c2bd137bac629f72fea66769"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScale </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>ScaleX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>ScaleY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the scale of the object (take 2 values) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ScaleX</td><td>: New horizontal scale (must be strictly positive) </td></tr>
    <tr><td class="paramname">ScaleY</td><td>: New vertical scale (must be strictly positive) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a84876c5ef7fa628c85c3c9e000e50aa1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Scale</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the scale of the object (take a 2D vector) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Scale</td><td>: New scale (both values must be strictly positive) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0cafae61a1d23bddb059d64df0e1502f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScaleX </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>FactorX</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the X scale factor of the object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>: New X scale factor </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a89e7793c74c656e5850b71d0ab34b8bf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetScaleY </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>FactorY</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the Y scale factor of the object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Y</td><td>: New Y scale factor </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac8de7bfe092736083dcf23b0dbd22b1e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetX </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>X</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the X position of the object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>: New X coordinate </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a83fecebe749c1aca9070eafd63e1a0c9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Drawable::SetY </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>Y</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the Y position of the object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Y</td><td>: New Y coordinate </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afe3cb6e62921ce13806c27dc727f8945"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a> sf::Drawable::TransformToGlobal </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transform a point from local coordinates into global coordinates (ie it applies the object's center, translation, rotation and scale to the point) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Point</td><td>: Point to transform</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Transformed point </dd></dl>

</div>
</div>
<a class="anchor" id="a809f25ae0b3a2015ec8a44fe9f5a0008"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a> sf::Drawable::TransformToLocal </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>Point</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transform a point from global coordinates into local coordinates (ie it applies the inverse of object's center, translation, rotation and scale to the point) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Point</td><td>: Point to transform</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Transformed point </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Drawable_8hpp_source.php">Drawable.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer-fr.php");
?>
