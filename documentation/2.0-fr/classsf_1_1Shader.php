<?php
    $version = '2.0'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::Shader Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header-fr.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.php"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1Shader.php">Shader</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="classsf_1_1Shader-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::Shader Class Reference<div class="ingroups"><a class="el" href="group__graphics.php">Graphics module</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classsf_1_1Shader.php" title="Shader class (vertex and fragment)">Shader</a> class (vertex and fragment)  
 <a href="classsf_1_1Shader.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Shader_8hpp_source.php">Shader.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Shader:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Shader.png" usemap="#sf::Shader_map" alt=""/>
  <map id="sf::Shader_map" name="sf::Shader_map">
<area href="classsf_1_1GlResource.php" title="Base class for classes that require an OpenGL context." alt="sf::GlResource" shape="rect" coords="0,0,105,24"/>
<area href="classsf_1_1NonCopyable.php" title="Utility class that makes any derived class non-copyable." alt="sf::NonCopyable" shape="rect" coords="115,0,220,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsf_1_1Shader_1_1CurrentTextureType.php">CurrentTextureType</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Special type/value that can be passed to setParameter, and that represents the texture of the object being drawn.  <a href="structsf_1_1Shader_1_1CurrentTextureType.php#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:afaa1aa65e5de37b74d047da9def9f9b3"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3">Type</a> { <br/>
&#160;&#160;<a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3a8718008f827eb32e29bbdd1791c62dce">Vertex</a>, 
<br/>
&#160;&#160;<a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3ace6e88eec3a56b2e55ee3c8e64e9b89a">Fragment</a>
<br/>
 }</td></tr>
<tr class="memdesc:afaa1aa65e5de37b74d047da9def9f9b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Types of shaders.  <a href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3">More...</a><br/></td></tr>
<tr class="separator:afaa1aa65e5de37b74d047da9def9f9b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1d7f28f26b4122959fcafec871c2c3c5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a1d7f28f26b4122959fcafec871c2c3c5">Shader</a> ()</td></tr>
<tr class="memdesc:a1d7f28f26b4122959fcafec871c2c3c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a1d7f28f26b4122959fcafec871c2c3c5"></a><br/></td></tr>
<tr class="separator:a1d7f28f26b4122959fcafec871c2c3c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bac6cc8b046ecd8fb967c145a2380e6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a4bac6cc8b046ecd8fb967c145a2380e6">~Shader</a> ()</td></tr>
<tr class="memdesc:a4bac6cc8b046ecd8fb967c145a2380e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a4bac6cc8b046ecd8fb967c145a2380e6"></a><br/></td></tr>
<tr class="separator:a4bac6cc8b046ecd8fb967c145a2380e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a053a5632848ebaca2fcd8ba29abe9e6e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a053a5632848ebaca2fcd8ba29abe9e6e">loadFromFile</a> (const std::string &amp;filename, <a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3">Type</a> type)</td></tr>
<tr class="memdesc:a053a5632848ebaca2fcd8ba29abe9e6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load either the vertex or fragment shader from a file.  <a href="#a053a5632848ebaca2fcd8ba29abe9e6e"></a><br/></td></tr>
<tr class="separator:a053a5632848ebaca2fcd8ba29abe9e6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9d7289966fcef562eeb92271c03e3dc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#ac9d7289966fcef562eeb92271c03e3dc">loadFromFile</a> (const std::string &amp;vertexShaderFilename, const std::string &amp;fragmentShaderFilename)</td></tr>
<tr class="memdesc:ac9d7289966fcef562eeb92271c03e3dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load both the vertex and fragment shaders from files.  <a href="#ac9d7289966fcef562eeb92271c03e3dc"></a><br/></td></tr>
<tr class="separator:ac9d7289966fcef562eeb92271c03e3dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac92d46bf71dff2d791117e4e472148aa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#ac92d46bf71dff2d791117e4e472148aa">loadFromMemory</a> (const std::string &amp;shader, <a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3">Type</a> type)</td></tr>
<tr class="memdesc:ac92d46bf71dff2d791117e4e472148aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load either the vertex or fragment shader from a source code in memory.  <a href="#ac92d46bf71dff2d791117e4e472148aa"></a><br/></td></tr>
<tr class="separator:ac92d46bf71dff2d791117e4e472148aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae34e94070d7547a890166b7993658a9b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#ae34e94070d7547a890166b7993658a9b">loadFromMemory</a> (const std::string &amp;vertexShader, const std::string &amp;fragmentShader)</td></tr>
<tr class="memdesc:ae34e94070d7547a890166b7993658a9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load both the vertex and fragment shaders from source codes in memory.  <a href="#ae34e94070d7547a890166b7993658a9b"></a><br/></td></tr>
<tr class="separator:ae34e94070d7547a890166b7993658a9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ee1b130c0606e4f8bcdf65c1efc2a53"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a2ee1b130c0606e4f8bcdf65c1efc2a53">loadFromStream</a> (<a class="el" href="classsf_1_1InputStream.php">InputStream</a> &amp;stream, <a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3">Type</a> type)</td></tr>
<tr class="memdesc:a2ee1b130c0606e4f8bcdf65c1efc2a53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load either the vertex or fragment shader from a custom stream.  <a href="#a2ee1b130c0606e4f8bcdf65c1efc2a53"></a><br/></td></tr>
<tr class="separator:a2ee1b130c0606e4f8bcdf65c1efc2a53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b7958159ffb5596c4babc3052e35465"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a3b7958159ffb5596c4babc3052e35465">loadFromStream</a> (<a class="el" href="classsf_1_1InputStream.php">InputStream</a> &amp;vertexShaderStream, <a class="el" href="classsf_1_1InputStream.php">InputStream</a> &amp;fragmentShaderStream)</td></tr>
<tr class="memdesc:a3b7958159ffb5596c4babc3052e35465"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load both the vertex and fragment shaders from custom streams.  <a href="#a3b7958159ffb5596c4babc3052e35465"></a><br/></td></tr>
<tr class="separator:a3b7958159ffb5596c4babc3052e35465"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47e4dd78f0752ae08664b4ee616db1cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a47e4dd78f0752ae08664b4ee616db1cf">setParameter</a> (const std::string &amp;name, float x)</td></tr>
<tr class="memdesc:a47e4dd78f0752ae08664b4ee616db1cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a float parameter of the shader.  <a href="#a47e4dd78f0752ae08664b4ee616db1cf"></a><br/></td></tr>
<tr class="separator:a47e4dd78f0752ae08664b4ee616db1cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8d379f40810b8e3eadebee81aedd231"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#ab8d379f40810b8e3eadebee81aedd231">setParameter</a> (const std::string &amp;name, float x, float y)</td></tr>
<tr class="memdesc:ab8d379f40810b8e3eadebee81aedd231"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a 2-components vector parameter of the shader.  <a href="#ab8d379f40810b8e3eadebee81aedd231"></a><br/></td></tr>
<tr class="separator:ab8d379f40810b8e3eadebee81aedd231"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e36e044d6b8adca8339f40c5a4b1801"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a7e36e044d6b8adca8339f40c5a4b1801">setParameter</a> (const std::string &amp;name, float x, float y, float z)</td></tr>
<tr class="memdesc:a7e36e044d6b8adca8339f40c5a4b1801"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a 3-components vector parameter of the shader.  <a href="#a7e36e044d6b8adca8339f40c5a4b1801"></a><br/></td></tr>
<tr class="separator:a7e36e044d6b8adca8339f40c5a4b1801"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb468f1bc2d26750b96b74f1e19027fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#aeb468f1bc2d26750b96b74f1e19027fb">setParameter</a> (const std::string &amp;name, float x, float y, float z, float w)</td></tr>
<tr class="memdesc:aeb468f1bc2d26750b96b74f1e19027fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a 4-components vector parameter of the shader.  <a href="#aeb468f1bc2d26750b96b74f1e19027fb"></a><br/></td></tr>
<tr class="separator:aeb468f1bc2d26750b96b74f1e19027fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ac473ece2c6fa26dc5032c07fd7288e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a3ac473ece2c6fa26dc5032c07fd7288e">setParameter</a> (const std::string &amp;name, const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;vector)</td></tr>
<tr class="memdesc:a3ac473ece2c6fa26dc5032c07fd7288e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a 2-components vector parameter of the shader.  <a href="#a3ac473ece2c6fa26dc5032c07fd7288e"></a><br/></td></tr>
<tr class="separator:a3ac473ece2c6fa26dc5032c07fd7288e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87d4a0c6dc70ae68aecc0dda3f343c07"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a87d4a0c6dc70ae68aecc0dda3f343c07">setParameter</a> (const std::string &amp;name, const <a class="el" href="classsf_1_1Vector3.php">Vector3f</a> &amp;vector)</td></tr>
<tr class="memdesc:a87d4a0c6dc70ae68aecc0dda3f343c07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a 3-components vector parameter of the shader.  <a href="#a87d4a0c6dc70ae68aecc0dda3f343c07"></a><br/></td></tr>
<tr class="separator:a87d4a0c6dc70ae68aecc0dda3f343c07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8618119ed4399df3fd33e78ee96b4fc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#aa8618119ed4399df3fd33e78ee96b4fc">setParameter</a> (const std::string &amp;name, const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;color)</td></tr>
<tr class="memdesc:aa8618119ed4399df3fd33e78ee96b4fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a color parameter of the shader.  <a href="#aa8618119ed4399df3fd33e78ee96b4fc"></a><br/></td></tr>
<tr class="separator:aa8618119ed4399df3fd33e78ee96b4fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39c387cc30e249b22a0c478703b8cc9a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a39c387cc30e249b22a0c478703b8cc9a">setParameter</a> (const std::string &amp;name, const <a class="el" href="classsf_1_1Transform.php">sf::Transform</a> &amp;transform)</td></tr>
<tr class="memdesc:a39c387cc30e249b22a0c478703b8cc9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a matrix parameter of the shader.  <a href="#a39c387cc30e249b22a0c478703b8cc9a"></a><br/></td></tr>
<tr class="separator:a39c387cc30e249b22a0c478703b8cc9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f58ab5c0a1084f238dfcec86602daa1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a7f58ab5c0a1084f238dfcec86602daa1">setParameter</a> (const std::string &amp;name, const <a class="el" href="classsf_1_1Texture.php">Texture</a> &amp;texture)</td></tr>
<tr class="memdesc:a7f58ab5c0a1084f238dfcec86602daa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a texture parameter of the shader.  <a href="#a7f58ab5c0a1084f238dfcec86602daa1"></a><br/></td></tr>
<tr class="separator:a7f58ab5c0a1084f238dfcec86602daa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af06b4cba0bab915fa01032b063909044"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#af06b4cba0bab915fa01032b063909044">setParameter</a> (const std::string &amp;name, <a class="el" href="structsf_1_1Shader_1_1CurrentTextureType.php">CurrentTextureType</a>)</td></tr>
<tr class="memdesc:af06b4cba0bab915fa01032b063909044"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change a texture parameter of the shader.  <a href="#af06b4cba0bab915fa01032b063909044"></a><br/></td></tr>
<tr class="separator:af06b4cba0bab915fa01032b063909044"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a09778f78afcbeb854d608c8dacd8ea30"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#a09778f78afcbeb854d608c8dacd8ea30">bind</a> (const <a class="el" href="classsf_1_1Shader.php">Shader</a> *shader)</td></tr>
<tr class="memdesc:a09778f78afcbeb854d608c8dacd8ea30"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind a shader for rendering.  <a href="#a09778f78afcbeb854d608c8dacd8ea30"></a><br/></td></tr>
<tr class="separator:a09778f78afcbeb854d608c8dacd8ea30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad22474690bafe4a305c1b9826b1bd86a"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Shader.php#ad22474690bafe4a305c1b9826b1bd86a">isAvailable</a> ()</td></tr>
<tr class="memdesc:ad22474690bafe4a305c1b9826b1bd86a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether or not the system supports shaders.  <a href="#ad22474690bafe4a305c1b9826b1bd86a"></a><br/></td></tr>
<tr class="separator:ad22474690bafe4a305c1b9826b1bd86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:ac84c7953eec2e19358ea6e2cc5385b8d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac84c7953eec2e19358ea6e2cc5385b8d"></a>
static <a class="el" href="structsf_1_1Shader_1_1CurrentTextureType.php">CurrentTextureType</a>&#160;</td><td class="memItemRight" valign="bottom"><b>CurrentTexture</b></td></tr>
<tr class="separator:ac84c7953eec2e19358ea6e2cc5385b8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:ae0efa7935241644608ca32ba47b22a33"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1GlResource.php#ae0efa7935241644608ca32ba47b22a33">ensureGlContext</a> ()</td></tr>
<tr class="memdesc:ae0efa7935241644608ca32ba47b22a33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make sure that a valid OpenGL context exists in the current thread.  <a href="#ae0efa7935241644608ca32ba47b22a33"></a><br/></td></tr>
<tr class="separator:ae0efa7935241644608ca32ba47b22a33"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classsf_1_1Shader.php" title="Shader class (vertex and fragment)">Shader</a> class (vertex and fragment) </p>
<p>Shaders are programs written using a specific language, executed directly by the graphics card and allowing to apply real-time operations to the rendered entities.</p>
<p>There are two kinds of shaders: </p>
<ul>
<li><a class="el" href="classsf_1_1Vertex.php" title="Define a point with color and texture coordinates.">Vertex</a> shaders, that process vertices </li>
<li>Fragment (pixel) shaders, that process pixels</li>
</ul>
<p>A <a class="el" href="classsf_1_1Shader.php" title="Shader class (vertex and fragment)">sf::Shader</a> can be composed of either a vertex shader alone, a fragment shader alone, or both combined (see the variants of the load functions).</p>
<p>Shaders are written in GLSL, which is a C-like language dedicated to OpenGL shaders. You'll probably need to learn its basics before writing your own shaders for SFML.</p>
<p>Like any C/C++ program, a shader has its own variables that you can set from your C++ application. <a class="el" href="classsf_1_1Shader.php" title="Shader class (vertex and fragment)">sf::Shader</a> handles 5 different types of variables: </p>
<ul>
<li>floats </li>
<li>vectors (2, 3 or 4 components) </li>
<li>colors </li>
<li>textures </li>
<li>transforms (matrices)</li>
</ul>
<p>The value of the variables can be changed at any time with the various overloads of the setParameter function: </p>
<div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;offset&quot;</span>, 2.f);</div>
<div class="line">shader.setParameter(<span class="stringliteral">&quot;point&quot;</span>, 0.5f, 0.8f, 0.3f);</div>
<div class="line">shader.setParameter(<span class="stringliteral">&quot;color&quot;</span>, <a class="code" href="classsf_1_1Color.php" title="Utility class for manpulating RGBA colors.">sf::Color</a>(128, 50, 255));</div>
<div class="line">shader.setParameter(<span class="stringliteral">&quot;matrix&quot;</span>, transform); <span class="comment">// transform is a sf::Transform</span></div>
<div class="line">shader.setParameter(<span class="stringliteral">&quot;overlay&quot;</span>, texture); <span class="comment">// texture is a sf::Texture</span></div>
<div class="line">shader.setParameter(<span class="stringliteral">&quot;texture&quot;</span>, sf::Shader::CurrentTexture);</div>
</div><!-- fragment --><p>The special Shader::CurrentTexture argument maps the given texture variable to the current texture of the object being drawn (which cannot be known in advance).</p>
<p>To apply a shader to a drawable, you must pass it as an additional parameter to the Draw function: </p>
<div class="fragment"><div class="line">window.draw(sprite, &amp;shader);</div>
</div><!-- fragment --><p>... which is in fact just a shortcut for this: </p>
<div class="fragment"><div class="line"><a class="code" href="classsf_1_1RenderStates.php" title="Define the states used for drawing to a RenderTarget.">sf::RenderStates</a> states;</div>
<div class="line">states.<a class="code" href="classsf_1_1RenderStates.php#ad4f79ecdd0c60ed0d24fbe555b221bd8" title="Shader.">shader</a> = &amp;shader;</div>
<div class="line">window.draw(sprite, states);</div>
</div><!-- fragment --><p>In the code above we pass a pointer to the shader, because it may be null (which means "no shader").</p>
<p>Shaders can be used on any drawable, but some combinations are not interesting. For example, using a vertex shader on a <a class="el" href="classsf_1_1Sprite.php" title="Drawable representation of a texture, with its own transformations, color, etc.">sf::Sprite</a> is limited because there are only 4 vertices, the sprite would have to be subdivided in order to apply wave effects. Another bad example is a fragment shader with <a class="el" href="classsf_1_1Text.php" title="Graphical text that can be drawn to a render target.">sf::Text</a>: the texture of the text is not the actual text that you see on screen, it is a big texture containing all the characters of the font in an arbitrary order; thus, texture lookups on pixels other than the current one may not give you the expected result.</p>
<p>Shaders can also be used to apply global post-effects to the current contents of the target (like the old sf::PostFx class in SFML 1). This can be done in two different ways: </p>
<ul>
<li>draw everything to a <a class="el" href="classsf_1_1RenderTexture.php" title="Target for off-screen 2D rendering into a texture.">sf::RenderTexture</a>, then draw it to the main target using the shader </li>
<li>draw everything directly to the main target, then use sf::Texture::update(Window&amp;) to copy its contents to a texture and draw it to the main target using the shader</li>
</ul>
<p>The first technique is more optimized because it doesn't involve retrieving the target's pixels to system memory, but the second one doesn't impact the rendering process and can be easily inserted anywhere without impacting all the code.</p>
<p>Like <a class="el" href="classsf_1_1Texture.php" title="Image living on the graphics card that can be used for drawing.">sf::Texture</a> that can be used as a raw OpenGL texture, <a class="el" href="classsf_1_1Shader.php" title="Shader class (vertex and fragment)">sf::Shader</a> can also be used directly as a raw shader for custom OpenGL geometry. </p>
<div class="fragment"><div class="line"><a class="code" href="classsf_1_1Shader.php#a09778f78afcbeb854d608c8dacd8ea30" title="Bind a shader for rendering.">sf::Shader::bind</a>(&amp;shader);</div>
<div class="line">... render OpenGL geometry ...</div>
<div class="line">sf::Shader::bind(NULL);</div>
</div><!-- fragment --> 
<p>Definition at line <a class="el" href="Shader_8hpp_source.php#l00051">51</a> of file <a class="el" href="Shader_8hpp_source.php">Shader.hpp</a>.</p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a class="anchor" id="afaa1aa65e5de37b74d047da9def9f9b3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3">sf::Shader::Type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Types of shaders. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="afaa1aa65e5de37b74d047da9def9f9b3a8718008f827eb32e29bbdd1791c62dce"></a>Vertex</em>&nbsp;</td><td>
<p><a class="el" href="classsf_1_1Vertex.php" title="Define a point with color and texture coordinates.">Vertex</a> shader. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="afaa1aa65e5de37b74d047da9def9f9b3ace6e88eec3a56b2e55ee3c8e64e9b89a"></a>Fragment</em>&nbsp;</td><td>
<p>Fragment (pixel) shader. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="Shader_8hpp_source.php#l00059">59</a> of file <a class="el" href="Shader_8hpp_source.php">Shader.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a1d7f28f26b4122959fcafec871c2c3c5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Shader::Shader </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<p>This constructor creates an invalid shader. </p>

</div>
</div>
<a class="anchor" id="a4bac6cc8b046ecd8fb967c145a2380e6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Shader::~Shader </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a09778f78afcbeb854d608c8dacd8ea30"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void sf::Shader::bind </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Shader.php">Shader</a> *&#160;</td>
          <td class="paramname"><em>shader</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bind a shader for rendering. </p>
<p>This function is not part of the graphics API, it mustn't be used when drawing SFML entities. It must be used only if you mix <a class="el" href="classsf_1_1Shader.php" title="Shader class (vertex and fragment)">sf::Shader</a> with OpenGL code.</p>
<div class="fragment"><div class="line"><a class="code" href="classsf_1_1Shader.php" title="Shader class (vertex and fragment)">sf::Shader</a> s1, s2;</div>
<div class="line">...</div>
<div class="line">sf::Shader::bind(&amp;s1);</div>
<div class="line"><span class="comment">// draw OpenGL stuff that use s1...</span></div>
<div class="line"><a class="code" href="classsf_1_1Shader.php#a09778f78afcbeb854d608c8dacd8ea30" title="Bind a shader for rendering.">sf::Shader::bind</a>(&amp;s2);</div>
<div class="line"><span class="comment">// draw OpenGL stuff that use s2...</span></div>
<div class="line"><a class="code" href="classsf_1_1Shader.php#a09778f78afcbeb854d608c8dacd8ea30" title="Bind a shader for rendering.">sf::Shader::bind</a>(NULL);</div>
<div class="line"><span class="comment">// draw OpenGL stuff that use no shader...</span></div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">shader</td><td><a class="el" href="classsf_1_1Shader.php" title="Shader class (vertex and fragment)">Shader</a> to bind, can be null to use no shader </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad22474690bafe4a305c1b9826b1bd86a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool sf::Shader::isAvailable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tell whether or not the system supports shaders. </p>
<p>This function should always be called before using the shader features. If it returns false, then any attempt to use <a class="el" href="classsf_1_1Shader.php" title="Shader class (vertex and fragment)">sf::Shader</a> will fail.</p>
<dl class="section return"><dt>Returns</dt><dd>True if shaders are supported, false otherwise </dd></dl>

</div>
</div>
<a class="anchor" id="a053a5632848ebaca2fcd8ba29abe9e6e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Shader::loadFromFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3">Type</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load either the vertex or fragment shader from a file. </p>
<p>This function loads a single shader, either vertex or fragment, identified by the second argument. The source must be a text file containing a valid shader in GLSL language. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Path of the vertex or fragment shader file to load </td></tr>
    <tr><td class="paramname">type</td><td>Type of shader (vertex or fragment)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading succeeded, false if it failed</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classsf_1_1Shader.php#ac92d46bf71dff2d791117e4e472148aa" title="Load either the vertex or fragment shader from a source code in memory.">loadFromMemory</a>, <a class="el" href="classsf_1_1Shader.php#a2ee1b130c0606e4f8bcdf65c1efc2a53" title="Load either the vertex or fragment shader from a custom stream.">loadFromStream</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac9d7289966fcef562eeb92271c03e3dc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Shader::loadFromFile </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>vertexShaderFilename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fragmentShaderFilename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load both the vertex and fragment shaders from files. </p>
<p>This function loads both the vertex and the fragment shaders. If one of them fails to load, the shader is left empty (the valid shader is unloaded). The sources must be text files containing valid shaders in GLSL language. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vertexShaderFilename</td><td>Path of the vertex shader file to load </td></tr>
    <tr><td class="paramname">fragmentShaderFilename</td><td>Path of the fragment shader file to load</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading succeeded, false if it failed</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classsf_1_1Shader.php#ac92d46bf71dff2d791117e4e472148aa" title="Load either the vertex or fragment shader from a source code in memory.">loadFromMemory</a>, <a class="el" href="classsf_1_1Shader.php#a2ee1b130c0606e4f8bcdf65c1efc2a53" title="Load either the vertex or fragment shader from a custom stream.">loadFromStream</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac92d46bf71dff2d791117e4e472148aa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Shader::loadFromMemory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>shader</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3">Type</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load either the vertex or fragment shader from a source code in memory. </p>
<p>This function loads a single shader, either vertex or fragment, identified by the second argument. The source code must be a valid shader in GLSL language. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">shader</td><td><a class="el" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a> containing the source code of the shader </td></tr>
    <tr><td class="paramname">type</td><td>Type of shader (vertex or fragment)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading succeeded, false if it failed</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classsf_1_1Shader.php#a053a5632848ebaca2fcd8ba29abe9e6e" title="Load either the vertex or fragment shader from a file.">loadFromFile</a>, <a class="el" href="classsf_1_1Shader.php#a2ee1b130c0606e4f8bcdf65c1efc2a53" title="Load either the vertex or fragment shader from a custom stream.">loadFromStream</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae34e94070d7547a890166b7993658a9b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Shader::loadFromMemory </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>vertexShader</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fragmentShader</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load both the vertex and fragment shaders from source codes in memory. </p>
<p>This function loads both the vertex and the fragment shaders. If one of them fails to load, the shader is left empty (the valid shader is unloaded). The sources must be valid shaders in GLSL language. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vertexShader</td><td><a class="el" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a> containing the source code of the vertex shader </td></tr>
    <tr><td class="paramname">fragmentShader</td><td><a class="el" href="classsf_1_1String.php" title="Utility string class that automatically handles conversions between types and encodings.">String</a> containing the source code of the fragment shader</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading succeeded, false if it failed</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classsf_1_1Shader.php#a053a5632848ebaca2fcd8ba29abe9e6e" title="Load either the vertex or fragment shader from a file.">loadFromFile</a>, <a class="el" href="classsf_1_1Shader.php#a2ee1b130c0606e4f8bcdf65c1efc2a53" title="Load either the vertex or fragment shader from a custom stream.">loadFromStream</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a2ee1b130c0606e4f8bcdf65c1efc2a53"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Shader::loadFromStream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1InputStream.php">InputStream</a> &amp;&#160;</td>
          <td class="paramname"><em>stream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Shader.php#afaa1aa65e5de37b74d047da9def9f9b3">Type</a>&#160;</td>
          <td class="paramname"><em>type</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load either the vertex or fragment shader from a custom stream. </p>
<p>This function loads a single shader, either vertex or fragment, identified by the second argument. The source code must be a valid shader in GLSL language. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stream</td><td>Source stream to read from </td></tr>
    <tr><td class="paramname">type</td><td>Type of shader (vertex or fragment)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading succeeded, false if it failed</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classsf_1_1Shader.php#a053a5632848ebaca2fcd8ba29abe9e6e" title="Load either the vertex or fragment shader from a file.">loadFromFile</a>, <a class="el" href="classsf_1_1Shader.php#ac92d46bf71dff2d791117e4e472148aa" title="Load either the vertex or fragment shader from a source code in memory.">loadFromMemory</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3b7958159ffb5596c4babc3052e35465"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Shader::loadFromStream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1InputStream.php">InputStream</a> &amp;&#160;</td>
          <td class="paramname"><em>vertexShaderStream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1InputStream.php">InputStream</a> &amp;&#160;</td>
          <td class="paramname"><em>fragmentShaderStream</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Load both the vertex and fragment shaders from custom streams. </p>
<p>This function loads both the vertex and the fragment shaders. If one of them fails to load, the shader is left empty (the valid shader is unloaded). The source codes must be valid shaders in GLSL language. GLSL is a C-like language dedicated to OpenGL shaders; you'll probably need to read a good documentation for it before writing your own shaders.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">vertexShaderStream</td><td>Source stream to read the vertex shader from </td></tr>
    <tr><td class="paramname">fragmentShaderStream</td><td>Source stream to read the fragment shader from</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if loading succeeded, false if it failed</dd></dl>
<dl class="section see"><dt>See Also</dt><dd><a class="el" href="classsf_1_1Shader.php#a053a5632848ebaca2fcd8ba29abe9e6e" title="Load either the vertex or fragment shader from a file.">loadFromFile</a>, <a class="el" href="classsf_1_1Shader.php#ac92d46bf71dff2d791117e4e472148aa" title="Load either the vertex or fragment shader from a source code in memory.">loadFromMemory</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a47e4dd78f0752ae08664b4ee616db1cf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a float parameter of the shader. </p>
<p><em>name</em> is the name of the variable to change in the shader. The corresponding parameter in the shader must be a float (float GLSL type).</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform <span class="keywordtype">float</span> myparam; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;myparam&quot;</span>, 5.2f);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the parameter in the shader </td></tr>
    <tr><td class="paramname">x</td><td>Value to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab8d379f40810b8e3eadebee81aedd231"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a 2-components vector parameter of the shader. </p>
<p><em>name</em> is the name of the variable to change in the shader. The corresponding parameter in the shader must be a 2x1 vector (vec2 GLSL type).</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform vec2 myparam; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;myparam&quot;</span>, 5.2f, 6.0f);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the parameter in the shader </td></tr>
    <tr><td class="paramname">x</td><td>First component of the value to assign </td></tr>
    <tr><td class="paramname">y</td><td>Second component of the value to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7e36e044d6b8adca8339f40c5a4b1801"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a 3-components vector parameter of the shader. </p>
<p><em>name</em> is the name of the variable to change in the shader. The corresponding parameter in the shader must be a 3x1 vector (vec3 GLSL type).</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform vec3 myparam; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;myparam&quot;</span>, 5.2f, 6.0f, -8.1f);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the parameter in the shader </td></tr>
    <tr><td class="paramname">x</td><td>First component of the value to assign </td></tr>
    <tr><td class="paramname">y</td><td>Second component of the value to assign </td></tr>
    <tr><td class="paramname">z</td><td>Third component of the value to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aeb468f1bc2d26750b96b74f1e19027fb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>w</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a 4-components vector parameter of the shader. </p>
<p><em>name</em> is the name of the variable to change in the shader. The corresponding parameter in the shader must be a 4x1 vector (vec4 GLSL type).</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform vec4 myparam; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;myparam&quot;</span>, 5.2f, 6.0f, -8.1f, 0.4f);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the parameter in the shader </td></tr>
    <tr><td class="paramname">x</td><td>First component of the value to assign </td></tr>
    <tr><td class="paramname">y</td><td>Second component of the value to assign </td></tr>
    <tr><td class="paramname">z</td><td>Third component of the value to assign </td></tr>
    <tr><td class="paramname">w</td><td>Fourth component of the value to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3ac473ece2c6fa26dc5032c07fd7288e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.php">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>vector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a 2-components vector parameter of the shader. </p>
<p><em>name</em> is the name of the variable to change in the shader. The corresponding parameter in the shader must be a 2x1 vector (vec2 GLSL type).</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform vec2 myparam; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;myparam&quot;</span>, <a class="code" href="classsf_1_1Vector2.php">sf::Vector2f</a>(5.2f, 6.0f));</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the parameter in the shader </td></tr>
    <tr><td class="paramname">vector</td><td>Vector to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a87d4a0c6dc70ae68aecc0dda3f343c07"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector3.php">Vector3f</a> &amp;&#160;</td>
          <td class="paramname"><em>vector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a 3-components vector parameter of the shader. </p>
<p><em>name</em> is the name of the variable to change in the shader. The corresponding parameter in the shader must be a 3x1 vector (vec3 GLSL type).</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform vec3 myparam; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;myparam&quot;</span>, <a class="code" href="classsf_1_1Vector3.php" title="Utility template class for manipulating 3-dimensional vectors.">sf::Vector3f</a>(5.2f, 6.0f, -8.1f));</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the parameter in the shader </td></tr>
    <tr><td class="paramname">vector</td><td>Vector to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa8618119ed4399df3fd33e78ee96b4fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a color parameter of the shader. </p>
<p><em>name</em> is the name of the variable to change in the shader. The corresponding parameter in the shader must be a 4x1 vector (vec4 GLSL type).</p>
<p>It is important to note that the components of the color are normalized before being passed to the shader. Therefore, they are converted from range [0 .. 255] to range [0 .. 1]. For example, a sf::Color(255, 125, 0, 255) will be transformed to a vec4(1.0, 0.5, 0.0, 1.0) in the shader.</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform vec4 color; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;color&quot;</span>, <a class="code" href="classsf_1_1Color.php" title="Utility class for manpulating RGBA colors.">sf::Color</a>(255, 128, 0, 255));</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the parameter in the shader </td></tr>
    <tr><td class="paramname">color</td><td><a class="el" href="classsf_1_1Color.php" title="Utility class for manpulating RGBA colors.">Color</a> to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a39c387cc30e249b22a0c478703b8cc9a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Transform.php">sf::Transform</a> &amp;&#160;</td>
          <td class="paramname"><em>transform</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a matrix parameter of the shader. </p>
<p><em>name</em> is the name of the variable to change in the shader. The corresponding parameter in the shader must be a 4x4 matrix (mat4 GLSL type).</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform mat4 matrix; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line"><a class="code" href="classsf_1_1Transform.php" title="Define a 3x3 transform matrix.">sf::Transform</a> transform;</div>
<div class="line">transform.<a class="code" href="classsf_1_1Transform.php#ab54f6c8070cc05e2afcb3145fbf4395a" title="Combine the current transform with a translation.">translate</a>(5, 10);</div>
<div class="line">shader.setParameter(<span class="stringliteral">&quot;matrix&quot;</span>, transform);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the parameter in the shader </td></tr>
    <tr><td class="paramname">transform</td><td><a class="el" href="classsf_1_1Transform.php" title="Define a 3x3 transform matrix.">Transform</a> to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7f58ab5c0a1084f238dfcec86602daa1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Texture.php">Texture</a> &amp;&#160;</td>
          <td class="paramname"><em>texture</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a texture parameter of the shader. </p>
<p><em>name</em> is the name of the variable to change in the shader. The corresponding parameter in the shader must be a 2D texture (sampler2D GLSL type).</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform sampler2D the_texture; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line"><a class="code" href="classsf_1_1Texture.php" title="Image living on the graphics card that can be used for drawing.">sf::Texture</a> texture;</div>
<div class="line">...</div>
<div class="line">shader.setParameter(<span class="stringliteral">&quot;the_texture&quot;</span>, texture);</div>
</div><!-- fragment --><p> It is important to note that <em>texture</em> must remain alive as long as the shader uses it, no copy is made internally.</p>
<p>To use the texture of the object being draw, which cannot be known in advance, you can pass the special value sf::Shader::CurrentTexture: </p>
<div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;the_texture&quot;</span>, sf::Shader::CurrentTexture).</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the texture in the shader </td></tr>
    <tr><td class="paramname">texture</td><td><a class="el" href="classsf_1_1Texture.php" title="Image living on the graphics card that can be used for drawing.">Texture</a> to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af06b4cba0bab915fa01032b063909044"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Shader::setParameter </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structsf_1_1Shader_1_1CurrentTextureType.php">CurrentTextureType</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change a texture parameter of the shader. </p>
<p>This overload maps a shader texture variable to the texture of the object being drawn, which cannot be known in advance. The second argument must be sf::Shader::CurrentTexture. The corresponding parameter in the shader must be a 2D texture (sampler2D GLSL type).</p>
<p>Example: </p>
<div class="fragment"><div class="line">uniform sampler2D current; <span class="comment">// this is the variable in the shader</span></div>
</div><!-- fragment --> <div class="fragment"><div class="line">shader.setParameter(<span class="stringliteral">&quot;current&quot;</span>, sf::Shader::CurrentTexture);</div>
</div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>Name of the texture in the shader </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Shader_8hpp_source.php">Shader.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer-fr.php");
?>
