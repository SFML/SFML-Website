<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::Input Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1Input.php">Input</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classsf_1_1Input-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::Input Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classsf_1_1Input.php" title="Input handles real-time input from keyboard and mouse.">Input</a> handles real-time input from keyboard and mouse.  
 <a href="classsf_1_1Input.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Input_8hpp_source.php">Input.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Input:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Input.png" usemap="#sf::Input_map" alt=""/>
  <map id="sf::Input_map" name="sf::Input_map">
<area href="classsf_1_1WindowListener.php" title="Base class for classes that want to receive events from a window (for internal use only)..." alt="sf::WindowListener" shape="rect" coords="0,0,117,24"/>
<area href="structsf_1_1NonCopyable.php" title="Utility base class to easily declare non-copyable classes." alt="sf::NonCopyable" shape="rect" coords="127,0,244,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a35393e09fc92f7523e52af1c203b958f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Input.php#a35393e09fc92f7523e52af1c203b958f">Input</a> ()</td></tr>
<tr class="memdesc:a35393e09fc92f7523e52af1c203b958f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a35393e09fc92f7523e52af1c203b958f"></a><br/></td></tr>
<tr class="separator:a35393e09fc92f7523e52af1c203b958f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5312ed524e1f2837aa4597978553876a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Input.php#a5312ed524e1f2837aa4597978553876a">IsKeyDown</a> (<a class="el" href="namespacesf_1_1Key.php#ad32ed01d3448273340bd25af5cdd9c81">Key::Code</a> KeyCode) const </td></tr>
<tr class="memdesc:a5312ed524e1f2837aa4597978553876a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the state of a key.  <a href="#a5312ed524e1f2837aa4597978553876a"></a><br/></td></tr>
<tr class="separator:a5312ed524e1f2837aa4597978553876a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28c36d05d76f2263faf803e29ffa9dea"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Input.php#a28c36d05d76f2263faf803e29ffa9dea">IsMouseButtonDown</a> (Mouse::Button Button) const </td></tr>
<tr class="memdesc:a28c36d05d76f2263faf803e29ffa9dea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the state of a mouse button.  <a href="#a28c36d05d76f2263faf803e29ffa9dea"></a><br/></td></tr>
<tr class="separator:a28c36d05d76f2263faf803e29ffa9dea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a715d9533617ef9fc25152ebd6b7ece08"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Input.php#a715d9533617ef9fc25152ebd6b7ece08">IsJoystickButtonDown</a> (unsigned int JoyId, unsigned int Button) const </td></tr>
<tr class="memdesc:a715d9533617ef9fc25152ebd6b7ece08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the state of a joystick button.  <a href="#a715d9533617ef9fc25152ebd6b7ece08"></a><br/></td></tr>
<tr class="separator:a715d9533617ef9fc25152ebd6b7ece08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2100db642800d4d3e21579c72bed99b3"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Input.php#a2100db642800d4d3e21579c72bed99b3">GetMouseX</a> () const </td></tr>
<tr class="memdesc:a2100db642800d4d3e21579c72bed99b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the mouse X position.  <a href="#a2100db642800d4d3e21579c72bed99b3"></a><br/></td></tr>
<tr class="separator:a2100db642800d4d3e21579c72bed99b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe8a8e65be0a5840de9865054aaa5796"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Input.php#afe8a8e65be0a5840de9865054aaa5796">GetMouseY</a> () const </td></tr>
<tr class="memdesc:afe8a8e65be0a5840de9865054aaa5796"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the mouse Y position.  <a href="#afe8a8e65be0a5840de9865054aaa5796"></a><br/></td></tr>
<tr class="separator:afe8a8e65be0a5840de9865054aaa5796"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4edf71238ae3d311c4b6e5e6895c6896"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Input.php#a4edf71238ae3d311c4b6e5e6895c6896">GetJoystickAxis</a> (unsigned int JoyId, Joy::Axis Axis) const </td></tr>
<tr class="memdesc:a4edf71238ae3d311c4b6e5e6895c6896"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a joystick axis position.  <a href="#a4edf71238ae3d311c4b6e5e6895c6896"></a><br/></td></tr>
<tr class="separator:a4edf71238ae3d311c4b6e5e6895c6896"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classsf_1_1Input.php" title="Input handles real-time input from keyboard and mouse.">Input</a> handles real-time input from keyboard and mouse. </p>
<p>Use it instead of events to handle continuous moves and more game-friendly inputs </p>

<p>Definition at line <a class="el" href="Input_8hpp_source.php#l00044">44</a> of file <a class="el" href="Input_8hpp_source.php">Input.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a35393e09fc92f7523e52af1c203b958f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Input::Input </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a4edf71238ae3d311c4b6e5e6895c6896"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Input::GetJoystickAxis </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>JoyId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Joy::Axis&#160;</td>
          <td class="paramname"><em>Axis</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a joystick axis position. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">JoyId</td><td>: Identifier of the joystick to check (0 or 1) </td></tr>
    <tr><td class="paramname">Axis</td><td>: Axis to get</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Current axis position, in the range [-100, 100] (except for POV, which is [0, 360]) </dd></dl>

</div>
</div>
<a class="anchor" id="a2100db642800d4d3e21579c72bed99b3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int sf::Input::GetMouseX </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the mouse X position. </p>
<dl class="section return"><dt>Returns</dt><dd>Current mouse left position, relative to owner window </dd></dl>

</div>
</div>
<a class="anchor" id="afe8a8e65be0a5840de9865054aaa5796"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int sf::Input::GetMouseY </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the mouse Y position. </p>
<dl class="section return"><dt>Returns</dt><dd>Current mouse top position, relative to owner window </dd></dl>

</div>
</div>
<a class="anchor" id="a715d9533617ef9fc25152ebd6b7ece08"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Input::IsJoystickButtonDown </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>JoyId</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Button</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the state of a joystick button. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">JoyId</td><td>: Identifier of the joystick to check (0 or 1) </td></tr>
    <tr><td class="paramname">Button</td><td>: Button to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if button is down, false if button is up </dd></dl>

</div>
</div>
<a class="anchor" id="a5312ed524e1f2837aa4597978553876a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Input::IsKeyDown </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacesf_1_1Key.php#ad32ed01d3448273340bd25af5cdd9c81">Key::Code</a>&#160;</td>
          <td class="paramname"><em>KeyCode</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the state of a key. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">KeyCode</td><td>: <a class="el" href="namespacesf_1_1Key.php" title="Definition of key codes for keyboard events.">Key</a> to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if key is down, false if key is up </dd></dl>

</div>
</div>
<a class="anchor" id="a28c36d05d76f2263faf803e29ffa9dea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Input::IsMouseButtonDown </td>
          <td>(</td>
          <td class="paramtype">Mouse::Button&#160;</td>
          <td class="paramname"><em>Button</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the state of a mouse button. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Button</td><td>: Button to check</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if button is down, false if button is up </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Input_8hpp_source.php">Input.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer.php");
?>
