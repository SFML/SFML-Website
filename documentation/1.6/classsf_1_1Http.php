<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::Http Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1Http.php">Http</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classsf_1_1Http-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::Http Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This class provides methods for manipulating the HTTP protocol (described in RFC 1945).  
 <a href="classsf_1_1Http.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Http_8hpp_source.php">Http.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Http:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Http.png" usemap="#sf::Http_map" alt=""/>
  <map id="sf::Http_map" name="sf::Http_map">
<area href="structsf_1_1NonCopyable.php" title="Utility base class to easily declare non-copyable classes." alt="sf::NonCopyable" shape="rect" coords="0,0,105,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http_1_1Request.php">Request</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class wraps an HTTP request, which is basically :  <a href="classsf_1_1Http_1_1Request.php#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http_1_1Response.php">Response</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class wraps an HTTP response, which is basically :  <a href="classsf_1_1Http_1_1Response.php#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:abe2360194f99bdde402c9f97a85cf067"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http.php#abe2360194f99bdde402c9f97a85cf067">Http</a> ()</td></tr>
<tr class="memdesc:abe2360194f99bdde402c9f97a85cf067"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#abe2360194f99bdde402c9f97a85cf067"></a><br/></td></tr>
<tr class="separator:abe2360194f99bdde402c9f97a85cf067"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a283ce40b04ef678916834b8032796677"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http.php#a283ce40b04ef678916834b8032796677">Http</a> (const std::string &amp;Host, unsigned short Port=0)</td></tr>
<tr class="memdesc:a283ce40b04ef678916834b8032796677"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the <a class="el" href="classsf_1_1Http.php" title="This class provides methods for manipulating the HTTP protocol (described in RFC 1945).">Http</a> instance with the target host.  <a href="#a283ce40b04ef678916834b8032796677"></a><br/></td></tr>
<tr class="separator:a283ce40b04ef678916834b8032796677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a233fb3eabfeb22a442a0db92e38aee1f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http.php#a233fb3eabfeb22a442a0db92e38aee1f">SetHost</a> (const std::string &amp;Host, unsigned short Port=0)</td></tr>
<tr class="memdesc:a233fb3eabfeb22a442a0db92e38aee1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the target host.  <a href="#a233fb3eabfeb22a442a0db92e38aee1f"></a><br/></td></tr>
<tr class="separator:a233fb3eabfeb22a442a0db92e38aee1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7e7a3ac25a8ee7407e0a739edfb35f0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Http_1_1Response.php">Response</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http.php#ac7e7a3ac25a8ee7407e0a739edfb35f0">SendRequest</a> (const <a class="el" href="classsf_1_1Http_1_1Request.php">Request</a> &amp;Req, float Timeout=0.f)</td></tr>
<tr class="memdesc:ac7e7a3ac25a8ee7407e0a739edfb35f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a HTTP request and return the server's response.  <a href="#ac7e7a3ac25a8ee7407e0a739edfb35f0"></a><br/></td></tr>
<tr class="separator:ac7e7a3ac25a8ee7407e0a739edfb35f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class provides methods for manipulating the HTTP protocol (described in RFC 1945). </p>
<p>It can connect to a website, get its files, send requests, etc. </p>

<p>Definition at line <a class="el" href="Http_8hpp_source.php#l00045">45</a> of file <a class="el" href="Http_8hpp_source.php">Http.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="abe2360194f99bdde402c9f97a85cf067"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Http::Http </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a283ce40b04ef678916834b8032796677"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Http::Http </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>Host</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>Port</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the <a class="el" href="classsf_1_1Http.php" title="This class provides methods for manipulating the HTTP protocol (described in RFC 1945).">Http</a> instance with the target host. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Host</td><td>: Web server to connect to </td></tr>
    <tr><td class="paramname">Port</td><td>: Port to use for connection (0 by default &ndash; use the standard port of the protocol used) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ac7e7a3ac25a8ee7407e0a739edfb35f0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Http_1_1Response.php">Response</a> sf::Http::SendRequest </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Http_1_1Request.php">Request</a> &amp;&#160;</td>
          <td class="paramname"><em>Req</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>Timeout</em> = <code>0.f</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a HTTP request and return the server's response. </p>
<p>You must be connected to a host before sending requests. Any missing mandatory header field will be added with an appropriate value. Warning : this function waits for the server's response and may not return instantly; use a thread if you don't want to block your application.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Req</td><td>: <a class="el" href="classsf_1_1Http_1_1Request.php" title="This class wraps an HTTP request, which is basically :">Request</a> to send </td></tr>
    <tr><td class="paramname">Timeout</td><td>: Maximum time to wait, in seconds (0 by default, means no timeout)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Server's response </dd></dl>

</div>
</div>
<a class="anchor" id="a233fb3eabfeb22a442a0db92e38aee1f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Http::SetHost </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>Host</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>Port</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the target host. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Host</td><td>: Web server to connect to </td></tr>
    <tr><td class="paramname">Port</td><td>: Port to use for connection (0 by default &ndash; use the standard port of the protocol used) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Http_8hpp_source.php">Http.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer.php");
?>
