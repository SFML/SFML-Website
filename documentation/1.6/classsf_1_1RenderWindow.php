<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::RenderWindow Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1RenderWindow.php">RenderWindow</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classsf_1_1RenderWindow-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::RenderWindow Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Simple wrapper for <a class="el" href="classsf_1_1Window.php" title="Window is a rendering window ; it can create a new window or connect to an existing one...">sf::Window</a> that allows easy 2D rendering.  
 <a href="classsf_1_1RenderWindow.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="RenderWindow_8hpp_source.php">RenderWindow.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::RenderWindow:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1RenderWindow.png" usemap="#sf::RenderWindow_map" alt=""/>
  <map id="sf::RenderWindow_map" name="sf::RenderWindow_map">
<area href="classsf_1_1Window.php" title="Window is a rendering window ; it can create a new window or connect to an existing one..." alt="sf::Window" shape="rect" coords="63,56,180,80"/>
<area href="classsf_1_1RenderTarget.php" title="Base class for all render targets (window, image, ...)" alt="sf::RenderTarget" shape="rect" coords="190,56,307,80"/>
<area href="classsf_1_1WindowListener.php" title="Base class for classes that want to receive events from a window (for internal use only)..." alt="sf::WindowListener" shape="rect" coords="0,0,117,24"/>
<area href="structsf_1_1NonCopyable.php" title="Utility base class to easily declare non-copyable classes." alt="sf::NonCopyable" shape="rect" coords="127,0,244,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a839bbf336bdcafb084dafc3076fc9021"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.php#a839bbf336bdcafb084dafc3076fc9021">RenderWindow</a> ()</td></tr>
<tr class="memdesc:a839bbf336bdcafb084dafc3076fc9021"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a839bbf336bdcafb084dafc3076fc9021"></a><br/></td></tr>
<tr class="separator:a839bbf336bdcafb084dafc3076fc9021"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada5aeec63eddbfacb6ee093ed0fff082"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.php#ada5aeec63eddbfacb6ee093ed0fff082">RenderWindow</a> (<a class="el" href="classsf_1_1VideoMode.php">VideoMode</a> Mode, const std::string &amp;Title, unsigned long WindowStyle=<a class="el" href="namespacesf_1_1Style.php#ad001cd87b8aa5669d0eadbb8aab1c1d2accff967648ebcd5db2007eff7352b50f">Style::Resize</a>|<a class="el" href="namespacesf_1_1Style.php#ad001cd87b8aa5669d0eadbb8aab1c1d2ae07a7d411d5acf28f4a9a4b76a3a9493">Style::Close</a>, const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a>())</td></tr>
<tr class="memdesc:ada5aeec63eddbfacb6ee093ed0fff082"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the window.  <a href="#ada5aeec63eddbfacb6ee093ed0fff082"></a><br/></td></tr>
<tr class="separator:ada5aeec63eddbfacb6ee093ed0fff082"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab35dccdc0c735f50edba3acb0cfbea03"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.php#ab35dccdc0c735f50edba3acb0cfbea03">RenderWindow</a> (WindowHandle Handle, const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a>())</td></tr>
<tr class="memdesc:ab35dccdc0c735f50edba3acb0cfbea03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the window from an existing control.  <a href="#ab35dccdc0c735f50edba3acb0cfbea03"></a><br/></td></tr>
<tr class="separator:ab35dccdc0c735f50edba3acb0cfbea03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3407e36bfc1752d723140438a825365c"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.php#a3407e36bfc1752d723140438a825365c">~RenderWindow</a> ()</td></tr>
<tr class="memdesc:a3407e36bfc1752d723140438a825365c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a3407e36bfc1752d723140438a825365c"></a><br/></td></tr>
<tr class="separator:a3407e36bfc1752d723140438a825365c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a100e2de6fa56a6105418d835a5797651"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.php#a100e2de6fa56a6105418d835a5797651">GetWidth</a> () const </td></tr>
<tr class="memdesc:a100e2de6fa56a6105418d835a5797651"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the width of the rendering region of the window.  <a href="#a100e2de6fa56a6105418d835a5797651"></a><br/></td></tr>
<tr class="separator:a100e2de6fa56a6105418d835a5797651"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5126fe9bf08c7429490ec75b4597fe8"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.php#ab5126fe9bf08c7429490ec75b4597fe8">GetHeight</a> () const </td></tr>
<tr class="memdesc:ab5126fe9bf08c7429490ec75b4597fe8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the height of the rendering region of the window.  <a href="#ab5126fe9bf08c7429490ec75b4597fe8"></a><br/></td></tr>
<tr class="separator:ab5126fe9bf08c7429490ec75b4597fe8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7066f80705fb53c2c4a9fe068fc47a8a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Image.php">Image</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.php#a7066f80705fb53c2c4a9fe068fc47a8a">Capture</a> () const </td></tr>
<tr class="memdesc:a7066f80705fb53c2c4a9fe068fc47a8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save the content of the window to an image.  <a href="#a7066f80705fb53c2c4a9fe068fc47a8a"></a><br/></td></tr>
<tr class="separator:a7066f80705fb53c2c4a9fe068fc47a8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05c614a2cdc2c2c4e3b473e39b3b9a17"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderWindow.php#a05c614a2cdc2c2c4e3b473e39b3b9a17">ConvertCoords</a> (unsigned int WindowX, unsigned int WindowY, const <a class="el" href="classsf_1_1View.php">View</a> *TargetView=NULL) const </td></tr>
<tr class="memdesc:a05c614a2cdc2c2c4e3b473e39b3b9a17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a point in window coordinates into view coordinates.  <a href="#a05c614a2cdc2c2c4e3b473e39b3b9a17"></a><br/></td></tr>
<tr class="separator:a05c614a2cdc2c2c4e3b473e39b3b9a17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa891f1cbd7d77c4dc02ac950b6e76f61"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#aa891f1cbd7d77c4dc02ac950b6e76f61">Create</a> (<a class="el" href="classsf_1_1VideoMode.php">VideoMode</a> Mode, const std::string &amp;Title, unsigned long WindowStyle=<a class="el" href="namespacesf_1_1Style.php#ad001cd87b8aa5669d0eadbb8aab1c1d2accff967648ebcd5db2007eff7352b50f">Style::Resize</a>|<a class="el" href="namespacesf_1_1Style.php#ad001cd87b8aa5669d0eadbb8aab1c1d2ae07a7d411d5acf28f4a9a4b76a3a9493">Style::Close</a>, const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a>())</td></tr>
<tr class="memdesc:aa891f1cbd7d77c4dc02ac950b6e76f61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create (or recreate) the window.  <a href="#aa891f1cbd7d77c4dc02ac950b6e76f61"></a><br/></td></tr>
<tr class="separator:aa891f1cbd7d77c4dc02ac950b6e76f61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58e264c181fd70e67986d26fea69a71d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a58e264c181fd70e67986d26fea69a71d">Create</a> (WindowHandle Handle, const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a> &amp;Params=<a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a>())</td></tr>
<tr class="memdesc:a58e264c181fd70e67986d26fea69a71d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create (or recreate) the window from an existing control.  <a href="#a58e264c181fd70e67986d26fea69a71d"></a><br/></td></tr>
<tr class="separator:a58e264c181fd70e67986d26fea69a71d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab04439f6fb9fdfe40f882676fdb2938c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#ab04439f6fb9fdfe40f882676fdb2938c">Close</a> ()</td></tr>
<tr class="memdesc:ab04439f6fb9fdfe40f882676fdb2938c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Close (destroy) the window.  <a href="#ab04439f6fb9fdfe40f882676fdb2938c"></a><br/></td></tr>
<tr class="separator:ab04439f6fb9fdfe40f882676fdb2938c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c4c82e1fdb4252108314fcbe462ad8d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a5c4c82e1fdb4252108314fcbe462ad8d">IsOpened</a> () const </td></tr>
<tr class="memdesc:a5c4c82e1fdb4252108314fcbe462ad8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether or not the window is opened (ie.  <a href="#a5c4c82e1fdb4252108314fcbe462ad8d"></a><br/></td></tr>
<tr class="separator:a5c4c82e1fdb4252108314fcbe462ad8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3f7d3a2e23de8cb6112d5057de8291d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#ab3f7d3a2e23de8cb6112d5057de8291d">GetSettings</a> () const </td></tr>
<tr class="memdesc:ab3f7d3a2e23de8cb6112d5057de8291d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the creation settings of the window.  <a href="#ab3f7d3a2e23de8cb6112d5057de8291d"></a><br/></td></tr>
<tr class="separator:ab3f7d3a2e23de8cb6112d5057de8291d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65cb14f66a870f459bd66e11e52fbfe8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a65cb14f66a870f459bd66e11e52fbfe8">GetEvent</a> (<a class="el" href="classsf_1_1Event.php">Event</a> &amp;EventReceived)</td></tr>
<tr class="memdesc:a65cb14f66a870f459bd66e11e52fbfe8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the event on top of events stack, if any, and pop it.  <a href="#a65cb14f66a870f459bd66e11e52fbfe8"></a><br/></td></tr>
<tr class="separator:a65cb14f66a870f459bd66e11e52fbfe8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb8391cc93ff730288e2a8dd6b0bb7b5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#acb8391cc93ff730288e2a8dd6b0bb7b5">UseVerticalSync</a> (bool Enabled)</td></tr>
<tr class="memdesc:acb8391cc93ff730288e2a8dd6b0bb7b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable / disable vertical synchronization.  <a href="#acb8391cc93ff730288e2a8dd6b0bb7b5"></a><br/></td></tr>
<tr class="separator:acb8391cc93ff730288e2a8dd6b0bb7b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6142e38cb60901e6604284425714f3f0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a6142e38cb60901e6604284425714f3f0">ShowMouseCursor</a> (bool <a class="el" href="classsf_1_1Window.php#a727c01602c86710fd935f9892946b2de">Show</a>)</td></tr>
<tr class="memdesc:a6142e38cb60901e6604284425714f3f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Show or hide the mouse cursor.  <a href="#a6142e38cb60901e6604284425714f3f0"></a><br/></td></tr>
<tr class="separator:a6142e38cb60901e6604284425714f3f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a369d1764893c6fde8979fcf04142dc55"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a369d1764893c6fde8979fcf04142dc55">SetCursorPosition</a> (unsigned int Left, unsigned int Top)</td></tr>
<tr class="memdesc:a369d1764893c6fde8979fcf04142dc55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the position of the mouse cursor.  <a href="#a369d1764893c6fde8979fcf04142dc55"></a><br/></td></tr>
<tr class="separator:a369d1764893c6fde8979fcf04142dc55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a6d2908a624a8afda4b2fdd9ef46058"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a3a6d2908a624a8afda4b2fdd9ef46058">SetPosition</a> (int Left, int Top)</td></tr>
<tr class="memdesc:a3a6d2908a624a8afda4b2fdd9ef46058"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the position of the window on screen.  <a href="#a3a6d2908a624a8afda4b2fdd9ef46058"></a><br/></td></tr>
<tr class="separator:a3a6d2908a624a8afda4b2fdd9ef46058"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc4461bfaa9b4ff0fd0364a5079a47ef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#adc4461bfaa9b4ff0fd0364a5079a47ef">SetSize</a> (unsigned int Width, unsigned int Height)</td></tr>
<tr class="memdesc:adc4461bfaa9b4ff0fd0364a5079a47ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the size of the rendering region of the window.  <a href="#adc4461bfaa9b4ff0fd0364a5079a47ef"></a><br/></td></tr>
<tr class="separator:adc4461bfaa9b4ff0fd0364a5079a47ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a727c01602c86710fd935f9892946b2de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a727c01602c86710fd935f9892946b2de">Show</a> (bool State)</td></tr>
<tr class="memdesc:a727c01602c86710fd935f9892946b2de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Show or hide the window.  <a href="#a727c01602c86710fd935f9892946b2de"></a><br/></td></tr>
<tr class="separator:a727c01602c86710fd935f9892946b2de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43ac767f0b7b697b392444d639b909e0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a43ac767f0b7b697b392444d639b909e0">EnableKeyRepeat</a> (bool Enabled)</td></tr>
<tr class="memdesc:a43ac767f0b7b697b392444d639b909e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable or disable automatic key-repeat.  <a href="#a43ac767f0b7b697b392444d639b909e0"></a><br/></td></tr>
<tr class="separator:a43ac767f0b7b697b392444d639b909e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36fa09e52af66878b8b826457b8f1dfa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a36fa09e52af66878b8b826457b8f1dfa">SetIcon</a> (unsigned int Width, unsigned int Height, const Uint8 *Pixels)</td></tr>
<tr class="memdesc:a36fa09e52af66878b8b826457b8f1dfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the window's icon.  <a href="#a36fa09e52af66878b8b826457b8f1dfa"></a><br/></td></tr>
<tr class="separator:a36fa09e52af66878b8b826457b8f1dfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fc1e745594d5cf6a30225ec9ea36675"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a9fc1e745594d5cf6a30225ec9ea36675">SetActive</a> (bool Active=true) const </td></tr>
<tr class="memdesc:a9fc1e745594d5cf6a30225ec9ea36675"><td class="mdescLeft">&#160;</td><td class="mdescRight">Activate of deactivate the window as the current target for rendering.  <a href="#a9fc1e745594d5cf6a30225ec9ea36675"></a><br/></td></tr>
<tr class="separator:a9fc1e745594d5cf6a30225ec9ea36675"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee37843c5c882f7b3a0788b310308435"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#aee37843c5c882f7b3a0788b310308435">Display</a> ()</td></tr>
<tr class="memdesc:aee37843c5c882f7b3a0788b310308435"><td class="mdescLeft">&#160;</td><td class="mdescRight">Display the window on screen.  <a href="#aee37843c5c882f7b3a0788b310308435"></a><br/></td></tr>
<tr class="separator:aee37843c5c882f7b3a0788b310308435"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace1eacb2f3ba2ed15dcc5028d0c5df6d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Input.php">Input</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#ace1eacb2f3ba2ed15dcc5028d0c5df6d">GetInput</a> () const </td></tr>
<tr class="memdesc:ace1eacb2f3ba2ed15dcc5028d0c5df6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the input manager of the window.  <a href="#ace1eacb2f3ba2ed15dcc5028d0c5df6d"></a><br/></td></tr>
<tr class="separator:ace1eacb2f3ba2ed15dcc5028d0c5df6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5544031f1d2965c00532fb5660763f33"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a5544031f1d2965c00532fb5660763f33">SetFramerateLimit</a> (unsigned int Limit)</td></tr>
<tr class="memdesc:a5544031f1d2965c00532fb5660763f33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Limit the framerate to a maximum fixed frequency.  <a href="#a5544031f1d2965c00532fb5660763f33"></a><br/></td></tr>
<tr class="separator:a5544031f1d2965c00532fb5660763f33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63571ef14c9351899bcd605fb101c254"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#a63571ef14c9351899bcd605fb101c254">GetFrameTime</a> () const </td></tr>
<tr class="memdesc:a63571ef14c9351899bcd605fb101c254"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get time elapsed since last frame.  <a href="#a63571ef14c9351899bcd605fb101c254"></a><br/></td></tr>
<tr class="separator:a63571ef14c9351899bcd605fb101c254"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad685eed68b85a66c8000a08e9a28aa91"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.php#ad685eed68b85a66c8000a08e9a28aa91">SetJoystickThreshold</a> (float Threshold)</td></tr>
<tr class="memdesc:ad685eed68b85a66c8000a08e9a28aa91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the joystick threshold, ie.  <a href="#ad685eed68b85a66c8000a08e9a28aa91"></a><br/></td></tr>
<tr class="separator:ad685eed68b85a66c8000a08e9a28aa91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a125645088d7b2df07599ea36fbb8b87e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a125645088d7b2df07599ea36fbb8b87e">Clear</a> (const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;FillColor=<a class="el" href="classsf_1_1Color.php">Color</a>(0, 0, 0))</td></tr>
<tr class="memdesc:a125645088d7b2df07599ea36fbb8b87e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the entire target with a single color.  <a href="#a125645088d7b2df07599ea36fbb8b87e"></a><br/></td></tr>
<tr class="separator:a125645088d7b2df07599ea36fbb8b87e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7c8b8d0ed6d9a0e2f0815283e5976d2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#ac7c8b8d0ed6d9a0e2f0815283e5976d2">Draw</a> (const <a class="el" href="classsf_1_1Drawable.php">Drawable</a> &amp;Object)</td></tr>
<tr class="memdesc:ac7c8b8d0ed6d9a0e2f0815283e5976d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Draw something into the target.  <a href="#ac7c8b8d0ed6d9a0e2f0815283e5976d2"></a><br/></td></tr>
<tr class="separator:ac7c8b8d0ed6d9a0e2f0815283e5976d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7060ca19e685d8d5b7c6f5dd9b5906e1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a7060ca19e685d8d5b7c6f5dd9b5906e1">SetView</a> (const <a class="el" href="classsf_1_1View.php">View</a> &amp;NewView)</td></tr>
<tr class="memdesc:a7060ca19e685d8d5b7c6f5dd9b5906e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current active view.  <a href="#a7060ca19e685d8d5b7c6f5dd9b5906e1"></a><br/></td></tr>
<tr class="separator:a7060ca19e685d8d5b7c6f5dd9b5906e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb9e6bd4593db8a6f58924d26eb93544"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1View.php">View</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#afb9e6bd4593db8a6f58924d26eb93544">GetView</a> () const </td></tr>
<tr class="memdesc:afb9e6bd4593db8a6f58924d26eb93544"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current view.  <a href="#afb9e6bd4593db8a6f58924d26eb93544"></a><br/></td></tr>
<tr class="separator:afb9e6bd4593db8a6f58924d26eb93544"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66d7c2b04d33d3a22f585a3fc39e7fa0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1View.php">View</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a66d7c2b04d33d3a22f585a3fc39e7fa0">GetDefaultView</a> ()</td></tr>
<tr class="memdesc:a66d7c2b04d33d3a22f585a3fc39e7fa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the default view of the window for read / write.  <a href="#a66d7c2b04d33d3a22f585a3fc39e7fa0"></a><br/></td></tr>
<tr class="separator:a66d7c2b04d33d3a22f585a3fc39e7fa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab763d16f00166b516fead600d8824c71"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#ab763d16f00166b516fead600d8824c71">PreserveOpenGLStates</a> (bool Preserve)</td></tr>
<tr class="memdesc:ab763d16f00166b516fead600d8824c71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell SFML to preserve external OpenGL states, at the expense of more CPU charge.  <a href="#ab763d16f00166b516fead600d8824c71"></a><br/></td></tr>
<tr class="separator:ab763d16f00166b516fead600d8824c71"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a3d9265548b6903ab7f645d12177bba24"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.php#a3d9265548b6903ab7f645d12177bba24">Initialize</a> ()</td></tr>
<tr class="memdesc:a3d9265548b6903ab7f645d12177bba24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called by the derived class when it's ready to be initialized.  <a href="#a3d9265548b6903ab7f645d12177bba24"></a><br/></td></tr>
<tr class="separator:a3d9265548b6903ab7f645d12177bba24"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Simple wrapper for <a class="el" href="classsf_1_1Window.php" title="Window is a rendering window ; it can create a new window or connect to an existing one...">sf::Window</a> that allows easy 2D rendering. </p>

<p>Definition at line <a class="el" href="RenderWindow_8hpp_source.php#l00045">45</a> of file <a class="el" href="RenderWindow_8hpp_source.php">RenderWindow.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a839bbf336bdcafb084dafc3076fc9021"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderWindow::RenderWindow </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="ada5aeec63eddbfacb6ee093ed0fff082"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderWindow::RenderWindow </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1VideoMode.php">VideoMode</a>&#160;</td>
          <td class="paramname"><em>Mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>Title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>WindowStyle</em> = <code><a class="el" href="namespacesf_1_1Style.php#ad001cd87b8aa5669d0eadbb8aab1c1d2accff967648ebcd5db2007eff7352b50f">Style::Resize</a>|<a class="el" href="namespacesf_1_1Style.php#ad001cd87b8aa5669d0eadbb8aab1c1d2ae07a7d411d5acf28f4a9a4b76a3a9493">Style::Close</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Mode</td><td>: Video mode to use </td></tr>
    <tr><td class="paramname">Title</td><td>: Title of the window </td></tr>
    <tr><td class="paramname">WindowStyle</td><td>: <a class="el" href="classsf_1_1Window.php" title="Window is a rendering window ; it can create a new window or connect to an existing one...">Window</a> style, see <a class="el" href="namespacesf_1_1Style.php" title="Enumeration of window creation styles.">sf::Style</a> (Resize | Close by default) </td></tr>
    <tr><td class="paramname">Params</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab35dccdc0c735f50edba3acb0cfbea03"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderWindow::RenderWindow </td>
          <td>(</td>
          <td class="paramtype">WindowHandle&#160;</td>
          <td class="paramname"><em>Handle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the window from an existing control. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Handle</td><td>: Platform-specific handle of the control </td></tr>
    <tr><td class="paramname">Params</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3407e36bfc1752d723140438a825365c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual sf::RenderWindow::~RenderWindow </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a7066f80705fb53c2c4a9fe068fc47a8a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Image.php">Image</a> sf::RenderWindow::Capture </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Save the content of the window to an image. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classsf_1_1Image.php" title="Image is the low-level class for loading and manipulating images.">Image</a> instance containing the contents of the screen </dd></dl>

</div>
</div>
<a class="anchor" id="a125645088d7b2df07599ea36fbb8b87e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Clear </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.php">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>FillColor</em> = <code><a class="el" href="classsf_1_1Color.php">Color</a>(0,&#160;0,&#160;0)</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear the entire target with a single color. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">FillColor</td><td>: <a class="el" href="classsf_1_1Color.php" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> to use to clear the render target </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab04439f6fb9fdfe40f882676fdb2938c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Close (destroy) the window. </p>
<p>The <a class="el" href="classsf_1_1Window.php" title="Window is a rendering window ; it can create a new window or connect to an existing one...">sf::Window</a> instance remains valid and you can call Create to recreate the window </p>

</div>
</div>
<a class="anchor" id="a05c614a2cdc2c2c4e3b473e39b3b9a17"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.php">sf::Vector2f</a> sf::RenderWindow::ConvertCoords </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>WindowX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>WindowY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1View.php">View</a> *&#160;</td>
          <td class="paramname"><em>TargetView</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a point in window coordinates into view coordinates. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">WindowX</td><td>: X coordinate of the point to convert, relative to the window </td></tr>
    <tr><td class="paramname">WindowY</td><td>: Y coordinate of the point to convert, relative to the window </td></tr>
    <tr><td class="paramname">TargetView</td><td>: Target view to convert the point to (NULL by default &ndash; uses the current view)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Converted point </dd></dl>

</div>
</div>
<a class="anchor" id="aa891f1cbd7d77c4dc02ac950b6e76f61"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1VideoMode.php">VideoMode</a>&#160;</td>
          <td class="paramname"><em>Mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>Title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>WindowStyle</em> = <code><a class="el" href="namespacesf_1_1Style.php#ad001cd87b8aa5669d0eadbb8aab1c1d2accff967648ebcd5db2007eff7352b50f">Style::Resize</a>|<a class="el" href="namespacesf_1_1Style.php#ad001cd87b8aa5669d0eadbb8aab1c1d2ae07a7d411d5acf28f4a9a4b76a3a9493">Style::Close</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create (or recreate) the window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Mode</td><td>: Video mode to use </td></tr>
    <tr><td class="paramname">Title</td><td>: Title of the window </td></tr>
    <tr><td class="paramname">WindowStyle</td><td>: <a class="el" href="classsf_1_1Window.php" title="Window is a rendering window ; it can create a new window or connect to an existing one...">Window</a> style, see <a class="el" href="namespacesf_1_1Style.php" title="Enumeration of window creation styles.">sf::Style</a> (Resize | Close by default) </td></tr>
    <tr><td class="paramname">Params</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a58e264c181fd70e67986d26fea69a71d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Create </td>
          <td>(</td>
          <td class="paramtype">WindowHandle&#160;</td>
          <td class="paramname"><em>Handle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>Params</em> = <code><a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Create (or recreate) the window from an existing control. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Handle</td><td>: Platform-specific handle of the control </td></tr>
    <tr><td class="paramname">Params</td><td>: Creation parameters (see default constructor for default values) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aee37843c5c882f7b3a0788b310308435"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Display </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Display the window on screen. </p>

</div>
</div>
<a class="anchor" id="ac7c8b8d0ed6d9a0e2f0815283e5976d2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void sf::RenderTarget::Draw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Drawable.php">Drawable</a> &amp;&#160;</td>
          <td class="paramname"><em>Object</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Draw something into the target. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Object</td><td>: Object to draw </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a43ac767f0b7b697b392444d639b909e0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::EnableKeyRepeat </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Enabled</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enable or disable automatic key-repeat. </p>
<p>Automatic key-repeat is enabled by default</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Enabled</td><td>: True to enable, false to disable </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a66d7c2b04d33d3a22f585a3fc39e7fa0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1View.php">View</a>&amp; sf::RenderTarget::GetDefaultView </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the default view of the window for read / write. </p>
<dl class="section return"><dt>Returns</dt><dd>Default view </dd></dl>

</div>
</div>
<a class="anchor" id="a65cb14f66a870f459bd66e11e52fbfe8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Window::GetEvent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Event.php">Event</a> &amp;&#160;</td>
          <td class="paramname"><em>EventReceived</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the event on top of events stack, if any, and pop it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">EventReceived</td><td>: <a class="el" href="classsf_1_1Event.php" title="Event defines a system event and its parameters.">Event</a> to fill, if any</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if an event was returned, false if events stack was empty </dd></dl>

</div>
</div>
<a class="anchor" id="a63571ef14c9351899bcd605fb101c254"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float sf::Window::GetFrameTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get time elapsed since last frame. </p>
<dl class="section return"><dt>Returns</dt><dd>Time elapsed, in seconds </dd></dl>

</div>
</div>
<a class="anchor" id="ab5126fe9bf08c7429490ec75b4597fe8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int sf::RenderWindow::GetHeight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the height of the rendering region of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>Height in pixels </dd></dl>

<p>Implements <a class="el" href="classsf_1_1RenderTarget.php#a9495774c371e0dd9ad9835ad2f34a03a">sf::RenderTarget</a>.</p>

</div>
</div>
<a class="anchor" id="ace1eacb2f3ba2ed15dcc5028d0c5df6d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Input.php">Input</a>&amp; sf::Window::GetInput </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the input manager of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference to the input </dd></dl>

</div>
</div>
<a class="anchor" id="ab3f7d3a2e23de8cb6112d5057de8291d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structsf_1_1WindowSettings.php">WindowSettings</a>&amp; sf::Window::GetSettings </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the creation settings of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>Structure containing the creation settings </dd></dl>

</div>
</div>
<a class="anchor" id="afb9e6bd4593db8a6f58924d26eb93544"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1View.php">View</a>&amp; sf::RenderTarget::GetView </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current view. </p>
<dl class="section return"><dt>Returns</dt><dd>Current view active in the window </dd></dl>

</div>
</div>
<a class="anchor" id="a100e2de6fa56a6105418d835a5797651"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int sf::RenderWindow::GetWidth </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the width of the rendering region of the window. </p>
<dl class="section return"><dt>Returns</dt><dd>Width in pixels </dd></dl>

<p>Implements <a class="el" href="classsf_1_1RenderTarget.php#a4df749ecfddb5355d8357afe719cf681">sf::RenderTarget</a>.</p>

</div>
</div>
<a class="anchor" id="a3d9265548b6903ab7f645d12177bba24"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called by the derived class when it's ready to be initialized. </p>

</div>
</div>
<a class="anchor" id="a5c4c82e1fdb4252108314fcbe462ad8d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Window::IsOpened </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tell whether or not the window is opened (ie. </p>
<p>has been created). Note that a hidden window (Show(false)) will still return true</p>
<dl class="section return"><dt>Returns</dt><dd>True if the window is opened </dd></dl>

</div>
</div>
<a class="anchor" id="ab763d16f00166b516fead600d8824c71"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::PreserveOpenGLStates </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Preserve</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tell SFML to preserve external OpenGL states, at the expense of more CPU charge. </p>
<p>Use this function if you don't want SFML to mess up your own OpenGL states (if any). Don't enable state preservation if not needed, as it will allow SFML to do internal optimizations and improve performances. This parameter is false by default</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Preserve</td><td>: True to preserve OpenGL states, false to let SFML optimize </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9fc1e745594d5cf6a30225ec9ea36675"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::Window::SetActive </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Active</em> = <code>true</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Activate of deactivate the window as the current target for rendering. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Active</td><td>: True to activate, false to deactivate (true by default)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if operation was successful, false otherwise </dd></dl>

</div>
</div>
<a class="anchor" id="a369d1764893c6fde8979fcf04142dc55"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetCursorPosition </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Top</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the position of the mouse cursor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Left</td><td>: Left coordinate of the cursor, relative to the window </td></tr>
    <tr><td class="paramname">Top</td><td>: Top coordinate of the cursor, relative to the window </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5544031f1d2965c00532fb5660763f33"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetFramerateLimit </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Limit</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Limit the framerate to a maximum fixed frequency. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Limit</td><td>: Framerate limit, in frames per seconds (use 0 to disable limit) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a36fa09e52af66878b8b826457b8f1dfa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetIcon </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Uint8 *&#160;</td>
          <td class="paramname"><em>Pixels</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the window's icon. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Width</td><td>: Icon's width, in pixels </td></tr>
    <tr><td class="paramname">Height</td><td>: Icon's height, in pixels </td></tr>
    <tr><td class="paramname">Pixels</td><td>: Pointer to the pixels in memory, format must be RGBA 32 bits </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad685eed68b85a66c8000a08e9a28aa91"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetJoystickThreshold </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>Threshold</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the joystick threshold, ie. </p>
<p>the value below which no move event will be generated</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Threshold</td><td>: New threshold, in range [0, 100] </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3a6d2908a624a8afda4b2fdd9ef46058"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetPosition </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Top</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the position of the window on screen. </p>
<p>Only works for top-level windows</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Left</td><td>: Left position </td></tr>
    <tr><td class="paramname">Top</td><td>: Top position </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adc4461bfaa9b4ff0fd0364a5079a47ef"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::SetSize </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>Height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the size of the rendering region of the window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Width</td><td>: New width </td></tr>
    <tr><td class="paramname">Height</td><td>: New height </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7060ca19e685d8d5b7c6f5dd9b5906e1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::SetView </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1View.php">View</a> &amp;&#160;</td>
          <td class="paramname"><em>NewView</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the current active view. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">NewView</td><td>: New view to use (pass <a class="el" href="classsf_1_1RenderTarget.php#a66d7c2b04d33d3a22f585a3fc39e7fa0" title="Get the default view of the window for read / write.">GetDefaultView()</a> to set the default view) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a727c01602c86710fd935f9892946b2de"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::Show </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>State</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Show or hide the window. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">State</td><td>: True to show, false to hide </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6142e38cb60901e6604284425714f3f0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::ShowMouseCursor </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Show</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Show or hide the mouse cursor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Show</td><td>: True to show, false to hide </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acb8391cc93ff730288e2a8dd6b0bb7b5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Window::UseVerticalSync </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Enabled</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Enable / disable vertical synchronization. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Enabled</td><td>: True to enable v-sync, false to deactivate </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="RenderWindow_8hpp_source.php">RenderWindow.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer.php");
?>
