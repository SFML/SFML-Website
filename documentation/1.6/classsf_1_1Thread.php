<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::Thread Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1Thread.php">Thread</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="classsf_1_1Thread-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::Thread Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classsf_1_1Thread.php" title="Thread defines an easy way to manipulate a thread.">Thread</a> defines an easy way to manipulate a thread.  
 <a href="classsf_1_1Thread.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Win32_2Thread_8hpp_source.php">Thread.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Thread:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Thread.png" usemap="#sf::Thread_map" alt=""/>
  <map id="sf::Thread_map" name="sf::Thread_map">
<area href="structsf_1_1NonCopyable.php" title="Utility base class to easily declare non-copyable classes." alt="sf::NonCopyable" shape="rect" coords="81,0,233,24"/>
<area href="classsf_1_1SoundRecorder.php" title="SoundRecorder is an interface for capturing sound data, it is meant to be used as a base class..." alt="sf::SoundRecorder" shape="rect" coords="0,112,152,136"/>
<area href="classsf_1_1SoundStream.php" title="SoundStream is a streamed sound, ie samples are acquired while the sound is playing." alt="sf::SoundStream" shape="rect" coords="162,112,314,136"/>
<area href="classsf_1_1SoundBufferRecorder.php" title="Specialized SoundRecorder which saves the captured audio data into a sound buffer." alt="sf::SoundBufferRecorder" shape="rect" coords="0,168,152,192"/>
<area href="classsf_1_1Music.php" title="Music defines a big sound played using streaming, so usually what we call a music :)..." alt="sf::Music" shape="rect" coords="162,168,314,192"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aab6e6f11eb38f106cd7c1149763a11b8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aab6e6f11eb38f106cd7c1149763a11b8"></a>
typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><b>FuncType</b> )(void *)</td></tr>
<tr class="separator:aab6e6f11eb38f106cd7c1149763a11b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5a5f6a41323c0983d6c0f4e496f4a173"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.php#a5a5f6a41323c0983d6c0f4e496f4a173">Thread</a> (FuncType Function, void *UserData=NULL)</td></tr>
<tr class="memdesc:a5a5f6a41323c0983d6c0f4e496f4a173"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the thread from a function pointer.  <a href="#a5a5f6a41323c0983d6c0f4e496f4a173"></a><br/></td></tr>
<tr class="separator:a5a5f6a41323c0983d6c0f4e496f4a173"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ba00c004839bdd93fbe1cda69eaff77"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.php#a8ba00c004839bdd93fbe1cda69eaff77">~Thread</a> ()</td></tr>
<tr class="memdesc:a8ba00c004839bdd93fbe1cda69eaff77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <a href="#a8ba00c004839bdd93fbe1cda69eaff77"></a><br/></td></tr>
<tr class="separator:a8ba00c004839bdd93fbe1cda69eaff77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a046df871f73d3cf452d1c72bcc143642"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.php#a046df871f73d3cf452d1c72bcc143642">Launch</a> ()</td></tr>
<tr class="memdesc:a046df871f73d3cf452d1c72bcc143642"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create and run the thread.  <a href="#a046df871f73d3cf452d1c72bcc143642"></a><br/></td></tr>
<tr class="separator:a046df871f73d3cf452d1c72bcc143642"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67f3c609fdf99688531dbfae461ea4d2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.php#a67f3c609fdf99688531dbfae461ea4d2">Wait</a> ()</td></tr>
<tr class="memdesc:a67f3c609fdf99688531dbfae461ea4d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait until the thread finishes.  <a href="#a67f3c609fdf99688531dbfae461ea4d2"></a><br/></td></tr>
<tr class="separator:a67f3c609fdf99688531dbfae461ea4d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a603d9493c6a845188f05c2eca48dc41b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.php#a603d9493c6a845188f05c2eca48dc41b">Terminate</a> ()</td></tr>
<tr class="memdesc:a603d9493c6a845188f05c2eca48dc41b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Terminate the thread Terminating a thread with this function is not safe, you should rather try to make the thread function terminate by itself.  <a href="#a603d9493c6a845188f05c2eca48dc41b"></a><br/></td></tr>
<tr class="separator:a603d9493c6a845188f05c2eca48dc41b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ad719b83ce7b02b56db919d423a69f1a2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.php#ad719b83ce7b02b56db919d423a69f1a2">Thread</a> ()</td></tr>
<tr class="memdesc:ad719b83ce7b02b56db919d423a69f1a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#ad719b83ce7b02b56db919d423a69f1a2"></a><br/></td></tr>
<tr class="separator:ad719b83ce7b02b56db919d423a69f1a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classsf_1_1Thread.php" title="Thread defines an easy way to manipulate a thread.">Thread</a> defines an easy way to manipulate a thread. </p>
<p>There are two ways to use <a class="el" href="classsf_1_1Thread.php" title="Thread defines an easy way to manipulate a thread.">Thread</a> :</p>
<ul>
<li>Inherit from it and override the Run() virtual function</li>
<li>Construct a <a class="el" href="classsf_1_1Thread.php" title="Thread defines an easy way to manipulate a thread.">Thread</a> instance and pass it a function pointer to call </li>
</ul>

<p>Definition at line <a class="el" href="Win32_2Thread_8hpp_source.php#l00044">44</a> of file <a class="el" href="Win32_2Thread_8hpp_source.php">Win32/Thread.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a5a5f6a41323c0983d6c0f4e496f4a173"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::Thread::Thread </td>
          <td>(</td>
          <td class="paramtype">FuncType&#160;</td>
          <td class="paramname"><em>Function</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>UserData</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the thread from a function pointer. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Function</td><td>: Entry point of the thread </td></tr>
    <tr><td class="paramname">UserData</td><td>: Data to pass to the thread function (NULL by default) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8ba00c004839bdd93fbe1cda69eaff77"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual sf::Thread::~Thread </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Virtual destructor. </p>

</div>
</div>
<a class="anchor" id="ad719b83ce7b02b56db919d423a69f1a2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">sf::Thread::Thread </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a046df871f73d3cf452d1c72bcc143642"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Thread::Launch </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create and run the thread. </p>

</div>
</div>
<a class="anchor" id="a603d9493c6a845188f05c2eca48dc41b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Thread::Terminate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Terminate the thread Terminating a thread with this function is not safe, you should rather try to make the thread function terminate by itself. </p>

</div>
</div>
<a class="anchor" id="a67f3c609fdf99688531dbfae461ea4d2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::Thread::Wait </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait until the thread finishes. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Win32_2Thread_8hpp_source.php">Win32/Thread.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer.php");
?>
