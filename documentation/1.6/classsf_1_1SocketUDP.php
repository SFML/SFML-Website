<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::SocketUDP Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1SocketUDP.php">SocketUDP</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classsf_1_1SocketUDP-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::SocketUDP Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="classsf_1_1SocketUDP.php" title="SocketUDP wraps a socket using UDP protocol to send data fastly (but with less safety)">SocketUDP</a> wraps a socket using UDP protocol to send data fastly (but with less safety)  
 <a href="classsf_1_1SocketUDP.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="SocketUDP_8hpp_source.php">SocketUDP.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a844e648922eccd86d4815d19472bb901"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#a844e648922eccd86d4815d19472bb901">SocketUDP</a> ()</td></tr>
<tr class="memdesc:a844e648922eccd86d4815d19472bb901"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a844e648922eccd86d4815d19472bb901"></a><br/></td></tr>
<tr class="separator:a844e648922eccd86d4815d19472bb901"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a128ebfff7472dfdd330b46b719e06fd6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#a128ebfff7472dfdd330b46b719e06fd6">SetBlocking</a> (bool Blocking)</td></tr>
<tr class="memdesc:a128ebfff7472dfdd330b46b719e06fd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the blocking state of the socket.  <a href="#a128ebfff7472dfdd330b46b719e06fd6"></a><br/></td></tr>
<tr class="separator:a128ebfff7472dfdd330b46b719e06fd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a7e364fd39aa7338f0822d849323a5d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#a4a7e364fd39aa7338f0822d849323a5d">Bind</a> (unsigned short Port)</td></tr>
<tr class="memdesc:a4a7e364fd39aa7338f0822d849323a5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bind the socket to a specific port.  <a href="#a4a7e364fd39aa7338f0822d849323a5d"></a><br/></td></tr>
<tr class="separator:a4a7e364fd39aa7338f0822d849323a5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f6b448b8ab63913dad5d6906645081c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#a6f6b448b8ab63913dad5d6906645081c">Unbind</a> ()</td></tr>
<tr class="memdesc:a6f6b448b8ab63913dad5d6906645081c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unbind the socket from its previous port, if any.  <a href="#a6f6b448b8ab63913dad5d6906645081c"></a><br/></td></tr>
<tr class="separator:a6f6b448b8ab63913dad5d6906645081c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abce9f533dd86c0fd8fbe26b7efce3bc2"><td class="memItemLeft" align="right" valign="top">Socket::Status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#abce9f533dd86c0fd8fbe26b7efce3bc2">Send</a> (const char *Data, std::size_t Size, const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Address, unsigned short Port)</td></tr>
<tr class="memdesc:abce9f533dd86c0fd8fbe26b7efce3bc2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send an array of bytes.  <a href="#abce9f533dd86c0fd8fbe26b7efce3bc2"></a><br/></td></tr>
<tr class="separator:abce9f533dd86c0fd8fbe26b7efce3bc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6928928fa1d6242db1f8d4176369996"><td class="memItemLeft" align="right" valign="top">Socket::Status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#ac6928928fa1d6242db1f8d4176369996">Receive</a> (char *Data, std::size_t MaxSize, std::size_t &amp;SizeReceived, <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Address, unsigned short &amp;Port)</td></tr>
<tr class="memdesc:ac6928928fa1d6242db1f8d4176369996"><td class="mdescLeft">&#160;</td><td class="mdescRight">Receive an array of bytes.  <a href="#ac6928928fa1d6242db1f8d4176369996"></a><br/></td></tr>
<tr class="separator:ac6928928fa1d6242db1f8d4176369996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afef698f2544ac0364d422e1e1ba7a5b6"><td class="memItemLeft" align="right" valign="top">Socket::Status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#afef698f2544ac0364d422e1e1ba7a5b6">Send</a> (<a class="el" href="classsf_1_1Packet.php">Packet</a> &amp;PacketToSend, const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Address, unsigned short Port)</td></tr>
<tr class="memdesc:afef698f2544ac0364d422e1e1ba7a5b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a packet of data.  <a href="#afef698f2544ac0364d422e1e1ba7a5b6"></a><br/></td></tr>
<tr class="separator:afef698f2544ac0364d422e1e1ba7a5b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a463bbd635513f2653f072c2f220d2495"><td class="memItemLeft" align="right" valign="top">Socket::Status&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#a463bbd635513f2653f072c2f220d2495">Receive</a> (<a class="el" href="classsf_1_1Packet.php">Packet</a> &amp;PacketToReceive, <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;Address, unsigned short &amp;Port)</td></tr>
<tr class="memdesc:a463bbd635513f2653f072c2f220d2495"><td class="mdescLeft">&#160;</td><td class="mdescRight">Receive a packet.  <a href="#a463bbd635513f2653f072c2f220d2495"></a><br/></td></tr>
<tr class="separator:a463bbd635513f2653f072c2f220d2495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9abf54c9ced16b55ddef46973cd1a58"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#ac9abf54c9ced16b55ddef46973cd1a58">Close</a> ()</td></tr>
<tr class="memdesc:ac9abf54c9ced16b55ddef46973cd1a58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Close the socket.  <a href="#ac9abf54c9ced16b55ddef46973cd1a58"></a><br/></td></tr>
<tr class="separator:ac9abf54c9ced16b55ddef46973cd1a58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affecb97b84b51dea691934f9195abc1f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#affecb97b84b51dea691934f9195abc1f">IsValid</a> () const </td></tr>
<tr class="memdesc:affecb97b84b51dea691934f9195abc1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if the socket is in a valid state ; this function can be called any time to check if the socket is OK.  <a href="#affecb97b84b51dea691934f9195abc1f"></a><br/></td></tr>
<tr class="separator:affecb97b84b51dea691934f9195abc1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14f2c68a57a163a5d142acd0c4b022dd"><td class="memItemLeft" align="right" valign="top">unsigned short&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#a14f2c68a57a163a5d142acd0c4b022dd">GetPort</a> () const </td></tr>
<tr class="memdesc:a14f2c68a57a163a5d142acd0c4b022dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the port the socket is currently bound to.  <a href="#a14f2c68a57a163a5d142acd0c4b022dd"></a><br/></td></tr>
<tr class="separator:a14f2c68a57a163a5d142acd0c4b022dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e6df73d3b4acf5890bd48229b2d2fa0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#a5e6df73d3b4acf5890bd48229b2d2fa0">operator==</a> (const <a class="el" href="classsf_1_1SocketUDP.php">SocketUDP</a> &amp;Other) const </td></tr>
<tr class="memdesc:a5e6df73d3b4acf5890bd48229b2d2fa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator ==.  <a href="#a5e6df73d3b4acf5890bd48229b2d2fa0"></a><br/></td></tr>
<tr class="separator:a5e6df73d3b4acf5890bd48229b2d2fa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cb8111d79d32e456f047132e61acd24"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#a2cb8111d79d32e456f047132e61acd24">operator!=</a> (const <a class="el" href="classsf_1_1SocketUDP.php">SocketUDP</a> &amp;Other) const </td></tr>
<tr class="memdesc:a2cb8111d79d32e456f047132e61acd24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator !=.  <a href="#a2cb8111d79d32e456f047132e61acd24"></a><br/></td></tr>
<tr class="separator:a2cb8111d79d32e456f047132e61acd24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc35043831c10528cc3e97b959438b95"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SocketUDP.php#afc35043831c10528cc3e97b959438b95">operator&lt;</a> (const <a class="el" href="classsf_1_1SocketUDP.php">SocketUDP</a> &amp;Other) const </td></tr>
<tr class="memdesc:afc35043831c10528cc3e97b959438b95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator &lt;.  <a href="#afc35043831c10528cc3e97b959438b95"></a><br/></td></tr>
<tr class="separator:afc35043831c10528cc3e97b959438b95"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:af750d7515f80120fe802531753208caf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af750d7515f80120fe802531753208caf"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Selector&lt; SocketUDP &gt;</b></td></tr>
<tr class="separator:af750d7515f80120fe802531753208caf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classsf_1_1SocketUDP.php" title="SocketUDP wraps a socket using UDP protocol to send data fastly (but with less safety)">SocketUDP</a> wraps a socket using UDP protocol to send data fastly (but with less safety) </p>

<p>Definition at line <a class="el" href="SocketUDP_8hpp_source.php#l00045">45</a> of file <a class="el" href="SocketUDP_8hpp_source.php">SocketUDP.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a844e648922eccd86d4815d19472bb901"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::SocketUDP::SocketUDP </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a4a7e364fd39aa7338f0822d849323a5d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::Bind </td>
          <td>(</td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>Port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Bind the socket to a specific port. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Port</td><td>: Port to bind the socket to</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if operation has been successful </dd></dl>

</div>
</div>
<a class="anchor" id="ac9abf54c9ced16b55ddef46973cd1a58"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::Close </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Close the socket. </p>
<dl class="section return"><dt>Returns</dt><dd>True if operation has been successful </dd></dl>

</div>
</div>
<a class="anchor" id="a14f2c68a57a163a5d142acd0c4b022dd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short sf::SocketUDP::GetPort </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the port the socket is currently bound to. </p>
<dl class="section return"><dt>Returns</dt><dd>Current port (0 means the socket is not bound) </dd></dl>

</div>
</div>
<a class="anchor" id="affecb97b84b51dea691934f9195abc1f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::IsValid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if the socket is in a valid state ; this function can be called any time to check if the socket is OK. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the socket is valid </dd></dl>

</div>
</div>
<a class="anchor" id="a2cb8111d79d32e456f047132e61acd24"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1SocketUDP.php">SocketUDP</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison operator !=. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: Socket to compare</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if *this != Other </dd></dl>

</div>
</div>
<a class="anchor" id="afc35043831c10528cc3e97b959438b95"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1SocketUDP.php">SocketUDP</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison operator &lt;. </p>
<p>Provided for compatibility with standard containers, as comparing two sockets doesn't make much sense...</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: Socket to compare</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if *this &lt; Other </dd></dl>

</div>
</div>
<a class="anchor" id="a5e6df73d3b4acf5890bd48229b2d2fa0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1SocketUDP.php">SocketUDP</a> &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison operator ==. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: Socket to compare</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if *this == Other </dd></dl>

</div>
</div>
<a class="anchor" id="ac6928928fa1d6242db1f8d4176369996"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Socket::Status sf::SocketUDP::Receive </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>Data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>MaxSize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t &amp;&#160;</td>
          <td class="paramname"><em>SizeReceived</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short &amp;&#160;</td>
          <td class="paramname"><em>Port</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Receive an array of bytes. </p>
<p>This function will block if the socket is blocking</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Data</td><td>: Pointer to a byte array to fill (make sure it is big enough) </td></tr>
    <tr><td class="paramname">MaxSize</td><td>: Maximum number of bytes to read </td></tr>
    <tr><td class="paramname">SizeReceived</td><td>: Number of bytes received </td></tr>
    <tr><td class="paramname">Address</td><td>: Address of the computer which sent the data </td></tr>
    <tr><td class="paramname">Port</td><td>: Port on which the remote computer sent the data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Status code </dd></dl>

</div>
</div>
<a class="anchor" id="a463bbd635513f2653f072c2f220d2495"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Socket::Status sf::SocketUDP::Receive </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Packet.php">Packet</a> &amp;&#160;</td>
          <td class="paramname"><em>PacketToReceive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short &amp;&#160;</td>
          <td class="paramname"><em>Port</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Receive a packet. </p>
<p>This function will block if the socket is blocking</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">PacketToReceive</td><td>: <a class="el" href="classsf_1_1Packet.php" title="Packet wraps data to send / to receive through the network.">Packet</a> to fill with received data </td></tr>
    <tr><td class="paramname">Address</td><td>: Address of the computer which sent the packet </td></tr>
    <tr><td class="paramname">Port</td><td>: Port on which the remote computer sent the data</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Status code </dd></dl>

</div>
</div>
<a class="anchor" id="abce9f533dd86c0fd8fbe26b7efce3bc2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Socket::Status sf::SocketUDP::Send </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>Data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>Size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>Port</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send an array of bytes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Data</td><td>: Pointer to the bytes to send </td></tr>
    <tr><td class="paramname">Size</td><td>: Number of bytes to send </td></tr>
    <tr><td class="paramname">Address</td><td>: Address of the computer to send the packet to </td></tr>
    <tr><td class="paramname">Port</td><td>: Port to send the data to</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Status code </dd></dl>

</div>
</div>
<a class="anchor" id="afef698f2544ac0364d422e1e1ba7a5b6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Socket::Status sf::SocketUDP::Send </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Packet.php">Packet</a> &amp;&#160;</td>
          <td class="paramname"><em>PacketToSend</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1IPAddress.php">IPAddress</a> &amp;&#160;</td>
          <td class="paramname"><em>Address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>Port</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Send a packet of data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">PacketToSend</td><td>: <a class="el" href="classsf_1_1Packet.php" title="Packet wraps data to send / to receive through the network.">Packet</a> to send </td></tr>
    <tr><td class="paramname">Address</td><td>: Address of the computer to send the packet to </td></tr>
    <tr><td class="paramname">Port</td><td>: Port to send the data to</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Status code </dd></dl>

</div>
</div>
<a class="anchor" id="a128ebfff7472dfdd330b46b719e06fd6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::SocketUDP::SetBlocking </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Blocking</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change the blocking state of the socket. </p>
<p>The default behaviour of a socket is blocking</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Blocking</td><td>: Pass true to set the socket as blocking, or false for non-blocking </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6f6b448b8ab63913dad5d6906645081c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::SocketUDP::Unbind </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Unbind the socket from its previous port, if any. </p>
<dl class="section return"><dt>Returns</dt><dd>True if operation has been successful </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="SocketUDP_8hpp_source.php">SocketUDP.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer.php");
?>
