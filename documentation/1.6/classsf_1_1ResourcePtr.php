<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::ResourcePtr&lt; T &gt; Class Template Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classsf_1_1ResourcePtr-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::ResourcePtr&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Safe pointer to a T resource (inheriting from sf::Resource&lt;T&gt;), its pointer is automatically reseted when the resource is destroyed.  
 <a href="classsf_1_1ResourcePtr.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Resource_8hpp_source.php">Resource.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a48ddcd15ed75e9ee3ea88e4d29402140"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#a48ddcd15ed75e9ee3ea88e4d29402140">ResourcePtr</a> ()</td></tr>
<tr class="memdesc:a48ddcd15ed75e9ee3ea88e4d29402140"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a48ddcd15ed75e9ee3ea88e4d29402140"></a><br/></td></tr>
<tr class="separator:a48ddcd15ed75e9ee3ea88e4d29402140"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86ce8beb23f6c4d32e79192a39207c1e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#a86ce8beb23f6c4d32e79192a39207c1e">ResourcePtr</a> (const T *<a class="el" href="classsf_1_1Resource.php">Resource</a>)</td></tr>
<tr class="memdesc:a86ce8beb23f6c4d32e79192a39207c1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a raw resource.  <a href="#a86ce8beb23f6c4d32e79192a39207c1e"></a><br/></td></tr>
<tr class="separator:a86ce8beb23f6c4d32e79192a39207c1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad773b258e867b27f654673fa2147728b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#ad773b258e867b27f654673fa2147728b">ResourcePtr</a> (const <a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a>&lt; T &gt; &amp;Copy)</td></tr>
<tr class="memdesc:ad773b258e867b27f654673fa2147728b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#ad773b258e867b27f654673fa2147728b"></a><br/></td></tr>
<tr class="separator:ad773b258e867b27f654673fa2147728b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ec69fdecccd1240030b24385f6884dd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#a0ec69fdecccd1240030b24385f6884dd">~ResourcePtr</a> ()</td></tr>
<tr class="memdesc:a0ec69fdecccd1240030b24385f6884dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a0ec69fdecccd1240030b24385f6884dd"></a><br/></td></tr>
<tr class="separator:a0ec69fdecccd1240030b24385f6884dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefd17640cfe8d96934435fb8f2b40574"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#aefd17640cfe8d96934435fb8f2b40574">operator=</a> (const <a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a>&lt; T &gt; &amp;Other)</td></tr>
<tr class="memdesc:aefd17640cfe8d96934435fb8f2b40574"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator from another <a class="el" href="classsf_1_1ResourcePtr.php" title="Safe pointer to a T resource (inheriting from sf::Resource&lt;T&gt;), its pointer is automatically reseted ...">ResourcePtr</a>.  <a href="#aefd17640cfe8d96934435fb8f2b40574"></a><br/></td></tr>
<tr class="separator:aefd17640cfe8d96934435fb8f2b40574"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23a9350a7565a26f0cc1bbadb917248d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#a23a9350a7565a26f0cc1bbadb917248d">operator=</a> (const T *<a class="el" href="classsf_1_1Resource.php">Resource</a>)</td></tr>
<tr class="memdesc:a23a9350a7565a26f0cc1bbadb917248d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator from a raw resource.  <a href="#a23a9350a7565a26f0cc1bbadb917248d"></a><br/></td></tr>
<tr class="separator:a23a9350a7565a26f0cc1bbadb917248d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7af0f407f121bff6e4dcf71c7c7955de"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#a7af0f407f121bff6e4dcf71c7c7955de">operator const T *</a> () const </td></tr>
<tr class="memdesc:a7af0f407f121bff6e4dcf71c7c7955de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cast operator to implicitely convert the resource pointer to its raw pointer type.  <a href="#a7af0f407f121bff6e4dcf71c7c7955de"></a><br/></td></tr>
<tr class="separator:a7af0f407f121bff6e4dcf71c7c7955de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e5401c5a07347a35cc3b9192e11b071"><td class="memItemLeft" align="right" valign="top">const T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#a4e5401c5a07347a35cc3b9192e11b071">operator*</a> () const </td></tr>
<tr class="memdesc:a4e5401c5a07347a35cc3b9192e11b071"><td class="mdescLeft">&#160;</td><td class="mdescRight">Operator * overload to return a reference to the actual resource.  <a href="#a4e5401c5a07347a35cc3b9192e11b071"></a><br/></td></tr>
<tr class="separator:a4e5401c5a07347a35cc3b9192e11b071"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae58ea517eee0a97a778c3c59e4c3fe3a"><td class="memItemLeft" align="right" valign="top">const T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#ae58ea517eee0a97a778c3c59e4c3fe3a">operator-&gt;</a> () const </td></tr>
<tr class="memdesc:ae58ea517eee0a97a778c3c59e4c3fe3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Operator -&gt; overload to return a pointer to the actual resource.  <a href="#ae58ea517eee0a97a778c3c59e4c3fe3a"></a><br/></td></tr>
<tr class="separator:ae58ea517eee0a97a778c3c59e4c3fe3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7e9d9ed819db0f541a7c22f5a28abf9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ResourcePtr.php#ae7e9d9ed819db0f541a7c22f5a28abf9">OnResourceDestroyed</a> ()</td></tr>
<tr class="memdesc:ae7e9d9ed819db0f541a7c22f5a28abf9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Function called when the observed resource is about to be destroyed.  <a href="#ae7e9d9ed819db0f541a7c22f5a28abf9"></a><br/></td></tr>
<tr class="separator:ae7e9d9ed819db0f541a7c22f5a28abf9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br/>
class sf::ResourcePtr&lt; T &gt;</h3>

<p>Safe pointer to a T resource (inheriting from sf::Resource&lt;T&gt;), its pointer is automatically reseted when the resource is destroyed. </p>

<p>Definition at line <a class="el" href="Resource_8hpp_source.php#l00116">116</a> of file <a class="el" href="Resource_8hpp_source.php">Resource.hpp</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a48ddcd15ed75e9ee3ea88e4d29402140"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::<a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a86ce8beb23f6c4d32e79192a39207c1e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::<a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a> </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>Resource</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct from a raw resource. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname"><a class="el" href="classsf_1_1Resource.php" title="Base class for every resource that needs to notify dependent classes about its destruction.">Resource</a></td><td>: Internal resource </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad773b258e867b27f654673fa2147728b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::<a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>Copy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Copy</td><td>: Instance to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0ec69fdecccd1240030b24385f6884dd"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::~<a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ae7e9d9ed819db0f541a7c22f5a28abf9"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::OnResourceDestroyed </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Function called when the observed resource is about to be destroyed. </p>

</div>
</div>
<a class="anchor" id="a7af0f407f121bff6e4dcf71c7c7955de"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::operator const T * </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Cast operator to implicitely convert the resource pointer to its raw pointer type. </p>
<p>This might be dangerous in the general case, but in this context it is safe enough to define this operator</p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the actual resource </dd></dl>

</div>
</div>
<a class="anchor" id="a4e5401c5a07347a35cc3b9192e11b071"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T&amp; <a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Operator * overload to return a reference to the actual resource. </p>
<dl class="section return"><dt>Returns</dt><dd>Reference to the internal resource </dd></dl>

</div>
</div>
<a class="anchor" id="ae58ea517eee0a97a778c3c59e4c3fe3a"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T* <a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Operator -&gt; overload to return a pointer to the actual resource. </p>
<dl class="section return"><dt>Returns</dt><dd>Pointer to the internal resource </dd></dl>

</div>
</div>
<a class="anchor" id="aefd17640cfe8d96934435fb8f2b40574"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a>&lt;T&gt;&amp; <a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>Other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assignment operator from another <a class="el" href="classsf_1_1ResourcePtr.php" title="Safe pointer to a T resource (inheriting from sf::Resource&lt;T&gt;), its pointer is automatically reseted ...">ResourcePtr</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Other</td><td>: <a class="el" href="classsf_1_1Resource.php" title="Base class for every resource that needs to notify dependent classes about its destruction.">Resource</a> pointer to assign</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this </dd></dl>

</div>
</div>
<a class="anchor" id="a23a9350a7565a26f0cc1bbadb917248d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ResourcePtr.php">ResourcePtr</a>&lt;T&gt;&amp; <a class="el" href="classsf_1_1ResourcePtr.php">sf::ResourcePtr</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>Resource</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assignment operator from a raw resource. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname"><a class="el" href="classsf_1_1Resource.php" title="Base class for every resource that needs to notify dependent classes about its destruction.">Resource</a></td><td>: <a class="el" href="classsf_1_1Resource.php" title="Base class for every resource that needs to notify dependent classes about its destruction.">Resource</a> to assign</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Reference to this </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Resource_8hpp_source.php">Resource.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer.php");
?>
