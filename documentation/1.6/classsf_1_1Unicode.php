<?php
    $version = '1.6'; // the $ projectnumber variable is automatically replaced by doxygen with the version number
    $pagetitle = 'sf::Unicode Class Reference'; // the $ title variable is automatically replaced by doxygen with the page title
    include('../header.php');
?>
<!-- Generated by Doxygen 1.8.2 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.php"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.php"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.php"><span>Classes</span></a></li>
      <li><a href="files.php"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.php"><span>Class&#160;List</span></a></li>
      <li><a href="classes.php"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.php"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.php"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><b>sf</b></li><li class="navelem"><a class="el" href="classsf_1_1Unicode.php">Unicode</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classsf_1_1Unicode-members.php">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">sf::Unicode Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Provides utility functions to convert from and to any unicode and ASCII encoding.  
 <a href="classsf_1_1Unicode.php#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Unicode_8hpp_source.php">Unicode.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode_1_1Text.php">Text</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This class is an abstract definition of a unicode text, it can be converted from and to any kind of string and encoding.  <a href="classsf_1_1Unicode_1_1Text.php#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a3c6081f88e93693ff8e713053982a9f9"><td class="memItemLeft" align="right" valign="top">typedef std::basic_string&lt; Uint8 &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#a3c6081f88e93693ff8e713053982a9f9">UTF8String</a></td></tr>
<tr class="memdesc:a3c6081f88e93693ff8e713053982a9f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Define a string type for each encoding Warning : in UTF8 and UTF16 strings, one element doesn't necessarily maps to one character ; only an UTF32 element is wide enough to hold all possible unicode values.  <a href="#a3c6081f88e93693ff8e713053982a9f9"></a><br/></td></tr>
<tr class="separator:a3c6081f88e93693ff8e713053982a9f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44c61ac017ac0b9d2cba69dd9b1f475e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a44c61ac017ac0b9d2cba69dd9b1f475e"></a>
typedef std::basic_string&lt; Uint16 &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>UTF16String</b></td></tr>
<tr class="separator:a44c61ac017ac0b9d2cba69dd9b1f475e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa928ecac4c3ace69888bb209bc75ffae"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa928ecac4c3ace69888bb209bc75ffae"></a>
typedef std::basic_string&lt; Uint32 &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>UTF32String</b></td></tr>
<tr class="separator:aa928ecac4c3ace69888bb209bc75ffae"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac1d72ef13410398f812c91678b8b926d"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:ac1d72ef13410398f812c91678b8b926d"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#ac1d72ef13410398f812c91678b8b926d">UTF32ToANSI</a> (In Begin, In End, Out Output, char Replacement= '?', const std::locale &amp;Locale=GetDefaultLocale())</td></tr>
<tr class="memdesc:ac1d72ef13410398f812c91678b8b926d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic function to convert an UTF-32 characters range to an ANSI characters range, using the given locale.  <a href="#ac1d72ef13410398f812c91678b8b926d"></a><br/></td></tr>
<tr class="separator:ac1d72ef13410398f812c91678b8b926d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a323b9aa9a4faa4216cadbc86dda86caf"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:a323b9aa9a4faa4216cadbc86dda86caf"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#a323b9aa9a4faa4216cadbc86dda86caf">ANSIToUTF32</a> (In Begin, In End, Out Output, const std::locale &amp;Locale=GetDefaultLocale())</td></tr>
<tr class="memdesc:a323b9aa9a4faa4216cadbc86dda86caf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic function to convert an ANSI characters range to an UTF-32 characters range, using the given locale.  <a href="#a323b9aa9a4faa4216cadbc86dda86caf"></a><br/></td></tr>
<tr class="separator:a323b9aa9a4faa4216cadbc86dda86caf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac688fa7170cfaccc4aaebc4dd4778a27"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:ac688fa7170cfaccc4aaebc4dd4778a27"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#ac688fa7170cfaccc4aaebc4dd4778a27">UTF8ToUTF16</a> (In Begin, In End, Out Output, Uint16 Replacement= '?')</td></tr>
<tr class="memdesc:ac688fa7170cfaccc4aaebc4dd4778a27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic function to convert an UTF-8 characters range to an UTF-16 characters range, using the given locale.  <a href="#ac688fa7170cfaccc4aaebc4dd4778a27"></a><br/></td></tr>
<tr class="separator:ac688fa7170cfaccc4aaebc4dd4778a27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43fae84b70e7c2f6593e999b64159178"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:a43fae84b70e7c2f6593e999b64159178"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#a43fae84b70e7c2f6593e999b64159178">UTF8ToUTF32</a> (In Begin, In End, Out Output, Uint32 Replacement= '?')</td></tr>
<tr class="memdesc:a43fae84b70e7c2f6593e999b64159178"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic function to convert an UTF-8 characters range to an UTF-32 characters range, using the given locale.  <a href="#a43fae84b70e7c2f6593e999b64159178"></a><br/></td></tr>
<tr class="separator:a43fae84b70e7c2f6593e999b64159178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4af1472a158976c8df860bda42eda47d"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:a4af1472a158976c8df860bda42eda47d"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#a4af1472a158976c8df860bda42eda47d">UTF16ToUTF8</a> (In Begin, In End, Out Output, Uint8 Replacement= '?')</td></tr>
<tr class="memdesc:a4af1472a158976c8df860bda42eda47d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic function to convert an UTF-16 characters range to an UTF-8 characters range, using the given locale.  <a href="#a4af1472a158976c8df860bda42eda47d"></a><br/></td></tr>
<tr class="separator:a4af1472a158976c8df860bda42eda47d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab12e5be50889f8c33e4b23de755c1a58"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:ab12e5be50889f8c33e4b23de755c1a58"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#ab12e5be50889f8c33e4b23de755c1a58">UTF16ToUTF32</a> (In Begin, In End, Out Output, Uint32 Replacement= '?')</td></tr>
<tr class="memdesc:ab12e5be50889f8c33e4b23de755c1a58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic function to convert an UTF-16 characters range to an UTF-32 characters range, using the given locale.  <a href="#ab12e5be50889f8c33e4b23de755c1a58"></a><br/></td></tr>
<tr class="separator:ab12e5be50889f8c33e4b23de755c1a58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af15e6751382869012881cad6e2ec292d"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:af15e6751382869012881cad6e2ec292d"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#af15e6751382869012881cad6e2ec292d">UTF32ToUTF8</a> (In Begin, In End, Out Output, Uint8 Replacement= '?')</td></tr>
<tr class="memdesc:af15e6751382869012881cad6e2ec292d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic function to convert an UTF-32 characters range to an UTF-8 characters range, using the given locale.  <a href="#af15e6751382869012881cad6e2ec292d"></a><br/></td></tr>
<tr class="separator:af15e6751382869012881cad6e2ec292d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa1e84b21af6a345efc22327640d9e81"><td class="memTemplParams" colspan="2">template&lt;typename In , typename Out &gt; </td></tr>
<tr class="memitem:aaa1e84b21af6a345efc22327640d9e81"><td class="memTemplItemLeft" align="right" valign="top">static Out&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#aaa1e84b21af6a345efc22327640d9e81">UTF32ToUTF16</a> (In Begin, In End, Out Output, Uint16 Replacement= '?')</td></tr>
<tr class="memdesc:aaa1e84b21af6a345efc22327640d9e81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generic function to convert an UTF-32 characters range to an UTF-16 characters range, using the given locale.  <a href="#aaa1e84b21af6a345efc22327640d9e81"></a><br/></td></tr>
<tr class="separator:aaa1e84b21af6a345efc22327640d9e81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf7a26e0c686b103eee16b918c1d12e3"><td class="memTemplParams" colspan="2">template&lt;typename In &gt; </td></tr>
<tr class="memitem:abf7a26e0c686b103eee16b918c1d12e3"><td class="memTemplItemLeft" align="right" valign="top">static std::size_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#abf7a26e0c686b103eee16b918c1d12e3">GetUTF8Length</a> (In Begin, In End)</td></tr>
<tr class="memdesc:abf7a26e0c686b103eee16b918c1d12e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of characters composing an UTF-8 string.  <a href="#abf7a26e0c686b103eee16b918c1d12e3"></a><br/></td></tr>
<tr class="separator:abf7a26e0c686b103eee16b918c1d12e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0233fe35e267fd108c30c4155d489f6e"><td class="memTemplParams" colspan="2">template&lt;typename In &gt; </td></tr>
<tr class="memitem:a0233fe35e267fd108c30c4155d489f6e"><td class="memTemplItemLeft" align="right" valign="top">static std::size_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#a0233fe35e267fd108c30c4155d489f6e">GetUTF16Length</a> (In Begin, In End)</td></tr>
<tr class="memdesc:a0233fe35e267fd108c30c4155d489f6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of characters composing an UTF-16 string.  <a href="#a0233fe35e267fd108c30c4155d489f6e"></a><br/></td></tr>
<tr class="separator:a0233fe35e267fd108c30c4155d489f6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d4c3497742bbfc0dcf8b72661faa9c6"><td class="memTemplParams" colspan="2">template&lt;typename In &gt; </td></tr>
<tr class="memitem:a9d4c3497742bbfc0dcf8b72661faa9c6"><td class="memTemplItemLeft" align="right" valign="top">static std::size_t&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classsf_1_1Unicode.php#a9d4c3497742bbfc0dcf8b72661faa9c6">GetUTF32Length</a> (In Begin, In End)</td></tr>
<tr class="memdesc:a9d4c3497742bbfc0dcf8b72661faa9c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of characters composing an UTF-32 string.  <a href="#a9d4c3497742bbfc0dcf8b72661faa9c6"></a><br/></td></tr>
<tr class="separator:a9d4c3497742bbfc0dcf8b72661faa9c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Provides utility functions to convert from and to any unicode and ASCII encoding. </p>

<p>Definition at line <a class="el" href="Unicode_8hpp_source.php#l00044">44</a> of file <a class="el" href="Unicode_8hpp_source.php">Unicode.hpp</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a3c6081f88e93693ff8e713053982a9f9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::basic_string&lt;Uint8&gt; <a class="el" href="classsf_1_1Unicode.php#a3c6081f88e93693ff8e713053982a9f9">sf::Unicode::UTF8String</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Define a string type for each encoding Warning : in UTF8 and UTF16 strings, one element doesn't necessarily maps to one character ; only an UTF32 element is wide enough to hold all possible unicode values. </p>

<p>Definition at line <a class="el" href="Unicode_8hpp_source.php#l00054">54</a> of file <a class="el" href="Unicode_8hpp_source.php">Unicode.hpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a323b9aa9a4faa4216cadbc86dda86caf"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out sf::Unicode::ANSIToUTF32 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>Output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>Locale</em> = <code>GetDefaultLocale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic function to convert an ANSI characters range to an UTF-32 characters range, using the given locale. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">Output</td><td>: Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">Locale</td><td>: Locale to use for conversion (uses the current one by default)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a0233fe35e267fd108c30c4155d489f6e"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::size_t sf::Unicode::GetUTF16Length </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of characters composing an UTF-16 string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Count of the characters in the string </dd></dl>

</div>
</div>
<a class="anchor" id="a9d4c3497742bbfc0dcf8b72661faa9c6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::size_t sf::Unicode::GetUTF32Length </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of characters composing an UTF-32 string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Count of the characters in the string </dd></dl>

</div>
</div>
<a class="anchor" id="abf7a26e0c686b103eee16b918c1d12e3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::size_t sf::Unicode::GetUTF8Length </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the number of characters composing an UTF-8 string. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Count of the characters in the string </dd></dl>

</div>
</div>
<a class="anchor" id="ab12e5be50889f8c33e4b23de755c1a58"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out sf::Unicode::UTF16ToUTF32 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>Output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>Replacement</em> = <code>'?'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic function to convert an UTF-16 characters range to an UTF-32 characters range, using the given locale. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">Output</td><td>: Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">Replacement</td><td>: Replacement character for characters not convertible to output encoding ('?' by default &ndash; use 0 to use no replacement character)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a4af1472a158976c8df860bda42eda47d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out sf::Unicode::UTF16ToUTF8 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>Output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>Replacement</em> = <code>'?'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic function to convert an UTF-16 characters range to an UTF-8 characters range, using the given locale. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">Output</td><td>: Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">Replacement</td><td>: Replacement character for characters not convertible to output encoding ('?' by default &ndash; use 0 to use no replacement character)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="ac1d72ef13410398f812c91678b8b926d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out sf::Unicode::UTF32ToANSI </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>Output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>Replacement</em> = <code>'?'</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>Locale</em> = <code>GetDefaultLocale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic function to convert an UTF-32 characters range to an ANSI characters range, using the given locale. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">Output</td><td>: Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">Replacement</td><td>: Replacement character for characters not convertible to output encoding ('?' by default &ndash; use 0 to use no replacement character) </td></tr>
    <tr><td class="paramname">Locale</td><td>: Locale to use for conversion (uses the current one by default)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="aaa1e84b21af6a345efc22327640d9e81"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out sf::Unicode::UTF32ToUTF16 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>Output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint16&#160;</td>
          <td class="paramname"><em>Replacement</em> = <code>'?'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic function to convert an UTF-32 characters range to an UTF-16 characters range, using the given locale. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">Output</td><td>: Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">Replacement</td><td>: Replacement character for characters not convertible to output encoding ('?' by default &ndash; use 0 to use no replacement character)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="af15e6751382869012881cad6e2ec292d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out sf::Unicode::UTF32ToUTF8 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>Output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>Replacement</em> = <code>'?'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic function to convert an UTF-32 characters range to an UTF-8 characters range, using the given locale. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">Output</td><td>: Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">Replacement</td><td>: Replacement character for characters not convertible to output encoding ('?' by default &ndash; use 0 to use no replacement character)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="ac688fa7170cfaccc4aaebc4dd4778a27"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out sf::Unicode::UTF8ToUTF16 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>Output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint16&#160;</td>
          <td class="paramname"><em>Replacement</em> = <code>'?'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic function to convert an UTF-8 characters range to an UTF-16 characters range, using the given locale. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">Output</td><td>: Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">Replacement</td><td>: Replacement character for characters not convertible to output encoding ('?' by default &ndash; use 0 to use no replacement character)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<a class="anchor" id="a43fae84b70e7c2f6593e999b64159178"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename In , typename Out &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static Out sf::Unicode::UTF8ToUTF32 </td>
          <td>(</td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">In&#160;</td>
          <td class="paramname"><em>End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Out&#160;</td>
          <td class="paramname"><em>Output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>Replacement</em> = <code>'?'</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generic function to convert an UTF-8 characters range to an UTF-32 characters range, using the given locale. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Begin</td><td>: Iterator pointing to the beginning of the input sequence </td></tr>
    <tr><td class="paramname">End</td><td>: Iterator pointing to the end of the input sequence </td></tr>
    <tr><td class="paramname">Output</td><td>: Iterator pointing to the beginning of the output sequence </td></tr>
    <tr><td class="paramname">Replacement</td><td>: Replacement character for characters not convertible to output encoding ('?' by default &ndash; use 0 to use no replacement character)</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Iterator to the end of the output sequence which has been written </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Unicode_8hpp_source.php">Unicode.hpp</a></li>
</ul>
</div><!-- contents -->
<?php
    require("../footer.php");
?>
